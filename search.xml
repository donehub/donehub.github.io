<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在异步线程或线程池中传输 ThreadLocal 上下文</title>
    <url>/2020/12/14/async_thread_local/</url>
    <content><![CDATA[<h4 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h4><p><code>ThreadLocal</code>是线程提供的本地变量，因其线程特殊属性，被经常用于存储与线程相关的信息，如保存登录用户信息、数据库连接配置等。但我们忽略了一个关键点：<code>ThreadLocal</code> 只能用在同步线程中，而在异步线程或线程池中则不起作用。因此，本博文主要探讨如何在异步线程和线程池中传递 <code>ThreadLocal</code> 上下文。</p>
<h4 id="二、问题描述"><a href="#二、问题描述" class="headerlink" title="二、问题描述"></a>二、问题描述</h4><p>发版之后，爆出线上问题：“用户信息获取失败”。为了更好地解释这个问题，先介绍下公司的系统架构：用户登录时，后台系统通过用户 <code>key</code> 获取个人信息并保存在 <code>ThreadLocal</code> 静态对象中，以供后续使用。简要实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 拦截器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerAccessInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                             HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 增加允许跨域的返回信息</span></span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length, Authorization, Accept,X-Requested-With"</span>);</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取并保存用户信息</span></span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest.getCookies() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : httpServletRequest.getCookies()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"vkey"</span>.equals(cookie.getName())) &#123;</span><br><span class="line">                    UserContextUtil.setUser(cookie.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清除用户信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        UserContextUtil.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户信息工具</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserContextUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SyUser&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_BEARER = <span class="string">"Bearer "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前线程用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 前线程用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SyUser <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SyUser syUser = threadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> syUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 直接保存用户信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setSyUser</span><span class="params">(SyUser syUser)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (syUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        threadLocal.set(syUser);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换登录用户信息为当期系统用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookies</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setUser</span><span class="params">(Cookie[] cookies)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cookies == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            String name = cookie.getName().toLowerCase();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"vkey"</span>.equals(name)) &#123;</span><br><span class="line">                String value = cookie.getValue();</span><br><span class="line">                <span class="keyword">if</span> (StrUtil.isEmpty(value)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                LoginUser loginUser = <span class="keyword">new</span> LoginUser(value);</span><br><span class="line">                <span class="keyword">if</span> (loginUser.getId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                SyUser syUser = <span class="keyword">new</span> SyUser();</span><br><span class="line">                syUser.setId(loginUser.getId().intValue());</span><br><span class="line">                syUser.setUserName(loginUser.getMobile());</span><br><span class="line">                syUser.setTrueName(loginUser.getName());</span><br><span class="line">                <span class="keyword">return</span> setSyUser(syUser);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换登录用户信息为当期系统用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headerValue 头部 vkey 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setUser</span><span class="params">(String headerValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isEmpty(headerValue)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (headerValue.startsWith(TOKEN_BEARER)) &#123;</span><br><span class="line">            headerValue = headerValue.substring(TOKEN_BEARER.length());</span><br><span class="line">        &#125;</span><br><span class="line">        LoginUser loginUser = <span class="keyword">new</span> LoginUser(headerValue);</span><br><span class="line">        <span class="keyword">if</span> (loginUser.getId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SyUser syUser = <span class="keyword">new</span> SyUser();</span><br><span class="line">        syUser.setId(loginUser.getId().intValue());</span><br><span class="line">        syUser.setUserName(loginUser.getMobile());</span><br><span class="line">        syUser.setTrueName(loginUser.getName());</span><br><span class="line">        syUser.setPhone(loginUser.getMobile());</span><br><span class="line">        <span class="keyword">return</span> setSyUser(syUser);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取登录用户姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SyUser syUser = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (syUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> syUser.getTrueName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除线程中用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题代码定位：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/web/file"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManageFileController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ManageFileService manageFileService;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 【加载文件】</span></span><br><span class="line"><span class="comment">     * 下载文件的数据准备阶段可能非常长, 前台操作人员无法得知进度, 且无法做其他操作</span></span><br><span class="line"><span class="comment">     * 故将数据准备与文件下载解耦, 解决交互上不舒服的问题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadFileReqDTO 加载文件请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 调用是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/loadFile"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespDTO&lt;String&gt; <span class="title">loadFile</span><span class="params">(@Valid @RequestBody LoadFileReqDTO loadFileReqDTO)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化加载文件信息</span></span><br><span class="line">        AsyncLoadFile asyncLoadFile = manageFileService.initLoadFileInfo(loadFileReqDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行文件加载</span></span><br><span class="line">        manageFileService manageFileService.loadFile(loadFileReqDTO, inheritedSyUser);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RespDTO.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zourongsheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/21 13:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManageFileService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ManageFileHelper manageFileHelper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AsyncLoadFileMapper asyncLoadFileMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 【加载文件】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadFileReqDTO 加载文件请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> asyncLoadFile  初始化加载文件信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> syUser         用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span>(TASK_EXECUTOR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadFile</span><span class="params">(LoadFileReqDTO loadFileReqDTO, AsyncLoadFile asyncLoadFile, SyUser syUser)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"异步加载文件开始; userName: &#123;&#125;"</span>, UserContextUtil.getUserName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 路由加载服务</span></span><br><span class="line">            LoadFileService loadFileService = manageFileHelper.router(loadFileReqDTO.getLoadFileType());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启文件加载过程</span></span><br><span class="line">            LoadFileReqBO loadFileReqBO = <span class="keyword">new</span> LoadFileReqBO();</span><br><span class="line">            BeanUtils.copyProperties(loadFileReqDTO, loadFileReqBO);</span><br><span class="line"></span><br><span class="line">            LoadFileRespBO loadFileRespBO = loadFileService.executeLoadFile(loadFileReqBO);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 备份文件至影像件系统</span></span><br><span class="line">            String fileKey = FileUtil.uploadFile(loadFileRespBO.getFilePathUrl(), FileTypeEnum.XLSX, STORE_FILE_KEY);</span><br><span class="line"></span><br><span class="line">            CuiShouAssert.notEmpty(fileKey, <span class="string">"调用影像件系统异常!"</span>);</span><br><span class="line"></span><br><span class="line">            asyncLoadFile.setFileName(loadFileRespBO.getFileName());</span><br><span class="line">            asyncLoadFile.setFileKey(fileKey);</span><br><span class="line">            asyncLoadFile.setLoadStatus(LoadStatusEnum.SUCCESS.name());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">"加载文件异常; errMsg: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">            asyncLoadFile.setLoadStatus(LoadStatusEnum.FAILURE.name());</span><br><span class="line">            asyncLoadFile.setRemark(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        asyncLoadFileMapper.update(asyncLoadFile);</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">"异步加载文件结束; userName: &#123;&#125;"</span>, UserContextUtil.getUserName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">运行结果...</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">15.235</span>  INFO [-,d11235d6f6eda8d0,<span class="number">8</span>c023b1e45855f97,<span class="keyword">false</span>] <span class="number">19444</span> --- [common-async-executor-<span class="number">1</span>] c.v.c.o.service.file.ManageFileService   : 异步加载文件开始; userName: <span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p>问题很好定位，<code>@Async</code> 异步线程池开启子线程处理任务后，父线程提供的本地线程变量就销毁了。</p>
<h4 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h4><ul>
<li>将用户信息当作参数传入异步方法，再在异步方法中重新设置本地变量；</li>
<li>采用 <code>InheritedThreadLocal</code> 实现子线程上下文的传递。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【加载文件-方法一】</span></span><br><span class="line"><span class="comment"> * 下载文件的数据准备阶段可能非常长, 前台操作人员无法得知进度, 且无法做其他操作</span></span><br><span class="line"><span class="comment"> * 故将数据准备与文件下载解耦, 解决交互上不舒服的问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loadFileReqDTO 加载文件请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 调用是否成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/loadFile"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RespDTO&lt;String&gt; <span class="title">loadFile</span><span class="params">(@Valid @RequestBody LoadFileReqDTO loadFileReqDTO)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化加载文件信息</span></span><br><span class="line">    AsyncLoadFile asyncLoadFile = manageFileService.initLoadFileInfo(loadFileReqDTO);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// #loadFile 为异步方法, 这里将操作人信息继承到子线程中</span></span><br><span class="line">    SyUser syUser = UserContextUtil.getUser();</span><br><span class="line"></span><br><span class="line">    SyUser inheritedSyUser = <span class="keyword">new</span> SyUser();</span><br><span class="line"></span><br><span class="line">    BeanUtils.copyProperties(syUser, inheritedSyUser);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行文件加载</span></span><br><span class="line">    manageFileService manageFileService.loadFile(loadFileReqDTO, inheritedSyUser);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RespDTO.success();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 【加载文件】</span></span><br><span class="line"><span class="comment">* 下载文件的数据准备阶段可能非常长, 前台操作人员无法得知进度, 且无法做其他操作</span></span><br><span class="line"><span class="comment">* 故将数据准备与文件下载解耦, 解决交互上不舒服的问题</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> loadFileReqDTO 加载文件请求</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> asyncLoadFile  初始化加载文件信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> syUser         用户信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Async</span>(TASK_EXECUTOR)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadFile</span><span class="params">(LoadFileReqDTO loadFileReqDTO, AsyncLoadFile asyncLoadFile, SyUser syUser)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    UserContextUtil.setSyUser(syUser);</span><br><span class="line">    log.info(<span class="string">"异步加载文件开始; UserName: &#123;&#125;"</span>, UserContextUtil.getRealName());</span><br><span class="line">    UserContextUtil.remove();</span><br><span class="line">    log.info(<span class="string">"异步加载文件结束; UserName: &#123;&#125;"</span>, UserContextUtil.getRealName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法一运行结果...</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">34.947</span>  INFO [-,<span class="number">480f</span>9c55e785ec6f,c8de532979871193,<span class="keyword">false</span>] <span class="number">19444</span> --- [common-async-executor-<span class="number">2</span>] c.v.c.o.service.file.ManageFileService   : 异步加载文件开始; UserName: 邹荣升</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">18</span>:<span class="number">03</span>:<span class="number">35.235</span>  INFO [-,<span class="number">480f</span>9c55e785ec6f,c8de532979871193,<span class="keyword">false</span>] <span class="number">19444</span> --- [common-async-executor-<span class="number">2</span>] c.v.c.o.service.file.ManageFileService   : 异步加载文件结束; UserName: <span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p>方法一可以说是傻瓜操作，治标不治本，后来的同事稍不注意还会掉进坑里。我们来实现方法二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SyUser&gt; threadLocal = <span class="keyword">new</span> InheritableThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 【加载文件-异步线程】</span></span><br><span class="line"><span class="comment">* 下载文件的数据准备阶段可能非常长, 前台操作人员无法得知进度, 且无法做其他操作</span></span><br><span class="line"><span class="comment">* 故将数据准备与文件下载解耦, 解决交互上不舒服的问题</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> loadFileReqDTO 加载文件请求</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> asyncLoadFile  初始化加载文件信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> syUser         用户信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadFile</span><span class="params">(LoadFileReqDTO loadFileReqDTO, AsyncLoadFile asyncLoadFile, SyUser syUser)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    UserContextUtil.setSyUser(syUser);</span><br><span class="line">    log.info(<span class="string">"异步加载文件开始; UserName: &#123;&#125;"</span>, UserContextUtil.getRealName());</span><br><span class="line">    UserContextUtil.remove();</span><br><span class="line">    log.info(<span class="string">"异步加载文件结束; UserName: &#123;&#125;"</span>, UserContextUtil.getRealName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 【加载文件-异步线程池】</span></span><br><span class="line"><span class="comment">* 下载文件的数据准备阶段可能非常长, 前台操作人员无法得知进度, 且无法做其他操作</span></span><br><span class="line"><span class="comment">* 故将数据准备与文件下载解耦, 解决交互上不舒服的问题</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> loadFileReqDTO 加载文件请求</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> asyncLoadFile  初始化加载文件信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> syUser         用户信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Async</span>(TASK_EXECUTOR)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadFile</span><span class="params">(LoadFileReqDTO loadFileReqDTO, AsyncLoadFile asyncLoadFile, SyUser syUser)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    UserContextUtil.setSyUser(syUser);</span><br><span class="line">    log.info(<span class="string">"异步加载文件开始; UserName: &#123;&#125;"</span>, UserContextUtil.getRealName());</span><br><span class="line">    UserContextUtil.remove();</span><br><span class="line">    log.info(<span class="string">"异步加载文件结束; UserName: &#123;&#125;"</span>, UserContextUtil.getRealName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异步线程和异步线程池两种情况下的运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">运行结果...</span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">18</span>:<span class="number">36</span>:<span class="number">41.560</span>  INFO [-,<span class="number">8658</span>c694de3e9b7a,ccc7a782204c91b0,<span class="keyword">false</span>] <span class="number">19876</span> --- [common-async-executor-<span class="number">1</span>] c.v.c.o.service.file.ManageFileService   : 异步加载文件开始; UserName: 邹荣升</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">18</span>:<span class="number">41</span>:<span class="number">17.735</span>  INFO [-,<span class="number">67</span>b4725bcaacfc64,<span class="number">36</span>ee2acec232be32,<span class="keyword">false</span>] <span class="number">21600</span> --- [common-async-executor-<span class="number">1</span>] c.v.c.o.service.file.ManageFileService   : 异步加载文件开始; UserName: 邹荣升</span><br></pre></td></tr></table></figure>

<h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><p>虽然 <code>ThreadLocal</code> 的线程相关属性提供了很多便利性，但在高并发系统中，直接使用原生静态对象并不合适。因此，如使用 <code>Redis</code>、<code>MQ</code> 一样，深入了解常用工具的特性，是系统设计的必备要素。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>ThreadLocal</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 Axios 实现文件下载</title>
    <url>/2020/03/28/axios_file_download/</url>
    <content><![CDATA[<hr>
<h4 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h4><p><code>Axios</code> 是一个基于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a> 的 <code>HTTP</code> 库，可以用在浏览器和 <code>node.js</code> 中。与传统的 <code>Ajax</code> 相比，<code>Axios</code> 的优势主要体现在: 支持 <code>Promise API</code> 、支持并发、支持请求与响应拦截、自动转换 <code>JSON</code> 数据、支持防御 <code>XSRF</code>、符合 <code>MVVM</code> 设计理念。在目前大火的前端框架 <code>Vue</code> 中也内置了 <a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noopener"><code>Axios 框架</code></a> 。</p>
<p><img src="http://www.plantuml.com/plantuml/png/SoWkIImgAStDuKfCBialKdW-PSMpZkrSYUcfUIKAOPcfvKXCt_oKr1me7yBcWYYtqRK3oLizsRNaoQv9N20sK0YknKhXQN_FqmaJd--U-7JTB2wukAuTLBeejR0qjRY42yn5rbYKMboGdrUSokMGcfS2T2G0" alt=""></p>
<p>正是因为 <code>Axios</code> 的数据处理为 <code>json</code> 格式，所以只能获取文件流，但不能给与正确处理。具体表现为:</p>
<ul>
<li><code>response.status</code> 与 <code>repsponse.headers</code> 与期望相同，但 <code>response.data</code> 为一团乱码</li>
<li>浏览器没有自动下载文件 </li>
</ul>
<p><img src="https://s1.ax1x.com/2020/03/29/GEePgI.png" alt=""></p>
<h4 id="二、引入-Blob-容器实现文件下载"><a href="#二、引入-Blob-容器实现文件下载" class="headerlink" title="二、引入 Blob  容器实现文件下载"></a>二、引入 <code>Blob</code>  容器实现文件下载</h4><p>既然 <code>Axios</code> 无法正确处理文件流，便需要采用其他技术来达到预期效果。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener"><code>Blob</code></a> 对象表示一个不可变、原始数据的类文件对象；从字面意思来看，<code>Blob</code> 也是一个可以存储二进制文件的容器。通过这项技术，可以完美地弥补 <code>Axios</code> 的不足。具体实现如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载文件请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">download</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    url: <span class="string">'/web/bill/download'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    data: param,</span><br><span class="line">    responseType: <span class="string">'blob'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载文件入口方法</span></span><br><span class="line">download(<span class="keyword">this</span>.param).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行文件下载</span></span><br><span class="line">    <span class="keyword">this</span>.exeDownloadFile(response)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行文件下载</span></span><br><span class="line">exeDownloadFile (response) &#123;</span><br><span class="line">    <span class="comment">// 创建 Blob 对象</span></span><br><span class="line">    <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([response.data], &#123;<span class="attr">type</span>: response.headers[<span class="string">'content-type'</span>]&#125;)</span><br><span class="line">    <span class="comment">// 获取文件名</span></span><br><span class="line">    <span class="keyword">let</span> fileName = response.headers[<span class="string">'content-disposition'</span>].match(<span class="regexp">/filename=(.*)/</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">// 创建指向 Blob 对象地址的URL</span></span><br><span class="line">    <span class="keyword">let</span> href = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">    <span class="comment">// 创建用于跳转至下载链接的 a 标签</span></span><br><span class="line">    <span class="keyword">let</span> downloadElement = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">    <span class="comment">// 属性配置</span></span><br><span class="line">    downloadElement.style.display = <span class="string">'none'</span></span><br><span class="line">    downloadElement.href = href</span><br><span class="line">    downloadElement.download = fileName</span><br><span class="line">    <span class="comment">// 将 a 标签挂载至当前页面</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(downloadElement)</span><br><span class="line">    <span class="comment">// 触发下载事件</span></span><br><span class="line">    downloadElement.click()</span><br><span class="line">    <span class="comment">// 移除已挂载的 a 标签</span></span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(downloadElement)</span><br><span class="line">    <span class="comment">// 释放 Blob URL</span></span><br><span class="line">    <span class="built_in">window</span>.URL.revokeObjectURL(href)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然以上可以实现文件下载，但美中不足的是，当后台返回异常时，通过 <code>Blob</code> 对象依然可以下载到一个 undefined 文件。因此，在执行下载之前，需要对下载请求是否存在异常做出判断。具体实现如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载文件入口方法</span></span><br><span class="line">download(<span class="keyword">this</span>.param).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fr = <span class="keyword">new</span> FileReader()</span><br><span class="line">    fr.readAsText(response.data)</span><br><span class="line">    fr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 新增-异常校验; 若 Blob 对象可 JSON 格式化，则说明文件下载异常</span></span><br><span class="line">    	<span class="keyword">try</span> &#123;</span><br><span class="line">    	    <span class="keyword">let</span> jsonRet = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.result)</span><br><span class="line">    	&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    	    <span class="comment">// 执行文件下载</span></span><br><span class="line">            <span class="keyword">this</span>.exeDownloadFile(response)</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



















]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios 跨域下载文件解决方案</title>
    <url>/2020/03/29/axios_file_download-2/</url>
    <content><![CDATA[<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p>上篇介绍了通过<code>Blob</code> 类文件对象实现文件下载，但具体操作下去，会发现我留下了一个坑—浏览器跨域请求问题<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener"><code>CORS</code></a>。如下图提示:</p>
<p><img src="https://s1.ax1x.com/2020/06/10/toVMsf.png" alt="toVMsf.png"></p>
<p>为实现应用解耦，前后端分离已然成为主流设计。生产环境中，前端请求需要经过代理和负载(如: <code>Nigix</code>、<code>LVS</code>)处理，才能传递到后端。此种模式下，前后端的交互实现都需要跨域。</p>
<p>同源安全策略是浏览器的一种安全限制，默认阻止跨域获取资源，防止跨站攻击。但 <code>CORS</code> 为跨域请求提供了可能。<code>CORS</code> 将跨域权限交给 <code>Web</code> 服务端，即通过配置就可以实现跨域地资源访问。</p>
<h3 id="2-跨域请求"><a href="#2-跨域请求" class="headerlink" title="2. 跨域请求"></a>2. 跨域请求</h3><table>
<thead>
<tr>
<th>跨域场景</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>域名不同</td>
<td>spring.io     zhihu.com</td>
</tr>
<tr>
<td>域名相同，端口不通</td>
<td><a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a>; <a href="http://127.0.0.1:8081" target="_blank" rel="noopener">http://127.0.0.1:8081</a></td>
</tr>
<tr>
<td>二级目录不同</td>
<td>document.spring.io; reference.spring.io</td>
</tr>
</tbody></table>
<p>综上:  当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。</p>
<h3 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h3><p><code>Access-Control-Allow-Origin</code> 是响应头中一个重要的属性，它规定浏览器可以获取哪些域的资源。既然 <code>CORS</code> 将跨域访问权限交给了服务器，那么只需要服务器设置 <code>Access-Control-Allow-Origin</code>属性即可。以 <code>Java</code> 为后端语言的服务中，可以做如下设置:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为实现服务的可扩展，采用通配符域名，即允许访问所有域的资源</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br></pre></td></tr></table></figure>

<p>继续实现下去，我们可能又会遇到如下问题:</p>
<p><img src="https://s1.ax1x.com/2020/06/10/tol4mR.png" alt="tol4mR.png"></p>
<p>查阅资料发现，对于跨域请求，请求头的可获取性配置在属性 <code>Access-Control-Expose-Headers</code> 中，<code>W3C</code> 规定客户端获取的响应头字段仅限于<code>simple response header</code> ，包括:</p>
<ul>
<li><code>Cache-Control</code></li>
<li><code>Content-Language</code></li>
<li><code>Content-Type</code></li>
<li><code>Expires</code></li>
<li><code>Last-Modified</code></li>
<li><code>Pragma</code></li>
</ul>
<p>而文件名在后端的设置方式如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">"fileName"</span>, encodeFileName);</span><br></pre></td></tr></table></figure>

<p>因此还后端将请求头 <code>fileName</code> 暴露给前端，配置如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">"fileName"</span>, encodeFileName);</span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Expose-Headers"</span>, <span class="string">"fileName"</span>);</span><br></pre></td></tr></table></figure>

<p>以上。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>红烧鱼</title>
    <url>/2020/04/12/braise_fish/</url>
    <content><![CDATA[<h5 id="食材准备"><a href="#食材准备" class="headerlink" title="食材准备"></a>食材准备</h5><p>鱼，玉米油，佐料（大葱、姜、蒜头、生抽、老抽、醋、料酒、蚝油、豉油、花椒、八角、桂树皮、黄豆酱）</p>
<p><img src="https://s1.ax1x.com/2020/04/12/GO4pTK.jpg" alt="GO4pTK.jpg"></p>
<h5 id="1-煎鱼"><a href="#1-煎鱼" class="headerlink" title="1. 煎鱼"></a>1. 煎鱼</h5><p><img src="https://s1.ax1x.com/2020/04/12/GO4kSH.jpg" alt="GO4kSH.jpg"></p>
<p>为了不糊锅，建议事先在鱼的身上糊上一层面粉。入锅之前，需要提起鱼来，把多余的面粉抖掉，防止热油变苦。煎鱼的目的有两个：高油温可以锁住水分，使鱼肉外焦里嫩；鱼本身的腥味主要来自于表皮和腹腔，高油温可以迅速使鱼皮和腹腔角质化，起到去腥的作用。</p>
<p><img src="https://s1.ax1x.com/2020/04/12/GO4MtS.jpg" alt="GO4MtS.jpg"></p>
<p>待鱼炸至两面金黄后捞出，放凉备用。</p>
<p><img src="https://s1.ax1x.com/2020/04/12/GO4t00.jpg" alt="GO4t00.jpg"></p>
<h5 id="2-烧鱼"><a href="#2-烧鱼" class="headerlink" title="2. 烧鱼"></a>2. 烧鱼</h5><p><img src="https://s1.ax1x.com/2020/04/12/GO4g76.jpg" alt="GO4g76.jpg"></p>
<p>热油锅将佐料翻炒出味，兑水至 2/3 满锅。</p>
<p><img src="https://s1.ax1x.com/2020/04/12/GO4ojA.jpg" alt="GO4ojA.jpg"></p>
<p>大火烧开，约 10 分钟后转至文火慢炖。约 1 小时后，大火收汁，出锅。</p>
<p><img src="https://s1.ax1x.com/2020/04/12/GO5VCF.jpg" alt="GO5VCF.jpg"></p>
<h5 id="3-心得"><a href="#3-心得" class="headerlink" title="3. 心得"></a>3. 心得</h5><p>红烧鱼是我最常做的荤菜，我也试过很多做法，有的味道很好，有的就做砸了。综合实操经验来看，我觉得做鱼的关键，并不是那盘佐料，也不是热油锅炸至两面金黄，而是时间——煮鱼的时间。我试过将一条鲜鱼直接放入一锅水中，然后只加入油盐酱醋，慢煮 2 小时后，别是一番风味——鱼的原味。所以，以上很多步骤可能只是花拳绣腿，关键还是在 2/3 满锅的水和 1 小时的文火慢炖。大家都可以尝试下，感受下那 1 小时内到底发生了什么。</p>
]]></content>
      <categories>
        <category>吃货</category>
      </categories>
      <tags>
        <tag>鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>位与运算在SQL中的使用</title>
    <url>/2020/07/19/bitwise_and_in_sql/</url>
    <content><![CDATA[<h4 id="一、需求背景"><a href="#一、需求背景" class="headerlink" title="一、需求背景"></a>一、需求背景</h4><p>本周负责做调账线上化，其中一个业务需求比较棘手：提交调账申请后，需在数据表记录对应的调账类型；而在调账复核页面，列表筛选项-调账类型，需支持多选。简单枚举如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> AdjustTypeEnum &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调账类型枚举; 一次调账申请可能对应多种调账类型，在数据表中枚举值之间以英文 , 分隔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FINE(<span class="number">0</span>, <span class="string">"应还罚息"</span>),</span><br><span class="line">    TOTAL_REPAYMENT(<span class="number">1</span>, <span class="string">"应还总额"</span>),</span><br><span class="line">    FACT_REPAYMENT(<span class="number">2</span>, <span class="string">"实还总额"</span>),</span><br><span class="line">    FACT_PAYMENT_DATE(<span class="number">3</span>, <span class="string">"实还日期"</span>),</span><br><span class="line">    OVERDUE_DAYS(<span class="number">4</span>, <span class="string">"逾期天数"</span>),</span><br><span class="line">    PAYMENT_STATUS(<span class="number">5</span>, <span class="string">"还款状态"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假如调账申请A的调账类型包括应还罚息和应还总额，则数据表相应字段值为<code>0,1</code>。在复核页面，若调账类型复选项中包含应还罚息或应还总额，则需查询到该申请。此时，我们发现<code>SQL</code>内置函数<code>FIND_IN_SET</code>只支持单选项查询，而无法灵活拆分筛选条件和存储数据。因此，有必要调整一下数据的存储规则和查询规则。</p>
<h4 id="二、位与运算的妙用"><a href="#二、位与运算的妙用" class="headerlink" title="二、位与运算的妙用"></a>二、位与运算的妙用</h4><p>首先，我们需要进一步抽象：一方面，为了不浪费存储空间，科学地设计数据表，我们需要将目标数据列表整合存储在一个字段中；另一方面，数据库引擎需要灵活使用整合后的字段，以执行相应的查询语句。说白了，就是看起来像做了整合，实际上还是原始的目标数据列表。</p>
<p>事实证明，上面提出的方案根本满足不了业务需求，是一个非常差的设计。除了以逗号分隔枚举值的存储方式，还有一种更为科学的存储方式——二进制。简单做几个位与运算：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储值: 3; 查询条件: 1</span></span><br><span class="line"><span class="comment">// 3 == 2 + 1</span></span><br><span class="line"><span class="comment">// 1 &amp; 3 == 1</span></span><br><span class="line"><span class="number">0001</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="number">0011</span></span><br><span class="line">=</span><br><span class="line"><span class="number">0001</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储值: 7; 查询条件: 1</span></span><br><span class="line"><span class="comment">// 7 == 1 + 2 + 4</span></span><br><span class="line"><span class="comment">// 1 &amp; 7 == 1</span></span><br><span class="line"><span class="number">0111</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="number">0001</span></span><br><span class="line">=</span><br><span class="line"><span class="number">0001</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储值: 7; 查询条件: 3</span></span><br><span class="line"><span class="comment">// 7 == 1 + 2 + 4</span></span><br><span class="line"><span class="comment">// 3 == 1 + 2</span></span><br><span class="line"><span class="comment">// 3 &amp; 7 == 3</span></span><br><span class="line"><span class="number">0111</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="number">0011</span></span><br><span class="line">=</span><br><span class="line"><span class="number">0011</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储值: 7; 查询条件: 15</span></span><br><span class="line"><span class="comment">// 7 == 1 + 2 + 4</span></span><br><span class="line"><span class="comment">// 15 == 1 + 2 + 4 + 8</span></span><br><span class="line"><span class="comment">// 15 &amp; 7 == 7</span></span><br><span class="line"><span class="number">0111</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="number">1111</span></span><br><span class="line">=</span><br><span class="line"><span class="number">0111</span></span><br></pre></td></tr></table></figure>

<p>从以上位与运算实例，可以发现一个有趣的现象：若将枚举值设置为<code>2</code>的<code>n</code>次幂，则只需将目标数据列表加合，即可保证每一个目标数据对应到二进制中的一位。</p>
<p><img src="http://www.plantuml.com/plantuml/png/TP9TIyCm58Rl-oj2hsTf-j7fjfGL5q6OcwoPC8QCQjArMBkHLhrG_xinSP14xSKBvpbFtuj3fbrVyFxbkN4SMkzvSQn0n_Whu-3T0UBZHVj4QmuGcA_6ZaJjWR9jLnL79YXdZmTE1-2jfdqbPWyEGCNgVTNBuLxxnzysnGDh17SdfPzwdlSnAM4AHGOoGvcHp5Xcaa9Nwxxujnl-wdR5-hGDpEtLzG8Zg0kXAP0boUQx5RxDDZTuGL2Wkv5LbbqIJOrqDVv3_H5tiunWTAxRYMalx_1gjiP2tEG89hevDCrJPKuoiivH6BZ6sKTbSfRACunAVwppMF7Gvf7YaSr3nMER1uedDeUA3stkAmub_tIchANVB_0B" alt=""></p>
<p>此时，对于任何一个查询条件，只需要将其与整合值进行位与运算，即可得到匹配的值。</p>
<p>由此，我们调整枚举为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> AdjustTypeEnum &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调账类型枚举; 一次调账申请可能对应多种调账类型，在数据表中存储各值之和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FINE(<span class="number">1</span>, <span class="string">"应还罚息"</span>),</span><br><span class="line">    TOTAL_REPAYMENT(<span class="number">2</span>, <span class="string">"应还总额"</span>),</span><br><span class="line">    FACT_REPAYMENT(<span class="number">4</span>, <span class="string">"实还总额"</span>),</span><br><span class="line">    FACT_PAYMENT_DATE(<span class="number">8</span>, <span class="string">"实还日期"</span>),</span><br><span class="line">    OVERDUE_DAYS(<span class="number">16</span>, <span class="string">"逾期天数"</span>),</span><br><span class="line">    PAYMENT_STATUS(<span class="number">32</span>, <span class="string">"还款状态"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调整<code>SQL</code>为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`boss-account`</span>.acct_adjust_account_record</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">adjust_type_sum &amp; <span class="comment">#&#123;调账类型筛选条件值之和&#125; &gt; 0</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>萝卜丸子</title>
    <url>/2020/12/05/ball/</url>
    <content><![CDATA[<hr>
<p>最近在忙很多事，工作和生活都乱糟糟的，博客也停更了。写技术还是美食呢，当然是美食啦。</p>
<p>今天做萝卜丸子。边做边吃，忽然想起读初二的一天，同学们凑钱买了五斤萝卜丸子，然后在英语课上偷吃的故事。十五年过去了，但历历在目。</p>
<h5 id="一、食材准备"><a href="#一、食材准备" class="headerlink" title="一、食材准备"></a>一、食材准备</h5><p>青萝卜、胡萝卜、红薯淀粉、面粉、鸡蛋、辣椒、胡椒、葱姜蒜、生抽、老抽、蚝油、冰糖。</p>
<p><a href="https://imgchr.com/i/DOPsrd" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/05/DOPsrd.jpg" alt="DOPsrd.jpg"></a></p>
<h5 id="二、调料子"><a href="#二、调料子" class="headerlink" title="二、调料子"></a>二、调料子</h5><p>首先将萝卜刨丝。</p>
<p><a href="https://imgchr.com/i/DOPjRU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/05/DOPjRU.jpg" alt="DOPjRU.jpg"></a></p>
<p>然后要杀掉萝卜的水气和臭味。比较喜欢看老饭骨，大伯给的方子是在沸水中放入冰糖，再倒入萝卜丝。今天试了下，效果确实很棒，建议民间推广。</p>
<p><a href="https://imgchr.com/i/DOPgat" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/05/DOPgat.jpg" alt="DOPgat.jpg"></a></p>
<p>接下来调糊糊。用筷子顺着一个方向搅拌，直到可以用筷子提起来。这步也叫上劲，是关键一环。</p>
<p><a href="https://imgchr.com/i/DOiNLj" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/05/DOiNLj.jpg" alt="DOiNLj.jpg"></a></p>
<p>调糊糊前，可以先把油热上。</p>
<p><a href="https://imgchr.com/i/DOiXTI" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/05/DOiXTI.jpg" alt="DOiXTI.jpg"></a></p>
<p>待油七分热，将糊糊团成丸子，依次放入。油温太高会让丸子糊掉，太低又会导致丸子吸油太多。七分热怎么看呢？可以先放一小块糊糊进去，剧烈翻滚但短时间内又不会泛黄就可以了。</p>
<p><a href="https://imgchr.com/i/DOFTNq" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/05/DOFTNq.jpg" alt="DOFTNq.jpg"></a></p>
<p>文火慢炸20分钟，表面金黄时捞出。</p>
<p><a href="https://imgchr.com/i/DOFxb9" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/05/DOFxb9.jpg" alt="DOFxb9.jpg"></a></p>
<p>丸子放入次序不一样，可能炸出来的颜色也不一样。强迫症患者可以将丸子下入油中复炸一次，让颜色均匀。</p>
<p>萝卜丸子可以当零食吃，也可以做汤。</p>
]]></content>
      <categories>
        <category>吃货</category>
      </categories>
      <tags>
        <tag>小吃</tag>
      </tags>
  </entry>
  <entry>
    <title>DataX 的设计与简单使用</title>
    <url>/2021/05/03/dataX_introduction/</url>
    <content><![CDATA[<hr>
<h3 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h3><p>最近在做数据迁移工具。经过多方调研，最后选择阿里巴巴开源工具 <code>DataX</code>。为了兼容携程 <code>Dal</code> 组件，对 <code>DataX</code> 连接源库和目标库的部分做了改造，以便通过 <code>TitanKey</code> 实现数据的同步。因此，关于数据同步的内容，计划分为三个章节：<code>DataX</code> 工具研究介绍、携程 <code>Dal</code> 组件研究介绍、<code>DataX</code> 整合 <code>Dal</code>。本篇介绍 <code>DataX</code> 的作用机制与使用。</p>
<h5 id="一、DataX-介绍"><a href="#一、DataX-介绍" class="headerlink" title="一、DataX 介绍"></a>一、<code>DataX</code> 介绍</h5><p><code>DataX</code> 是阿里巴巴开源出来的数据同步工具，主要解决解决各种异构数据源之间的同步难题。目前已经拥有比较完善的插件体系，包括常用的 <code>RDBMS</code> 数据库、<code>NOSQL</code>、大数据计算系统。良好的架构设计，方便开发者引入新插件，一步步构建起数据同步的生态圈。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_6_29_DataX_introduction.png" alt=""></p>
<h5 id="二、目前支持的插件"><a href="#二、目前支持的插件" class="headerlink" title="二、目前支持的插件"></a>二、目前支持的插件</h5><table>
<thead>
<tr>
<th align="left">类型</th>
<th>数据源</th>
<th>Reader(读)</th>
<th>Writer(写)</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>RDBMS</code> 关系型数据库</td>
<td><code>MySQL</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>Oracle</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>SQLServer</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>PostgreSQL</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>DRDS</code>(分布式关系型数据库)</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td>通用 <code>RDBMS</code> (支持所有关系型数据库)</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left">阿里云数仓数据存储</td>
<td><code>ODPS</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>ADS</code></td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>OSS</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>OCS</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"><code>NoSQL</code>数据存储</td>
<td><code>OTS</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>Hbase0.94</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>Hbase1.1</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>Phoenix4.x</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>Phoenix5.x</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>MongoDB</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>Hive</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>Cassandra</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left">无结构化数据存储</td>
<td><code>TxtFile</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>FTP</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>HDFS</code></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left"></td>
<td><code>Elasticsearch</code></td>
<td></td>
<td>√</td>
</tr>
<tr>
<td align="left">时间序列数据库</td>
<td><code>OpenTSDB</code></td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td align="left"></td>
<td><code>TSDB</code></td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<h5 id="三、DataX-同步机制"><a href="#三、DataX-同步机制" class="headerlink" title="三、DataX 同步机制"></a>三、<code>DataX</code> 同步机制</h5><p><code>DataX</code> 将数据同步过程中的读取和写入分别抽象为 <code>Reader</code>/<code>Writer</code>插件，并且以框架作为媒介，实现读取数据源和同步数据源的灵活组合。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_6_59_datax3.0.png" alt=""></p>
<p> 简单来说，<code>DataX</code> 的设计愿景，是建立一个万能数据池（图中的 <code>FrameWork</code>）：有无限根管道通往池子，负责导入数据；同时又有无限根管道负责向外导出数据。向池子里导入数据，依赖 <code>Reader</code> 插件；从池子向外导出数据，依赖 <code>Writer</code> 插件。这种设计的精妙之处，在于这个数据池子是万能的，就是说可以从任何一根管道导入数据，也可以将数据导出到任何一根管道。因此，我们只需要关心导入数据和导出数据的管道建设，也就是开发新的 <code>Reader</code>/<code>Writer</code>插件，便可实现多种数据源之间的同步。</p>
<h5 id="四、DataX数据同步过程"><a href="#四、DataX数据同步过程" class="headerlink" title="四、DataX数据同步过程"></a>四、<code>DataX</code>数据同步过程</h5><p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_7_23_datax_sync_flow.png" alt=""></p>
<p>名词解释：</p>
<p><code>Job</code>：<code>DataX</code> 执行数据同步任务的最小业务单元；</p>
<p><code>Task</code>：<code>DataX</code> 执行数据同步任务的最小执行单元，由 <code>Job</code> 拆分而来，为实现最大的同步效率；</p>
<p><code>TaskGroup</code>：包含一组 <code>Task</code> 的集合；</p>
<p><code>DataX</code> 调度过程：</p>
<p>提交一个数据同步 <code>Job</code> 至 <code>DataX</code> 后，<code>DataX</code> 会开启一个 <code>Job</code> 进程，然后根据拆分策略，将 <code>Job</code> 拆分为多个 <code>Task</code>。接下来，<code>Job</code> 调用 <code>Scheduler</code>，依据配置的并发数量，重新对拆分好的 <code>Task</code> 进行组合，这样组合叫做 <code>TaskGroup</code>。最后，<code>TaskGroup</code> 以一定的并发量（配置项: <code>channel</code>）来执行组内的 <code>Task</code>。任务执行过程中，<code>DataX</code> 框架会收集任务执行结果，并以报表的形式打印在日志中。</p>
<h5 id="五、-DataX-的使用"><a href="#五、-DataX-的使用" class="headerlink" title="五、 DataX 的使用"></a>五、 <code>DataX</code> 的使用</h5><p>为了演示方便，我们直接做 <code>MySQL</code> 到 <code>MySQL</code> 库的数据同步。</p>
<p>首先需要获取 <code>DataX</code> 工具包。有两种途径：一是下载<code>Datax=X</code> <a href="https://github.com/alibaba/DataX.git" target="_blank" rel="noopener">源码</a>，通过 <code>Maven</code> 打包；二是直接下载<a href="http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz" target="_blank" rel="noopener">官方工具包</a>；</p>
<p>然后获取数据同步配置模板。查看源码可知，为了操作方便，<code>DataX</code> 已经内嵌了 <code>Python</code> 执行脚本，可以通过脚本语言获取配置模板，以及执行后续的同步操作。这里我们执行（在 <code>DataX</code> 工具包的 <code>bin</code> 目录下）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python datax.py -r mysqlreader -w mysqlwriter</span><br><span class="line"></span><br><span class="line">DataX (DATAX-OPENSOURCE-3.0), From Alibaba !</span><br><span class="line">Copyright (C) 2010-2017, Alibaba Group. All Rights Reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please refer to the mysqlreader document:</span><br><span class="line">     https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;DataX&#x2F;blob&#x2F;master&#x2F;mysqlreader&#x2F;doc&#x2F;mysqlreader.md</span><br><span class="line"></span><br><span class="line">Please refer to the mysqlwriter document:</span><br><span class="line">     https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;DataX&#x2F;blob&#x2F;master&#x2F;mysqlwriter&#x2F;doc&#x2F;mysqlwriter.md</span><br><span class="line"></span><br><span class="line">Please save the following configuration as a json file and  use</span><br><span class="line">     python &#123;DATAX_HOME&#125;&#x2F;bin&#x2F;datax.py &#123;JSON_FILE_NAME&#125;.json</span><br><span class="line">to run the job.</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;mysqlreader&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: [],</span><br><span class="line">                                &quot;table&quot;: []</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;password&quot;: &quot;&quot;,</span><br><span class="line">                        &quot;username&quot;: &quot;&quot;,</span><br><span class="line">                        &quot;where&quot;: &quot;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;mysqlwriter&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: &quot;&quot;,</span><br><span class="line">                                &quot;table&quot;: []</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;password&quot;: &quot;&quot;,</span><br><span class="line">                        &quot;preSql&quot;: [],</span><br><span class="line">                        &quot;session&quot;: [],</span><br><span class="line">                        &quot;username&quot;: &quot;&quot;,</span><br><span class="line">                        &quot;writeMode&quot;: &quot;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面打印出来的 <code>Json</code> 串就是 <code>MySQL</code> 到 <code>MySQL</code>数据同步的配置模板。将模板中的选项补充完成，<code>mysql2mysql.json</code> 样例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"job"</span>: &#123;</span><br><span class="line">        <span class="attr">"content"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"reader"</span>: &#123;</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"mysqlreader"</span>,</span><br><span class="line">                    <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">                        <span class="attr">"column"</span>: [</span><br><span class="line">							<span class="string">"id"</span>,</span><br><span class="line">							<span class="string">"name"</span></span><br><span class="line">						],</span><br><span class="line">                        <span class="attr">"connection"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"jdbcUrl"</span>: [<span class="string">"jdbc:mysql://127.0.0.1:3306/test?useSSL=false&amp;zeroDateTimeBehavior=EXCEPTION&amp;serverTimezone=UTC"</span>],</span><br><span class="line">                                <span class="attr">"table"</span>: [<span class="string">"from_table"</span>]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        <span class="attr">"password"</span>: <span class="string">"**********"</span>,</span><br><span class="line">                        <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">                        <span class="attr">"where"</span>: <span class="string">""</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"writer"</span>: &#123;</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"mysqlwriter"</span>,</span><br><span class="line">                    <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">                        <span class="attr">"column"</span>: [</span><br><span class="line">							<span class="string">"id"</span>,</span><br><span class="line">							<span class="string">"name"</span></span><br><span class="line">						],</span><br><span class="line">                        <span class="attr">"connection"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"jdbcUrl"</span>: <span class="string">"jdbc:mysql://127.0.0.1:3306/test?useSSL=false&amp;zeroDateTimeBehavior=EXCEPTION&amp;serverTimezone=UTC"</span>,</span><br><span class="line">                                <span class="attr">"table"</span>: [<span class="string">"to_table"</span>]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        <span class="attr">"password"</span>: <span class="string">"**********"</span>,</span><br><span class="line">                        <span class="attr">"preSql"</span>: [<span class="string">"delete from to_table"</span>],</span><br><span class="line">                        <span class="attr">"session"</span>: [],</span><br><span class="line">                        <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">                        <span class="attr">"writeMode"</span>: <span class="string">"insert"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"setting"</span>: &#123;</span><br><span class="line">            <span class="attr">"speed"</span>: &#123;</span><br><span class="line">                <span class="attr">"channel"</span>: <span class="number">5</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把这个文件放在 <code>dataX</code> 目录下，执行 <code>Python</code> 脚本（在 <code>DataX</code> 的 <code>bin</code> 目录下）：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python datax.py ./mysql2mysql.json</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">25</span>.<span class="number">263</span> [job-<span class="number">0</span>] INFO  JobContainer - </span><br><span class="line">任务启动时刻                    : <span class="number">2021</span>-<span class="number">04</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">15</span></span><br><span class="line">任务结束时刻                    : <span class="number">2021</span>-<span class="number">04</span>-<span class="number">08</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">25</span></span><br><span class="line">任务总计耗时                    :                 <span class="number">10</span>s</span><br><span class="line">任务平均流量                    :              <span class="number">205</span>B/s</span><br><span class="line">记录写入速度                    :              <span class="number">5</span>rec/s</span><br><span class="line">读出记录总数                    :                  <span class="number">50</span></span><br><span class="line">读写失败总数                    :                   <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>这样我们便可以将 <code>from_table</code> 中数据同步至 <code>to_table</code> 中。<code>DataX</code> 框架收集到的各项指标打印在最后。关于配置项中的各项指标，可参见源码的文档介绍。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据同步</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages 绑定个人域名</title>
    <url>/2021/01/13/github_pages_domain/</url>
    <content><![CDATA[<hr>
<h4 id="一、为什么要使用域名"><a href="#一、为什么要使用域名" class="headerlink" title="一、为什么要使用域名"></a>一、为什么要使用域名</h4><p>曾经很多次想给别人介绍我熬着夜写出的技术博客，但网址是什么，我经常拼不出来。虽然 <code>donehub.github.io</code> 的结构比较简单，但摆到台面上，总差那么点意思。因此，为了让自己更容易被记住，我需要一个域名。</p>
<h4 id="二、GitHub-Pages-支持域名配置"><a href="#二、GitHub-Pages-支持域名配置" class="headerlink" title="二、GitHub Pages 支持域名配置"></a>二、<code>GitHub Pages</code> 支持域名配置</h4><p><code>GitHub Pages</code> 是一个很好的博客载体，部署成功之后会分配一个 <code>username.github.io</code> 的访问地址。同时，<code>GitHub Pages</code> 也预留了域名配置项，“我们可以定制化一个域名，不用再去访问默认的地址”。这使得绑定个人域名成为可能。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/03/31_21_46_9_github_page_domain.png" alt=""></p>
<h4 id="三、绑定个人域名"><a href="#三、绑定个人域名" class="headerlink" title="三、绑定个人域名"></a>三、绑定个人域名</h4><h5 id="3-1-申请个人域名"><a href="#3-1-申请个人域名" class="headerlink" title="3.1 申请个人域名"></a>3.1 申请个人域名</h5><p>域名注册平台有<a href="https://wanwang.aliyun.com/?spm=5176.19720258.J_8058803260.31.69832c4a5H4h10" target="_blank" rel="noopener">阿里云</a>、<a href="https://www.godaddy.com/zh-sg/domains/domain-name-search" target="_blank" rel="noopener">GoDaddy</a> 等。我在阿里云平台注册的，叫 <a href="https://www.takeshell.com" target="_blank" rel="noopener">takeshell.com</a>。每年只需要几十块钱，还能玩得起。</p>
<h5 id="3-2-GitHub-Pages-域名替换"><a href="#3-2-GitHub-Pages-域名替换" class="headerlink" title="3.2 GitHub Pages 域名替换"></a>3.2 <code>GitHub Pages</code> 域名替换</h5><p><code>GitHub Pages</code> 默认是部署在 <code>https://username.github.io/</code> 上的，我们有两种方法将域名替换为 <code>takeshell.com</code>。</p>
<p><strong>方法一：</strong>在项目目录上手动添加 <code>CNAME</code> 文件（没有后缀名），文本内容为 <code>takeshell.com</code>。提交之后，可以看到 <code>Custome domain</code> 已自动回填新的域名。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/03/31_21_48_22_add_cname_file.png" alt=""></p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/03/31_21_49_32_edit_cname_file.png" alt=""></p>
<p><strong>方法二：</strong>直接操作 <code>Custom domain</code> 配置项，填写个人域名，并保存。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/03/31_21_52_31_custom_domain.png" alt=""></p>
<h5 id="3-3-DNS-配置"><a href="#3-3-DNS-配置" class="headerlink" title="3.3 DNS 配置"></a>3.3 <code>DNS</code> 配置</h5><p>替换为个人域名后， <code>GitHub</code> 的域名健康检测是不通过的，这是因为我们没有为个人域名配置 <code>DNS</code>。</p>
<p>主要有两种域名绑定方案：</p>
<ul>
<li>A: 全称为<code>Address</code>，<code>DNS</code> 将个人域名解析到指定 <code>IP</code> ；</li>
<li>CNAME: 全称为 <code>Canonical Name</code>，<code>DNS</code> 将域名指向为另外一个域名；</li>
</ul>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/03/31_21_52_59_dns_map.png" alt=""></p>
<p><strong><code>Address</code> 记录类型：</strong></p>
<p>首先，通过 <code>ping username.github.io</code> 获取 <code>IP</code>，如 185.199.111.153。然后在阿里云平台，选择域名解析-&gt;解析设置-&gt;添加记录。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/03/31_18_17_13_add_dns_a.png" alt=""></p>
<p>这里的主机记录是 <code>www</code>，需要再添加一个 <code>@</code> 的配置，这样， <code>https://www.takeshell.com</code> 和 <code>https://takeshell.com</code> 都可以访问博客。最后启用 <code>DNS</code> ，就可以用 <code>takeshell.com</code> 访问博客了。这里的 <code>TTL(Time To Live)</code>，是 <code>DNS</code> 的缓存时间，默认10 <code>min</code> 就好了。 </p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/03/31_18_17_59_add_dns_a_final.png" alt=""></p>
<p><strong><code>CNAME</code> 记录类型：</strong></p>
<p>个人域名，除了可以直接映射到指定 <code>IP</code>  上，还可以映射到 <code>username.github.io</code> 上。相当于开启一个域名分身，虽然来路不同，但目的地是一致的。这样的映射机制也叫域名别名。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/03/31_21_59_27_add_dns_cname.png" alt=""></p>
<p>同样地，再申请一个主机记录为 <code>@</code> 的配置。开启 <code>DNS</code> 后，也可以用 <code>takeshell.com</code> 正常访问博客。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/03/31_22_0_0_add_dns_cname_final.png" alt=""></p>
<h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><p>拥有个人域名是件令人兴奋的事情。首先，个人域名要足够简单，能让别人一眼记住。其次，个人域名要突出个人风格，<code>geek</code> 精神还是日常生活，通过域名必须能看出来。最后，也是最重要的，就是我们看中的域名，不能名花有主了。</p>
<p>个人博客是一个展示自己的舞台，但这个舞台不能深藏于巷，否则就是自导自演。如今，终于绑上了个人域名，希望这个广告牌可以吸引更多的目光。当然，前提是要有好的表演。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>DataX 兼容携程 Dal 数据库访问框架</title>
    <url>/2021/11/09/datax_fixed_with_ctrip_dal/</url>
    <content><![CDATA[<hr>
<h4 id="一、-携程-Dal-开源框架"><a href="#一、-携程-Dal-开源框架" class="headerlink" title="一、 携程 Dal 开源框架"></a>一、 携程 <code>Dal</code> 开源框架</h4><p><code>Dal</code> 是携程开源的数据库访问框架，为大规模的 <code>DB</code> 管理和使用提供一套优质的解决方案。</p>
<p>首先在 <code>DB</code> 管理方面，<code>Dal</code> 统一集成了主流程的数据访问：支持 <code>Java</code> 和 <code>C#</code> 客户端；支持 <code>MySQL</code> 、<code>SQLServer</code> 数据库；支持 <code>ORM</code> 和非 <code>ORM</code> 方式的数据访问；使用了 <code>Emit</code> 映射技术，提供高性能 <code>ORM</code>；多数据源访问和主从分离（读写分离）；日志、监控集成。</p>
<p>其次在 <code>DB</code> 使用方面， <code>Dal</code> 支持代码生成。通过 <code>Dal</code> 平台，可一键生成 <code>Entity</code>、<code>Dao</code>、<code>Unit Test</code>。这不仅可以让开发者脱离 <code>DB</code> 编程、提升开发效率，还可以统一面向 <code>DB</code> 的代码风格和代码质量。</p>
<h4 id="二、-DataX-与-Dal-的兼容"><a href="#二、-DataX-与-Dal-的兼容" class="headerlink" title="二、 DataX 与 Dal 的兼容"></a>二、 <code>DataX</code> 与 <code>Dal</code> 的兼容</h4><p><code>Dal</code> 的主要特点是统一收口和集中管理，在 <code>DB</code> 连接方面，客户端无需配置 <code>DB</code> 的用户名和密码，只需要配置 <code>Dal</code> 提供的 <code>TitanKey</code> 或 <code>ClusterName</code> 即可。简单来说，<code>TitanKey</code> 或 <code>ClusterName</code> 就是 <code>Dal</code> 生成的，供客户端的访问 <code>DB</code> 的钥匙。也正因此，<code>DataX</code> 在 <code>Dal</code> 架构的系统上就不起作用了。需要解决两个问题：<code>DataX</code> 如何配置 <code>TitanKey</code> 或 <code>ClusterName</code>；<code>DataX</code> 如何通过 <code>Dal</code> 获取数据源。</p>
<h4 id="三、-Datax-配置-TitanKey-或-ClusterName"><a href="#三、-Datax-配置-TitanKey-或-ClusterName" class="headerlink" title="三、 Datax 配置 TitanKey 或 ClusterName"></a>三、 <code>Datax</code> 配置 <code>TitanKey</code> 或 <code>ClusterName</code></h4><p>这是 <code>mysqlwriter</code> 的配置信息模板:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"mysqlwriter"</span>,</span><br><span class="line">    <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"password"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"writeMode"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"column"</span>: [],</span><br><span class="line">        <span class="attr">"session"</span>: [],</span><br><span class="line">        <span class="attr">"preSql"</span>: [],</span><br><span class="line">        <span class="attr">"connection"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"jdbcUrl"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"table"</span>: []</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Dal</code> 不关心 <code>username</code> 和 <code>password</code>，不妨将 <code>TitanKey</code> 或 <code>ClusterName</code>放在 <code>jdbcurl</code>处。</p>
<h4 id="四、DataX-获取-Dal-数据源"><a href="#四、DataX-获取-Dal-数据源" class="headerlink" title="四、DataX 获取 Dal 数据源"></a>四、<code>DataX</code> 获取 <code>Dal</code> 数据源</h4><p><code>DataX</code> 通过如下方式获取数据连接：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Connection <span class="title">connect</span><span class="params">(DataBaseType dataBaseType, String url, Properties prop)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(dataBaseType.getDriverClassName());</span><br><span class="line">        DriverManager.setLoginTimeout(Constant.TIMEOUT_SECONDS);</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, prop);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> RdbmsException.asConnException(dataBaseType, e, prop.getProperty(<span class="string">"user"</span>), <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Dal</code> 通过如下方式获取数据连接：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> com.ctrip.datasource.configure.DalDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DBUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DalDataSourceFactory dsFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DalDataSourceFactory <span class="title">getCtripDalDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DalDataSourceFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 titanKey 获取数据连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnectionByTitanKey</span><span class="params">(<span class="keyword">final</span> String titanKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DataSource dataSource = dsFactory.createDataSource(titanKey);</span><br><span class="line">            <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> DataXException</span><br><span class="line">                .asDataXException(DBUtilErrorCode.CONN_DB_ERROR,</span><br><span class="line">                                  String.format(<span class="string">"数据库连接失败. 因为根据您配置的连接信息:%s获取数据库连接失败. 请检查您的配置并作出修改."</span>, titanKey), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 clusterName 获取数据连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnectionByClusterName</span><span class="params">(<span class="keyword">final</span> String clusterName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DataSource ds = dsFactory.getOrCreateDataSource(clusterName);</span><br><span class="line">            <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> DataXException</span><br><span class="line">                .asDataXException(DBUtilErrorCode.CONN_DB_ERROR,</span><br><span class="line">                                  String.format(<span class="string">"数据库连接失败. 因为根据您配置的连接信息:%s获取数据库连接失败. 请检查您的配置并作出修改."</span>, clusterName), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>综上：借助 <code>DataSource</code> 工厂，就可以用 <code>Dal</code> 数据连接替换掉 <code>DataX</code> 的数据连接。</p>
<h4 id="五、DataX-兼容-Dal-优化"><a href="#五、DataX-兼容-Dal-优化" class="headerlink" title="五、DataX 兼容 Dal 优化"></a>五、<code>DataX</code> 兼容 <code>Dal</code> 优化</h4><p>从以上实现可以看出，获取 <code>Dal</code> 数据连接主要有两步：生成数据源和建立数据连接，并且每次数据同步都要重复一遍。既然 <code>Dal</code> 已经提供了 <code>DataSource</code> 工厂，是否可以考虑将数据源缓存下来呢？</p>
<p>所以，有一套更好的兼容方案：在工具启动过程中，加载数据源并缓存下来， <code>dbName</code> 作为查找数据源的 <code>key</code>。</p>
<p><code>DataSourceConfiguration.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.datax.plugin.rdbms.util.DBUtil;</span><br><span class="line"><span class="keyword">import</span> com.ctrip.datasource.configure.DalDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Throwables;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zourongsheng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DalDataSourceFactory dsFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DalDataSourceFactory <span class="title">getCtripDalDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DalDataSourceFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLUSTER_CONN_TYPE_FLAG = <span class="string">"cluster"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * titan key 连接信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TITAN_KEY_TEST_DB = <span class="string">"test_titan_db"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cluster name 连接信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLUSTER_NAME_TEST_DB = <span class="string">"test_cluster_db"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 titan key 加载数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fillDataSourceFromTitanKey</span><span class="params">(String titanKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">            Assert.hasText(titanKey,</span><br><span class="line">                           <span class="string">"connect to db failed; titan key cannot be null or empty"</span>);</span><br><span class="line"></span><br><span class="line">            DataSource dataSource = dsFactory.createDataSource(titanKey);</span><br><span class="line">            <span class="comment">// 缓存数据源</span></span><br><span class="line">            DBUtil.setDataSourceIfAbsent(titanKey, dataSource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> Throwables.propagate(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 cluster name 加载单库数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fillDataSourceFromClusterName</span><span class="params">(String clusterName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Assert.hasText(clusterName,</span><br><span class="line">                           <span class="string">"connect to db failed; dal cluster cannot be null or empty"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断是否为 clusterName 格式</span></span><br><span class="line">            Assert.isTrue(clusterName.contains(CLUSTER_CONN_TYPE_FLAG),</span><br><span class="line">                          String.format(<span class="string">"%s is not in a cluster format"</span>, clusterName));</span><br><span class="line"></span><br><span class="line">            DataSource dataSource = dsFactory.getOrCreateDataSource(clusterName);</span><br><span class="line">            <span class="comment">// 缓存数据源</span></span><br><span class="line">            DBUtil.setDataSourceIfAbsent(clusterName, dataSource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> Throwables.propagate(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 titan key 加载数据源</span></span><br><span class="line">        fillDataSourceFromTitanKey(TITAN_KEY_TEST_DB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 cluster name 加载数据源</span></span><br><span class="line">        fillDataSourceFromClusterName(CLUSTER_NAME_TEST_DB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>DBUtil.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.datax.common.exception.DataXException;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DBUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(DBUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, DataSource&gt; DS_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从外部将数据源放到Engine里</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dsName 数据源名称(后续根据名称取出数据源)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ds     数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSourceIfAbsent</span><span class="params">(String dsName, DataSource ds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DS_MAP.containsKey(dsName)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (DS_MAP) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dsMap.containsKey(dsName)) &#123;</span><br><span class="line">                DS_MAP.put(dsName, ds);</span><br><span class="line">                LOG.info(<span class="string">"setDataSourceIfAbsent将数据源&#123;&#125;放入Engine"</span>, dsName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dsName 数据源名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">(String dsName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理 jdbc 格式的数据源名称</span></span><br><span class="line">        <span class="keyword">if</span> (dsName.contains(<span class="string">"?"</span>)) &#123;</span><br><span class="line">            dsName = dsName.substring(<span class="number">0</span>, dsName.indexOf(<span class="string">"?"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> DS_MAP.get(dsName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过数据源名称获取数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dsName 数据源名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String dsName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取数据源</span></span><br><span class="line">            DataSource dataSource = getDataSource(dsName);</span><br><span class="line">            </span><br><span class="line">            Assert.notNull(dataSource, String.format(<span class="string">"获取数据源%s失败"</span>, dsName));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> DataXException</span><br><span class="line">                .asDataXException(DBUtilErrorCode.CONN_DB_ERROR,</span><br><span class="line">                                  String.format(<span class="string">"数据库连接失败. 因为根据您配置的连接信息:%s获取数据库连接失败. 请检查您的配置并作出修改."</span>, dsName), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据同步</tag>
      </tags>
  </entry>
  <entry>
    <title>用 PicGo + Gitee 搭建个人图床</title>
    <url>/2021/04/23/build_personal_img_bed/</url>
    <content><![CDATA[<hr>
<h5 id="1、拥有个人图床的必要性"><a href="#1、拥有个人图床的必要性" class="headerlink" title="1、拥有个人图床的必要性"></a>1、拥有个人图床的必要性</h5><p>图床是存储图片的服务器，可以生成外链供在线加载，被广泛用于网站建设。目前市面上主流的图床有 <a href="https://imgurl.org/" target="_blank" rel="noopener"><code>ImgURL</code></a>、<a href="https://sm.ms/" target="_blank" rel="noopener"><code>SM.MS</code></a>、<a href="https://weibo.com/" target="_blank" rel="noopener">新浪微博</a>、<a href="https://imgtu.com/" target="_blank" rel="noopener">路过图床</a>、<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>等，主要有两个特点：免费图床广告多、不稳定；收费图床不适合打工人。作为搞技术的人，我们拥有开源精神的同时，也要利用好开源技术。<a href="https://github.com/" target="_blank" rel="noopener"><code>GitHub</code></a>、<a href="https://gitlab.com/" target="_blank" rel="noopener"><code>GitLab</code></a>、<a href="https://gitee.com/" target="_blank" rel="noopener"><code>Gitee</code></a> 就是最干净的、最稳定的图床。由于<code>GitHub</code>、<code>GitLab</code> 在国内的访问速度远不如 <code>Gitee</code>，所以我们选择搭建 <code>Gitee</code> 图床。 </p>
<h5 id="2、图床工具-PicGo"><a href="#2、图床工具-PicGo" class="headerlink" title="2、图床工具-PicGo"></a>2、图床工具-<code>PicGo</code></h5><p>即使有了 <code>Gitee</code> 图床，我们仍然需要借助 <code>Git</code> 将图片 <code>Push</code> 到远端，然后再到仓库中 <code>Copy</code> 在线图片的加载地址。跟那些主流图床比起来，这样做只会显得更加傻蛋。为此，我们要借助一款优秀的图床工具 <code>PicGo</code>。</p>
<blockquote>
<p><code>PicGo</code>: 一个用于快速上传图片并获取图片 URL 链接的工具</p>
</blockquote>
<p>简单地说，<code>PicGo</code> 可以主动 <code>Push</code> 图片到远端，并主动获取远端图片的外链，不用我们操心。</p>
<h5 id="3、搭建基于-Gitee-的图床"><a href="#3、搭建基于-Gitee-的图床" class="headerlink" title="3、搭建基于 Gitee 的图床"></a>3、搭建基于 <code>Gitee</code> 的图床</h5><h6 id="3-1-创建-Gitee-图床仓库"><a href="#3-1-创建-Gitee-图床仓库" class="headerlink" title="3.1 创建 Gitee 图床仓库"></a>3.1 创建 <code>Gitee</code> 图床仓库</h6><p>创建图床仓库，需要注意两点：仓库需要开源，否则别人没有权限查看你的图片；分支只需要初始化 <code>master</code> ，图床操作都在这个分支上。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_12_34_%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93%E5%85%A5%E5%8F%A3.png" alt=""></p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_13_20_PicGo%E4%B8%8B%E8%BD%BD%E6%8C%87%E5%AF%BC.png" alt=""></p>
<h6 id="3-2-安装配置-PicGo"><a href="#3-2-安装配置-PicGo" class="headerlink" title="3.2 安装配置 PicGo"></a>3.2 安装配置 <code>PicGo</code></h6><p>下载安装包：<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0" target="_blank" rel="noopener">version: 2.3.0</a>；</p>
<p><code>windows</code>平台请选择：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_13_51_%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE.png" alt=""></p>
<p>运行软件，可以看到【图床设置】一栏是没有 <code>Gitee</code> 的，这需要额外安装插件。操作【插件设置】，输入 <code>gitee</code> 查询相关插件，选择安装 <code>gitee 2.0.5</code>。</p>
<blockquote>
<p>插件安装基于 <code>npm</code>，需要先安装 <code>Nodejs</code></p>
</blockquote>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_14_29_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211226223238.png" alt=""></p>
<p>插件安装成功后重启软件，打开【图床设置】，选择【<code>Gitee</code>图床】，各项配置如下：</p>
<p><code>owner</code>:  <code>Gitee</code>用户名 (<code>donehub</code>)；</p>
<p><code>repo</code>: <code>Gitee</code> 图片仓库名 (<code>img-bed</code>)；</p>
<p><code>path</code>: 图片存放的目录，可以不填写；</p>
<p><code>token</code>: <code>Gitee</code> 上生成的私有令牌，用于授权 <code>PicGo</code> 操作 <code>Gitee</code> 图床；</p>
<p><code>message</code>: 用默认证即可；</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_14_57_%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE.png" alt=""></p>
<p>具体配置方法：</p>
<p><code>owner</code> 、<code>repo</code> 容易写错，建议直接到 <code>Gitee</code> 上 <code>Copy</code>：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_15_41_owner-repo.png" alt=""></p>
<p><code>Gitee</code> 生成私有令牌：</p>
<p>步骤：个人主页-》个人设置-》安全设置-》私有令牌-》配置权限-》提交；</p>
<p>注意：私有令牌只会展示一次，建议复制下来长久保存；</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_16_21_%E7%94%9F%E6%88%90%E7%A7%81%E6%9C%89%E4%BB%A4%E7%89%8C%E7%AC%AC%E4%B8%80%E6%AD%A5.png" alt=""></p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_17_35_%E7%94%9F%E6%88%90%E7%A7%81%E6%9C%89%E4%BB%A4%E7%89%8C%E7%AC%AC%E4%BA%8C%E6%AD%A5.png" alt=""></p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_18_34_%E7%94%9F%E6%88%90%E7%A7%81%E6%9C%89%E4%BB%A4%E7%89%8C-%E7%AC%AC%E4%B8%89%E6%AD%A5.png" alt=""></p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_19_1_%E7%94%9F%E6%88%90%E7%A7%81%E6%9C%89%E4%BB%A4%E7%89%8C%E7%AC%AC%E5%9B%9B%E6%AD%A5.png" alt=""></p>
<h6 id="3-3-上传图片"><a href="#3-3-上传图片" class="headerlink" title="3.3 上传图片"></a>3.3 上传图片</h6><p>打开【上传区】，可以看到 <code>PicGo</code> 支持四种图片上传方式：拖拽上传、选择上传、剪切上传、<code>URL</code> 上传。返回的在线图片链接格式有 <code>Markdown</code>、<code>HTML</code> 等。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_19_36_%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87.png" alt=""></p>
<p>我们选择一张图片上传，上传成功后，打开【相册】。在相册里，不仅可以看到已上传的所有图片，还可以拷贝、修改在线图片链接。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_20_1_%E7%9B%B8%E5%86%8C.png" alt=""></p>
<h5 id="4-Typora-内嵌-PicGo"><a href="#4-Typora-内嵌-PicGo" class="headerlink" title="4. Typora 内嵌 PicGo"></a>4. <code>Typora</code> 内嵌 <code>PicGo</code></h5><p>虽然 <code>PicGo</code>  + <code>Gitee</code> 已经非常好用了，但我们依然需要手动上传图片并拷贝外链。既然图床是服务于内容，那么是否可以内嵌 <code>PicGo</code> 到编辑器内部呢？</p>
<p> <code>Typora</code> 是一款主流的 <code>Markdown</code> 编辑器， <code>0.9.98</code> 及以上版本可以内嵌 <code>PicGo</code> 工具。配置完成之后，只需要将图片拖入页面，即可自动上传图床并插入外链。</p>
<p>配置方法：文件-》偏好设置-》图像-》插入图片时选择上传图片-》上传服务设定</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_20_48_typora-picgo.png" alt=""></p>
<p>打开 <code>Test.md</code>，将图片拖入页面，可以看到短暂的 <code>loading</code> 提示，然后上传成功并替换图片外链。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_21_27_typora-upload-img.png" alt=""></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>MsOffice Word 文档格式-docx 研究</title>
    <url>/2021/07/11/difference_btw_doc_docx/</url>
    <content><![CDATA[<hr>
<h5 id="一、doc-与-docx-简介"><a href="#一、doc-与-docx-简介" class="headerlink" title="一、doc 与 docx 简介"></a>一、<code>doc</code> 与 <code>docx</code> 简介</h5><p><code>doc</code> 全程为 <code>document</code>，是常见的文件扩展名，也是 <code>Word2003</code> 及之前版本的文本文档格式，其基于二进制形式存储；<code>docx</code> 是 <code>Word2007</code> 及之后版本的文本文档格式，其基于 <code>Office Open XML</code> 标准的压缩文件格式。</p>
<h5 id="二、docx-与-doc-的区别"><a href="#二、docx-与-doc-的区别" class="headerlink" title="二、docx 与 doc 的区别"></a>二、<code>docx</code> 与 <code>doc</code> 的区别</h5><p>既然 <code>docx</code> 基于 <code>ooxml</code> 的格式，那么本质上就是一个 <code>zip</code> 文件。以下是内容相同的文档，分别以 <code>doc</code> 和 <code>docx</code> 格式保存之后所占空间大小，可以看出 <code>docx</code> 文件明显比 <code>doc</code> 要小很多。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_0_30_compare_doc_docx_size.png" alt=""></p>
<hr>
<p>为了进一步了解 <code>ooxml</code> 结构，我们以一个含有页眉页脚、文本、图片的 <code>docx</code> 文件为例。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_20_4_13_export_word.png" alt=""></p>
<p>手动修改文件后缀为 <code>.zip</code> 后保存，然后解压得到文件结构：</p>
<ul>
<li><code>rels</code><ul>
<li><code>.rels</code>： 指定主要信息、扩展信息、文档内容的引用 <code>ID</code></li>
</ul>
</li>
<li><code>docProps</code><ul>
<li><code>app.xml</code>: 扩展信息，包括字数、行数、段落数、页数等</li>
<li><code>core.xml</code>：主要信息，包括创建人、修改人、创建时间、修改时间等</li>
</ul>
</li>
<li><code>word</code>：文档信息<ul>
<li><code>_rels</code>：文档引用信息<ul>
<li><code>document.xml.rels</code>：指定文档中的页眉页脚、主题样式、图片音视频等的引用 <code>ID</code></li>
</ul>
</li>
<li><code>media</code>：存放文档中使用的图片、音频、视频等媒体文件<ul>
<li><code>image1.jpg</code>：文档中引用的图片</li>
</ul>
</li>
<li><code>theme</code>：文档主题信息<ul>
<li><code>theme1.xml</code></li>
</ul>
</li>
<li><code>document.xml</code>：文档内容</li>
<li><code>endnotes.xml</code></li>
<li><code>fontTable.xml</code></li>
<li><code>footer1.xml</code>：页脚信息</li>
<li><code>footnotes.xml</code></li>
<li><code>header1.xml</code>：页眉信息</li>
<li><code>settings.xml</code>：文档配置信息</li>
<li><code>styles.xml</code>：文档样式信息</li>
<li><code>webSettings.xml</code>：网页样式配置信息</li>
</ul>
</li>
<li><code>[Content_Types].xml</code>： 指定文件配置，包括图片类型、页眉页脚、主题样式、文档内容等</li>
</ul>
<p><code>docx</code> 的 <code>ooxml</code> 存储模式，将文档按照功能区划分为：配置信息、主题样式信息、页眉页脚信息、引用定义信息、媒体文件信息、文档内容信息等模块。这样便可将对应的信息抽离出来，存放在 <code>xml</code> 文件中。一方面，清晰的文档底层结构，方便查看内容细节，也方便进行二次开发；另一方面，文档信息分模块保存，好比把鸡蛋放在多个篮子里，可以增加容错性，使得文档修复更加方便。</p>
<hr>
<p>综上，与 <code>doc</code> 相比，<code>docx</code> 主要有以下特点：</p>
<ul>
<li>压缩率高，存储相同内容所占空间更小；</li>
<li>将文档信息拆分保存，方便查看或二次开发；</li>
<li>多个 <code>xml</code> 文件打包，易于跨平台使用；</li>
<li>增加文档容错性，方便修复损坏文档。</li>
</ul>
<blockquote>
<p>参考：</p>
<ul>
<li><a href="https://baike.baidu.com/item/doc/364715?fr=aladdin" target="_blank" rel="noopener">什么是 doc</a></li>
<li><a href="https://baike.baidu.com/item/docx/6517348?fr=aladdin" target="_blank" rel="noopener">什么是 docx</a></li>
<li><a href="https://www.zhihu.com/question/21547795" target="_blank" rel="noopener">docx 比 doc 好在哪里</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>MSOffice</category>
      </categories>
      <tags>
        <tag>Word</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Prometheus 监控线程池</title>
    <url>/2020/08/17/metrics_in_thread_pool/</url>
    <content><![CDATA[<h4 id="一、应用背景"><a href="#一、应用背景" class="headerlink" title="一、应用背景"></a>一、应用背景</h4><p>在支付系统中，线程池在批量支付中有着十分重要的作用。随着业务量的增多，支付接口的处理能力越来越弱，甚至出现一个支付批次的处理时间超过5分钟的情况。这对于调用方来说，是无法容忍的。最简单粗暴的解决办法，便是增加线程数和阻塞队列容量。但至于怎么调整，才能做到既保证接口对支付请求的处理能力，又不浪费系统资源，好像只能凭感觉来了。<code>Prometheus</code> + <code>Grafana</code> 是目前比较流行的监控体系，在管理线程池方面的表现也十分出色。</p>
<h4 id="二、线程池配置"><a href="#二、线程池配置" class="headerlink" title="二、线程池配置"></a>二、线程池配置</h4><p>采用 <code>Spring</code> 提供的 <code>ThreadPoolTaskExecutor</code> 来完成线程池的配置。根据业务需要，创建两个线程池：同步线程池和异步线程池。具体配置如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorPoolConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 线程池参数配置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ExecutorProperties executorProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ASYNC_EXECUTOR = <span class="string">"asyncExecutor"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYNC_EXECUTOR = <span class="string">"syncExecutor"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 同步线程池</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">    <span class="meta">@Bean</span>(SYNC_EXECUTOR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">serviceExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(executorProperties.getSync().getCorePoolSize());</span><br><span class="line">        executor.setMaxPoolSize(executorProperties.getSync().getMaxPoolSize());</span><br><span class="line">        executor.setQueueCapacity(executorProperties.getSync().getQueueCapacity());</span><br><span class="line">        executor.setKeepAliveSeconds((<span class="keyword">int</span>)executorProperties.getSync()</span><br><span class="line">                                     .getKeepAlive().getSeconds());</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"executor-sync-service-"</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">        executor.setAwaitTerminationSeconds(executorProperties.getSync()</span><br><span class="line">                                            .getAwaitTerminationSeconds());</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Async</span> 注解默认走该线程池</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异步处理线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">    <span class="meta">@Bean</span>(ASYNC_EXECUTOR)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">taskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(executorProperties.getAsync().getCorePoolSize());</span><br><span class="line">        executor.setMaxPoolSize(executorProperties.getAsync().getMaxPoolSize());</span><br><span class="line">        executor.setQueueCapacity(executorProperties.getAsync().getQueueCapacity());</span><br><span class="line">        executor.setKeepAliveSeconds((<span class="keyword">int</span>)executorProperties.getAsync()</span><br><span class="line">                                     .getKeepAlive().getSeconds());</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"common-async-executor-"</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">        executor.setAwaitTerminationSeconds(executorProperties.getAsync()</span><br><span class="line">                                            .getAwaitTerminationSeconds());</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="三、监控指标"><a href="#三、监控指标" class="headerlink" title="三、监控指标"></a>三、监控指标</h4><p>综合线程池的核心要素和生产业务的关键要素，提出以下几种监控指标:</p>
<ul>
<li><p>核心线程数;</p>
</li>
<li><p>最大线程数；</p>
</li>
<li><p>活跃线程数；</p>
</li>
<li><p>当前线程数；</p>
</li>
<li><p>队列中任务数；</p>
</li>
<li><p>已完成任务数； </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.Gauge;</span><br><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.MeterRegistry;</span><br><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.Metrics;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorMetricsSupport</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Prometheus 数据采集中心</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MeterRegistry meterRegistry;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(SYNC_EXECUTOR)</span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskExecutor syncExecutor;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(ASYNC_EXECUTOR)</span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskExecutor asyncExecutor;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        initServiceExecutorMetrics(syncExecutor, <span class="string">"executor.sync"</span>);</span><br><span class="line">        initServiceExecutorMetrics(asyncExecutor, <span class="string">"executor.async"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池metrics指标监控</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceExecutor 线程池</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> namePrefix 指标名称前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initServiceExecutorMetrics</span><span class="params">(ThreadPoolTaskExecutor serviceExecutor, String namePrefix)</span> </span>&#123;</span><br><span class="line">        Gauge</span><br><span class="line">            .builder(namePrefix.concat(<span class="string">".active"</span>),</span><br><span class="line">                     serviceExecutor, ThreadPoolTaskExecutor::getActiveCount)</span><br><span class="line">            .register(meterRegistry);</span><br><span class="line">        </span><br><span class="line">        Gauge</span><br><span class="line">            .builder(namePrefix.concat(<span class="string">".core"</span>),</span><br><span class="line">                     serviceExecutor, ThreadPoolTaskExecutor::getCorePoolSize)</span><br><span class="line">            .register(meterRegistry);</span><br><span class="line">        </span><br><span class="line">        Gauge</span><br><span class="line">            .builder(namePrefix.concat(<span class="string">".max"</span>),</span><br><span class="line">                      serviceExecutor, ThreadPoolTaskExecutor::getMaxPoolSize)</span><br><span class="line">            .register(meterRegistry);</span><br><span class="line">        </span><br><span class="line">        Gauge</span><br><span class="line">            .builder(namePrefix.concat(<span class="string">".pool"</span>),</span><br><span class="line">                     serviceExecutor, ThreadPoolTaskExecutor::getPoolSize)</span><br><span class="line">            .register(meterRegistry);</span><br><span class="line">        </span><br><span class="line">        Gauge</span><br><span class="line">            .builder(namePrefix.concat(<span class="string">".queue"</span>), serviceExecutor,</span><br><span class="line">                     executor -&gt; executor.getThreadPoolExecutor().getQueue().size())</span><br><span class="line">            .register(meterRegistry);</span><br><span class="line">        </span><br><span class="line">        Gauge</span><br><span class="line">            .builder(namePrefix.concat(<span class="string">".completetask"</span>), serviceExecutor,</span><br><span class="line">                     executor -&gt; executor.getThreadPoolExecutor().getCompletedTaskCount())</span><br><span class="line">            .register(meterRegistry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="四、指标分析"><a href="#四、指标分析" class="headerlink" title="四、指标分析"></a>四、指标分析</h4><p>通过 <code>PSQL</code> 将以上各项指标展示在 <code>Grafana</code> 中。 <code>Prometheus</code> 默认 <code>15s</code> 拉取一次数据，对于线程池这种波定性较大的指标，建议将拉取时间调整至 <code>10s</code>，以便灵活且准确地反应线程池的运行情况。</p>
<ul>
<li>异步线程池</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/08/24/dDNE9g.png" alt="dDNE9g.png"></p>
<ul>
<li>同步线程池</li>
</ul>
<p><a href="https://imgchr.com/i/dDN6vd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/24/dDN6vd.png" alt="dDN6vd.png"></a></p>
<p>由监控结果可以作出以下分析：</p>
<ul>
<li>异步线程池的负担非常小，目前还没出现过队列积压的情况，可以适当减少核心线程和最大线程数；</li>
<li>同步线程池配置较为妥当，峰值期间未启用非核心线程，队列积压任务量在合理区间，请求处理效率非常高。</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>用 freemarker 导出复杂的 word 文档</title>
    <url>/2021/07/12/export_word_by_freemark_1/</url>
    <content><![CDATA[<hr>
<h5 id="一、学习背景"><a href="#一、学习背景" class="headerlink" title="一、学习背景"></a>一、学习背景</h5><p><code>Freemarker</code> 是一款强大的模板引擎，可以用来生成网页、邮件、文档等。对于简单的 <code>Word</code> 文档导出，只需要手动编写 <code>ftl</code> 文件即可。但如果要导出复杂的文档，比如带有复杂样式、页眉页脚、内嵌图片、批注等，手动编写模板就行不通了。现在提出一个从目标文档出发的解决方案：先将目标 <code>Word</code> 模板文档转换为 <code>xml</code> 文档，然后将 <code>xml</code> 文档转换为 <code>ftl</code> 文档，手动替换模板中的变量之后即可导出复杂 <code>Word</code> 。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_50_50_export_word_freemarker_flow.png" alt=""></p>
<h5 id="二、根据目标文档获取-ftl-文档"><a href="#二、根据目标文档获取-ftl-文档" class="headerlink" title="二、根据目标文档获取 ftl 文档"></a>二、根据目标文档获取 <code>ftl</code> 文档</h5><p>我们以导出房屋租赁合同文档为例，模板中有房东、租客信息、房屋信息等。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_51_57_contract_template.png" alt=""></p>
<h6 id="1-将目标模板转换为-xml-文档"><a href="#1-将目标模板转换为-xml-文档" class="headerlink" title="1. 将目标模板转换为 xml 文档"></a>1. 将目标模板转换为 <code>xml</code> 文档</h6><p>操作 <code>Word</code> 文档，点击【文件】，另存为 <code>xml</code> 文档。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_52_36_convert_to_xml.png" alt=""></p>
<p>用 <code>NotePad++</code> 或 <code>Sublime</code> 打开 <code>xml</code> 文档，内容缺乏层次感，这里需要格式化一下。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_53_50_format_xml.png" alt=""></p>
<h6 id="2-将-xml-文档转换为-ftl-文档"><a href="#2-将-xml-文档转换为-ftl-文档" class="headerlink" title="2. 将 xml 文档转换为 ftl 文档"></a>2. 将 <code>xml</code> 文档转换为 <code>ftl</code> 文档</h6><p>格式化之后的 <code>xml</code> 文档，选择【文件】，另存为 <code>ftl</code> 文档。接下来需要手动替换模板参数。</p>
<p><strong>文本参数：</strong>根据模板中的默认值，找到其所在位置，直接替换。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_54_36_replace_txt_2.png" alt=""></p>
<p><strong>图片参数：</strong>图片参数是对图片进行 <code>Base64</code> 加密之后的值，加密操作可以由 <code>Java</code> 来完成。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_55_36_replace_img_2.png" alt=""></p>
<h5 id="三、使用-Java-根据-ftl-模板导出-Word-文档"><a href="#三、使用-Java-根据-ftl-模板导出-Word-文档" class="headerlink" title="三、使用 Java 根据 ftl 模板导出 Word 文档"></a>三、使用 <code>Java</code> 根据 <code>ftl</code> 模板导出 <code>Word</code> 文档</h5><p>在 <code>Resource</code> 目录下新建文件夹 <code>freemarker_template</code>，将 <code>ftl</code> 文档粘贴进去。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_56_39_package_structure.png" alt=""></p>
<p>图片 <code>Base64</code> 位编码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.company.exception.ServiceException;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zourongsheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/07/11 22:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageServiceImpl</span> <span class="keyword">implements</span> <span class="title">ImageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ImageServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 【对图片进行 Base64 编码】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileSrc 图片的存储地址: filePath + fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图片 Base64 编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getImgBase64Data</span><span class="params">(String fileSrc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File img = <span class="keyword">new</span> File(fileSrc);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!img.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> FileInputStream(img)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">            in.read(data);</span><br><span class="line">            BASE64Encoder encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            <span class="keyword">return</span> encoder.encode(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"invoke ImageService.getImgBase64Data error: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解析模板内容实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.company.exception.ServiceException;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zourongsheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/07/11 16:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateServiceImpl</span> <span class="keyword">implements</span> <span class="title">TemplateService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TemplateServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 【组装数据模板信息】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templatePath 模板存放的根目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateName 模板名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params       模板内容参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据模板信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTemplateContent</span><span class="params">(String templatePath, String templateName, Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            LOGGER.info(<span class="string">"start building template content. path: 【&#123;&#125;】; name: 【&#123;&#125;】; params: 【&#123;&#125;】"</span>, templatePath, templateName, params);</span><br><span class="line"></span><br><span class="line">            Assert.hasText(templatePath, <span class="string">"template path cannot be null or empty"</span>);</span><br><span class="line"></span><br><span class="line">            Assert.hasText(templateName, <span class="string">"template name cannot be null or empty"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取资源目录</span></span><br><span class="line">            String resourcePath = TemplateServiceImpl<span class="class">.<span class="keyword">class</span>.<span class="title">getResource</span>(<span class="title">File</span>.<span class="title">separator</span>).<span class="title">getPath</span>()</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模板配置信息</span></span><br><span class="line">            Configuration configuration = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_28);</span><br><span class="line">            configuration.setDefaultEncoding(StandardCharsets.UTF_8.name());</span><br><span class="line">            String standardTemplatePath = templatePath.endsWith(File.separator) ? templatePath.concat(File.separator) : templatePath;</span><br><span class="line">            configuration.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(resourcePath.concat(standardTemplatePath)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成模板</span></span><br><span class="line">            Template template = configuration.getTemplate(templateName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 填充模板内容参数</span></span><br><span class="line">            StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">            template.process(params, writer);</span><br><span class="line"></span><br><span class="line">            String content = writer.toString();</span><br><span class="line"></span><br><span class="line">            LOGGER.info(<span class="string">"finish building template content."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> content;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"invoke TemplateService.getStringFromVm error: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单元测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ImageService;</span><br><span class="line"><span class="keyword">import</span> TemplateService;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zourongsheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/07/11 16:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TemplateTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TemplateTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TemplateService templateService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ImageService imageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateWordFromTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String templatePath = <span class="string">"freemarker_template/"</span>;</span><br><span class="line">        String templateName = <span class="string">"contract.ftl"</span>;</span><br><span class="line"></span><br><span class="line">        ContractInfo contractInfo = <span class="keyword">new</span> ContractInfo();</span><br><span class="line">        contractInfo.setLandlordName(<span class="string">"地头蛇"</span>);</span><br><span class="line">        contractInfo.setLandlordIdNo(<span class="string">"100011232132112"</span>);</span><br><span class="line">        contractInfo.setLandlordAddress(<span class="string">"上海市青浦区"</span>);</span><br><span class="line">        contractInfo.setLandlordPhoneNo(<span class="string">"13032389090"</span>);</span><br><span class="line">        contractInfo.setTenantName(<span class="string">"打工人"</span>);</span><br><span class="line">        contractInfo.setTenantIdNo(<span class="string">"340323199901013217"</span>);</span><br><span class="line">        contractInfo.setTenantAddress(<span class="string">"安徽省蚌埠市"</span>);</span><br><span class="line">        contractInfo.setTenantPhoneNo(<span class="string">"15656997878"</span>);</span><br><span class="line">        contractInfo.setYear(<span class="string">"2020"</span>);</span><br><span class="line">        contractInfo.setMonth(<span class="string">"01"</span>);</span><br><span class="line">        contractInfo.setDay(<span class="string">"01"</span>);</span><br><span class="line">        <span class="comment">// 图片 Base64 编码</span></span><br><span class="line">        String imgBase64Data = imageService.getImgBase64Data(<span class="string">"C:\\house.jpg"</span>);</span><br><span class="line">        contractInfo.setImgBase64Data(imgBase64Data);</span><br><span class="line"></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        Map&lt;String, Object&gt; params = objectMapper.convertValue(contractInfo, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        String content = templateService.getTemplateContent(templatePath, templateName, params);</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"租房合同-打工人.doc"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (InputStream in = IOUtils.toInputStream(content, StandardCharsets.UTF_8);</span><br><span class="line">             OutputStream out = <span class="keyword">new</span> FileOutputStream(file)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != (len = in.read(data, <span class="number">0</span>, data.length))) &#123;</span><br><span class="line">                out.write(data, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"下载租房合同失败; errMsg: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 通过这种方式导出的 <code>Word</code> 文档，本质上还是 <code>xml</code> 文档，因此必须使用 <code>.doc</code> 后缀，具体请查看<a href="https://donehub.github.io/my-blog/2021/07/11/difference_btw_doc_docx/">MsOffice Word docx 研究</a>。</p>
<p>运行起来，导出<code>租房合同-打工人.doc</code>。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_57_34_export_word.png" alt=""></p>
<h5 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h5><p>通过将目标模板转换为 <code>ftl</code> 文档，再解析得到目标文档的办法，理论上可以应对任何复杂程度的文档导出需求。但这种好办法也有弊端：<code>ftl</code> 文档包含太多的内联样式、复杂标签等，可读性太差。当模板发生变化时，手动替换太多的模板参数将会是一种灾难。</p>
<blockquote>
<p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_42142057/article/details/82495417" target="_blank" rel="noopener">Java 基于 freemarker 导出 Word 文档(含文本、表格、图片)</a></li>
<li><a href="https://blog.csdn.net/u014231523/article/details/86586721" target="_blank" rel="noopener">Java 基于 freemarker 导出 Word 文档(含文本、图片)</a></li>
<li><a href="https://www.zhihu.com/question/21547795/answer/18577889" target="_blank" rel="noopener">Docx 相对于 Doc 的优势</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>freemarker</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 批处理</title>
    <url>/2021/12/24/mysql_batch_operation/</url>
    <content><![CDATA[<hr>
<h4 id="一、MySQL-批处理介绍"><a href="#一、MySQL-批处理介绍" class="headerlink" title="一、MySQL 批处理介绍"></a>一、MySQL 批处理介绍</h4><p>执行多条增、删、改语句，<code>mysql-connector-java</code>  支持两种模式：</p>
<ul>
<li>串行化语句，一条一条发送；</li>
<li>打包语句，分批次发送；</li>
</ul>
<p>批处理模式，即按照包容量算法，将语句分批打包，发送到数据库服务器，旨在提升大批量语句的执行性能。在数据库连接参数 <code>jdbc-url</code> 后追加 <code>rewriteBatchedStatements=true</code> 即可完成配置，如：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.batch-demo.jdbc-url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/batch-demo?rewriteBatchedStatements=true</span></span><br></pre></td></tr></table></figure>

<h4 id="二、MySQL-批处理基础实现"><a href="#二、MySQL-批处理基础实现" class="headerlink" title="二、MySQL 批处理基础实现"></a>二、MySQL 批处理基础实现</h4><p>以下源码参照 <code>ClientPreparedStatement.java</code>，<code>mysql-connector-java</code> <code>8.0.28</code> 版本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">long</span>[] executeBatchInternal() <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (checkClosed().getConnectionMutex()) &#123;</span><br><span class="line">        <span class="comment">// 不能是只读连接</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.connection.isReadOnly()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(Messages.getString(<span class="string">"PreparedStatement.25"</span>) + Messages.getString(<span class="string">"PreparedStatement.26"</span>), MysqlErrorNumbers.SQL_STATE_ILLEGAL_ARGUMENT);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 批量语句大小必须大于 0</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.query.getBatchedArgs() == <span class="keyword">null</span> || <span class="keyword">this</span>.query.getBatchedArgs().size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// we timeout the entire batch, not individual statements</span></span><br><span class="line">        <span class="keyword">int</span> batchTimeout = getTimeoutInMillis();</span><br><span class="line">        setTimeoutInMillis(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        resetCancelledState();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statementBegins();</span><br><span class="line"></span><br><span class="line">            clearWarnings();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1. 没有包含原始 sql 并且支持批量重写</span></span><br><span class="line">            <span class="comment">// batchHasPlainStatements 包含原始 sql</span></span><br><span class="line">            <span class="comment">// rewriteBatchedStatements 支持批量重写</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.batchHasPlainStatements &amp;&amp; <span class="keyword">this</span>.rewriteBatchedStatements.getValue()) &#123;</span><br><span class="line">                <span class="comment">// 1.1 批量插入语句，支持多值重写</span></span><br><span class="line">                <span class="keyword">if</span> (getParseInfo().canRewriteAsMultiValueInsertAtSqlLevel()) &#123;</span><br><span class="line">                    <span class="comment">// 执行批量 insert </span></span><br><span class="line">                    <span class="keyword">return</span> executeBatchedInserts(batchTimeout);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 1.2 删、改操作, 没有包含原始 sql 并且批次语句数量大于 3</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.batchHasPlainStatements &amp;&amp; <span class="keyword">this</span>.query.getBatchedArgs() != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; <span class="keyword">this</span>.query.getBatchedArgs().size() &gt; <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="comment">// 执行批量 delete 或 update</span></span><br><span class="line">                    <span class="keyword">return</span> executePreparedBatchAsMultiStatement(batchTimeout);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 串行执行语句</span></span><br><span class="line">            <span class="keyword">return</span> executeBatchSerially(batchTimeout);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.query.getStatementExecuting().set(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            clearBatch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从源码实现可知，<code>MySQL</code> 的批处理操作，要求语句不包含原生 <code>sql</code>，且数据连接支持批量重写。因为 <code>insert</code> 语句的批量重写规则（多值拼接）与 <code>delete</code>、<code>update</code> 语句（英文分号拼接）不同 ，因此独立出 <code>insert</code> 批处理过程。</p>
<p>原生 <code>sql</code> 的简单示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PreparedStatement preparedStatement = connection.prepareStatement(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    StringBuilder sql = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sql.append(<span class="string">"INSERT INTO extenal_studentcj(grade,clazz,zkzh,NAME,scoretext,times) VALUES("</span>);</span><br><span class="line">    sql.append(<span class="string">"'"</span>).append(i).append(<span class="string">"',"</span>);</span><br><span class="line">    sql.append(<span class="string">"'"</span>).append(i).append(<span class="string">"',"</span>);</span><br><span class="line">    sql.append(<span class="string">"'"</span>).append(i).append(<span class="string">"',"</span>);</span><br><span class="line">    sql.append(<span class="string">"'"</span>).append(i).append(<span class="string">"',"</span>);</span><br><span class="line">    sql.append(<span class="string">"'"</span>).append(i).append(<span class="string">"',"</span>);</span><br><span class="line">    sql.append(<span class="string">"'"</span>).append(i).append(<span class="string">"'"</span>);</span><br><span class="line">    sql.append(<span class="string">");"</span>);</span><br><span class="line">    pst.addBatch(sql.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preparedStatement.executeBatch();</span><br></pre></td></tr></table></figure>

<h5 id="2-1-Insert-批处理"><a href="#2-1-Insert-批处理" class="headerlink" title="2.1 Insert 批处理"></a>2.1 Insert 批处理</h5><p>基础实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">long</span>[] executeBatchedInserts(<span class="keyword">int</span> batchTimeout) <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (checkClosed().getConnectionMutex()) &#123;</span><br><span class="line">        <span class="comment">// 获取语句值模板; 如 (?, ?, ?)</span></span><br><span class="line">        String valuesClause = getParseInfo().getValuesClause();</span><br><span class="line"></span><br><span class="line">        JdbcConnection locallyScopedConn = <span class="keyword">this</span>.connection;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valuesClause == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> executeBatchSerially(batchTimeout);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// insert 语句总数</span></span><br><span class="line">        <span class="keyword">int</span> numBatchedArgs = <span class="keyword">this</span>.query.getBatchedArgs().size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.retrieveGeneratedKeys) &#123;</span><br><span class="line">            <span class="keyword">this</span>.batchedGeneratedKeys = <span class="keyword">new</span> ArrayList&lt;&gt;(numBatchedArgs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算每个批次的语句数量</span></span><br><span class="line">        <span class="keyword">int</span> numValuesPerBatch = ((PreparedQuery&lt;?&gt;) <span class="keyword">this</span>.query).computeBatchSize(numBatchedArgs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (numBatchedArgs &lt; numValuesPerBatch) &#123;</span><br><span class="line">            numValuesPerBatch = numBatchedArgs;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JdbcPreparedStatement batchedStatement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> batchedParamIndex = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> updateCountRunningTotal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> numberToExecuteAsMultiValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> batchCounter = <span class="number">0</span>;</span><br><span class="line">        CancelQueryTask timeoutTask = <span class="keyword">null</span>;</span><br><span class="line">        SQLException sqlEx = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span>[] updateCounts = <span class="keyword">new</span> <span class="keyword">long</span>[numBatchedArgs];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 构建批量 insert 预编译语句</span></span><br><span class="line">                batchedStatement = prepareBatchedInsertSQL(locallyScopedConn, numValuesPerBatch);</span><br><span class="line"></span><br><span class="line">                timeoutTask = startQueryTimer(batchedStatement, batchTimeout);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 计算需要批量 insert 的次数</span></span><br><span class="line">                numberToExecuteAsMultiValue = numBatchedArgs &lt; numValuesPerBatch ? numBatchedArgs : numBatchedArgs / numValuesPerBatch;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算 batchedStatement 需要 insert 的语句总量</span></span><br><span class="line">                <span class="keyword">int</span> numberArgsToExecute = numberToExecuteAsMultiValue * numValuesPerBatch;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 循环填补 insert 值</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberArgsToExecute; i++) &#123;</span><br><span class="line">                    <span class="comment">// 填补完一个批次, 发起执行, 然后再填补下一个批次</span></span><br><span class="line">                    <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i % numValuesPerBatch == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            updateCountRunningTotal += batchedStatement.executeLargeUpdate();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                            sqlEx = handleExceptionForBatch(batchCounter - <span class="number">1</span>, numValuesPerBatch, updateCounts, ex);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        getBatchedGeneratedKeys(batchedStatement);</span><br><span class="line">                        batchedStatement.clearParameters();</span><br><span class="line">                        batchedParamIndex = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    batchedParamIndex = setOneBatchedParameterSet(batchedStatement, batchedParamIndex, <span class="keyword">this</span>.query.getBatchedArgs().get(batchCounter++));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    updateCountRunningTotal += batchedStatement.executeLargeUpdate();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    sqlEx = handleExceptionForBatch(batchCounter - <span class="number">1</span>, numValuesPerBatch, updateCounts, ex);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                getBatchedGeneratedKeys(batchedStatement);</span><br><span class="line"></span><br><span class="line">                numValuesPerBatch = numBatchedArgs - batchCounter;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (batchedStatement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    batchedStatement.close();</span><br><span class="line">                    batchedStatement = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果按照以上批次执行, 仍有未执行的语句, 则在这里统一执行</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (numValuesPerBatch &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    batchedStatement = prepareBatchedInsertSQL(locallyScopedConn, numValuesPerBatch);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (timeoutTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        timeoutTask.setQueryToCancel(batchedStatement);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    batchedParamIndex = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (batchCounter &lt; numBatchedArgs) &#123;</span><br><span class="line">                        batchedParamIndex = setOneBatchedParameterSet(batchedStatement, batchedParamIndex, <span class="keyword">this</span>.query.getBatchedArgs().get(batchCounter++));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        updateCountRunningTotal += batchedStatement.executeLargeUpdate();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                        sqlEx = handleExceptionForBatch(batchCounter - <span class="number">1</span>, numValuesPerBatch, updateCounts, ex);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    getBatchedGeneratedKeys(batchedStatement);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (sqlEx != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> SQLError.createBatchUpdateException(sqlEx, updateCounts, <span class="keyword">this</span>.exceptionInterceptor);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (numBatchedArgs &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">long</span> updCount = updateCountRunningTotal &gt; <span class="number">0</span> ? java.sql.Statement.SUCCESS_NO_INFO : <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numBatchedArgs; j++) &#123;</span><br><span class="line">                        updateCounts[j] = updCount;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    updateCounts[<span class="number">0</span>] = updateCountRunningTotal;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> updateCounts;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (batchedStatement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    batchedStatement.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            stopQueryTimer(timeoutTask, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            resetCancelledState();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从源码实现可知，<code>insert</code> 语句批处理，首先会按照一定的批次大小处理语句，剩余不够一个批次执行的，最后会交给保底任务执行。以插入10万条学生信息数据为例，具体的处理流程如下：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/4_22_34_26_mysql_batch_insert.png" alt=""></p>
<h5 id="2-2-Delete、Update-批处理"><a href="#2-2-Delete、Update-批处理" class="headerlink" title="2.2 Delete、Update 批处理"></a>2.2 Delete、Update 批处理</h5><p>基础实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">long</span>[] executePreparedBatchAsMultiStatement(<span class="keyword">int</span> batchTimeout) <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (checkClosed().getConnectionMutex()) &#123;</span><br><span class="line">        <span class="comment">// This is kind of an abuse, but it gets the job done</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.batchedValuesClause == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.batchedValuesClause = ((PreparedQuery&lt;?&gt;) <span class="keyword">this</span>.query).getOriginalSql() + <span class="string">";"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JdbcConnection locallyScopedConn = <span class="keyword">this</span>.connection;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> multiQueriesEnabled = locallyScopedConn.getPropertySet().getBooleanProperty(PropertyKey.allowMultiQueries).getValue();</span><br><span class="line">        CancelQueryTask timeoutTask = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clearWarnings();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 语句总数</span></span><br><span class="line">            <span class="keyword">int</span> numBatchedArgs = <span class="keyword">this</span>.query.getBatchedArgs().size();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.retrieveGeneratedKeys) &#123;</span><br><span class="line">                <span class="keyword">this</span>.batchedGeneratedKeys = <span class="keyword">new</span> ArrayList&lt;&gt;(numBatchedArgs);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算每个批次的语句数量</span></span><br><span class="line">            <span class="keyword">int</span> numValuesPerBatch = ((PreparedQuery&lt;?&gt;) <span class="keyword">this</span>.query).computeBatchSize(numBatchedArgs);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (numBatchedArgs &lt; numValuesPerBatch) &#123;</span><br><span class="line">                numValuesPerBatch = numBatchedArgs;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            java.sql.PreparedStatement batchedStatement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> batchedParamIndex = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> numberToExecuteAsMultiValue = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> batchCounter = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> updateCountCounter = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span>[] updateCounts = <span class="keyword">new</span> <span class="keyword">long</span>[numBatchedArgs * getParseInfo().getNumberOfQueries()];</span><br><span class="line">            SQLException sqlEx = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!multiQueriesEnabled) &#123;</span><br><span class="line">                    ((NativeSession) locallyScopedConn.getSession()).enableMultiQueries();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 构建批处理语句</span></span><br><span class="line">                batchedStatement = <span class="keyword">this</span>.retrieveGeneratedKeys</span><br><span class="line">                    ? ((Wrapper) locallyScopedConn.prepareStatement(generateMultiStatementForBatch(numValuesPerBatch), RETURN_GENERATED_KEYS)).unwrap(java.sql.PreparedStatement<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">                    : ((Wrapper) locallyScopedConn.prepareStatement(generateMultiStatementForBatch(numValuesPerBatch))).unwrap(java.sql.PreparedStatement.class);</span><br><span class="line"></span><br><span class="line">                timeoutTask = startQueryTimer((StatementImpl) batchedStatement, batchTimeout);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 计算批处理次数</span></span><br><span class="line">                numberToExecuteAsMultiValue = numBatchedArgs &lt; numValuesPerBatch ? numBatchedArgs : numBatchedArgs / numValuesPerBatch;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算 batchedStatement 需要执行的语句数量</span></span><br><span class="line">                <span class="keyword">int</span> numberArgsToExecute = numberToExecuteAsMultiValue * numValuesPerBatch;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 循环填补语句值</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberArgsToExecute; i++) &#123;</span><br><span class="line">                    <span class="comment">// 填补完一个批次, 发起执行, 然后再填补下一个批次</span></span><br><span class="line">                    <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i % numValuesPerBatch == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            batchedStatement.execute();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                            sqlEx = handleExceptionForBatch(batchCounter, numValuesPerBatch, updateCounts, ex);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        updateCountCounter = processMultiCountsAndKeys((StatementImpl) batchedStatement, updateCountCounter, updateCounts);</span><br><span class="line"></span><br><span class="line">                        batchedStatement.clearParameters();</span><br><span class="line">                        batchedParamIndex = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    batchedParamIndex = setOneBatchedParameterSet(batchedStatement, batchedParamIndex, <span class="keyword">this</span>.query.getBatchedArgs().get(batchCounter++));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    batchedStatement.execute();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    sqlEx = handleExceptionForBatch(batchCounter - <span class="number">1</span>, numValuesPerBatch, updateCounts, ex);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                updateCountCounter = processMultiCountsAndKeys((StatementImpl) batchedStatement, updateCountCounter, updateCounts);</span><br><span class="line"></span><br><span class="line">                batchedStatement.clearParameters();</span><br><span class="line"></span><br><span class="line">                numValuesPerBatch = numBatchedArgs - batchCounter;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (timeoutTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// we need to check the cancel state now because we loose if after the following batchedStatement.close()</span></span><br><span class="line">                    ((JdbcPreparedStatement) batchedStatement).checkCancelTimeout();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (batchedStatement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    batchedStatement.close();</span><br><span class="line">                    batchedStatement = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果按照以上批次执行, 仍有未执行的语句, 则在这里统一执行</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (numValuesPerBatch &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    batchedStatement = <span class="keyword">this</span>.retrieveGeneratedKeys</span><br><span class="line">                        ? locallyScopedConn.prepareStatement(generateMultiStatementForBatch(numValuesPerBatch), RETURN_GENERATED_KEYS)</span><br><span class="line">                        : locallyScopedConn.prepareStatement(generateMultiStatementForBatch(numValuesPerBatch));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (timeoutTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        timeoutTask.setQueryToCancel((Query) batchedStatement);</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    batchedParamIndex = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (batchCounter &lt; numBatchedArgs) &#123;</span><br><span class="line">                        batchedParamIndex = setOneBatchedParameterSet(batchedStatement, batchedParamIndex, <span class="keyword">this</span>.query.getBatchedArgs().get(batchCounter++));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        batchedStatement.execute();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                        sqlEx = handleExceptionForBatch(batchCounter - <span class="number">1</span>, numValuesPerBatch, updateCounts, ex);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    updateCountCounter = processMultiCountsAndKeys((StatementImpl) batchedStatement, updateCountCounter, updateCounts);</span><br><span class="line"></span><br><span class="line">                    batchedStatement.clearParameters();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (timeoutTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stopQueryTimer(timeoutTask, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">                    timeoutTask = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (sqlEx != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> SQLError.createBatchUpdateException(sqlEx, updateCounts, <span class="keyword">this</span>.exceptionInterceptor);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> updateCounts;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (batchedStatement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    batchedStatement.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            stopQueryTimer(timeoutTask, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            resetCancelledState();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!multiQueriesEnabled) &#123;</span><br><span class="line">                ((NativeSession) locallyScopedConn.getSession()).disableMultiQueries();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clearBatch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>delete</code>、<code>update</code> 语句的批处理方案，与 <code>insert</code> 类似，区别在于 <code>delete</code>、<code>update</code> 语句是用英文分号拼接起来的，而 <code>insert</code> 语句是将 <code>values</code> 拼接起来的。以更新10万条学生信息数据为例，具体的处理流程如下：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/4_23_0_12_mysql_batch_update.png" alt=""></p>
<h4 id="三、MySQL-批处理性能测试"><a href="#三、MySQL-批处理性能测试" class="headerlink" title="三、MySQL 批处理性能测试"></a>三、MySQL 批处理性能测试</h4><h5 id="3-1-批量插入-100000-条学生信息："><a href="#3-1-批量插入-100000-条学生信息：" class="headerlink" title="3.1 批量插入 100000 条学生信息："></a>3.1 批量插入 100000 条学生信息：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    String sqlTemplate = <span class="string">"INSERT INTO student_target(student_id, name, address) VALUES (?, ?, ?)"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 查询10万条数据</span></span><br><span class="line">        List&lt;Student&gt; studentList = studentMapper.queryAll();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取数据连接</span></span><br><span class="line">        connection = batchDemoDB.getConnection();</span><br><span class="line">        </span><br><span class="line">        connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(sqlTemplate);</span><br><span class="line">        <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">            preparedStatement.setLong(<span class="number">1</span>, student.getStudentId());</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, student.getName());</span><br><span class="line">            preparedStatement.setString(<span class="number">3</span>, student.getAddress());</span><br><span class="line">            preparedStatement.addBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        preparedStatement.executeBatch();</span><br><span class="line"></span><br><span class="line">        connection.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"transaction rollback failed: &#123;&#125;"</span>, e2.getMessage(), e2);</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.error(<span class="string">"batch insert student info error: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"connection close error: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOGGER.info(<span class="string">"插入100000条数据, 耗时: &#123;&#125; ms"</span>, System.currentTimeMillis() - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>rewriteBatchedStatements=false</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">插入<span class="number">100000</span>条数据, 耗时: <span class="number">18652</span> ms</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>rewriteBatchedStatements=true</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">插入<span class="number">100000</span>条数据, 耗时: <span class="number">2404</span> ms</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="3-2-批量更新-100000-条学生信息"><a href="#3-2-批量更新-100000-条学生信息" class="headerlink" title="3.2 批量更新 100000 条学生信息"></a>3.2 批量更新 100000 条学生信息</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    String sqlTemplate = <span class="string">"UPDATE student_target set address = ? WHERE student_id = ?"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 查询10万条数据</span></span><br><span class="line">        List&lt;Student&gt; studentList = studentMapper.queryAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据连接</span></span><br><span class="line">        connection = batchDemoDB.getConnection();</span><br><span class="line">        </span><br><span class="line">        connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(sqlTemplate);</span><br><span class="line">        <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, student.getName() + <span class="string">"_呵呵"</span>);</span><br><span class="line">            preparedStatement.setLong(<span class="number">2</span>, student.getStudentId());</span><br><span class="line">            preparedStatement.addBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        preparedStatement.executeBatch();</span><br><span class="line"></span><br><span class="line">        connection.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"transaction rollback failed: &#123;&#125;"</span>, e2.getMessage(), e2);</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.error(<span class="string">"batch update student info error: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"connection close error: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    LOGGER.info(<span class="string">"更新100000条数据, 耗时: &#123;&#125; ms"</span>, System.currentTimeMillis() - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>rewriteBatchedStatements=false</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">更新<span class="number">100000</span>条数据, 耗时: <span class="number">25579</span> ms</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>rewriteBatchedStatements=true</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">更新<span class="number">100000</span>条数据, 耗时: <span class="number">10122</span> ms</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="3-3-批量删除-100000-条学生信息"><a href="#3-3-批量删除-100000-条学生信息" class="headerlink" title="3.3 批量删除 100000 条学生信息"></a>3.3 批量删除 100000 条学生信息</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    String sqlTemplate = <span class="string">"DELETE FROM student_target WHERE student_id = ?"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 查询10万条数据</span></span><br><span class="line">        List&lt;Student&gt; studentList = studentMapper.queryAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据连接</span></span><br><span class="line">        connection = batchDemoDB.getConnection();</span><br><span class="line">        </span><br><span class="line">        connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(sqlTemplate);</span><br><span class="line">        <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">            preparedStatement.setLong(<span class="number">1</span>, student.getStudentId());</span><br><span class="line">            preparedStatement.addBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        preparedStatement.executeBatch();</span><br><span class="line"></span><br><span class="line">        connection.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"transaction rollback failed: &#123;&#125;"</span>, e2.getMessage(), e2);</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.error(<span class="string">"batch delete student info error: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"connection close error: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOGGER.info(<span class="string">"删除100000条数据, 耗时: &#123;&#125; ms"</span>, System.currentTimeMillis() - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>rewriteBatchedStatements=false</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">删除<span class="number">100000</span>条数据, 耗时: <span class="number">20817</span> ms</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>rewriteBatchedStatements=true</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">删除<span class="number">100000</span>条数据, 耗时: <span class="number">12053</span> ms</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 发布订阅模式</title>
    <url>/2020/07/06/redis_pubsub/</url>
    <content><![CDATA[<h4 id="一、技术背景"><a href="#一、技术背景" class="headerlink" title="一、技术背景"></a>一、技术背景</h4><p>实现发布订阅的中间件有许多，包括时下最热的<code>Kafka</code>、<code>RabbitMQ</code>、<code>ActiveMQ</code>，不太常见的<code>Guava</code>下的<code>EventBus</code>，以及<code>Redis</code>等。关于<code>MQ</code>之流的分析已经够多了，今天详细介绍下<code>Redis</code>的发布订阅机制及其实现。事实上，<code>Redis</code>的发布订阅机制在具体项目中的应用非常少，主要有两方面原因：其一，<code>Redis</code>的可靠性比较差，一旦出现断网等情况，则发布的消息便全部丢失；其二，<code>Redis</code>的消息处理方式是通过单线程循环遍历实现的，若存在大量的消息发布，则可能导致输出缓冲区膨胀，甚至服务崩溃。但对数据安全性和稳定性要求不高的场景来说，<code>Redis</code>不失为最佳的选择。</p>
<h4 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h4><p><code>Redis</code> 的发布订阅模式包括普通订阅，普通订阅取消，模式订阅，模式订阅取消这四个场景。用命令实现如下：</p>
<ul>
<li><p>启动 <code>Redis</code> 服务（以 <code>Windows</code> 平台为例）</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Tools</span>\<span class="title">Redis</span>&gt;<span class="title">redis</span>-<span class="title">server.exe</span> <span class="title">redis.windows.conf</span></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">server</span> <span class="title">is</span> <span class="title">now</span> <span class="title">ready</span> <span class="title">to</span> <span class="title">accept</span> <span class="title">connections</span> <span class="title">on</span> <span class="title">port</span> 6379</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建客户端<code>client1</code>，并以普通订阅渠道<code>channel1</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -p <span class="number">6379</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; SUBSCRIBE channel1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) "subscribe"</span><br><span class="line"><span class="number">2</span>) "channel1"</span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建客户端<code>client2</code>，并普通订阅渠道<code>channel2</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -p <span class="number">6379</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; SUBSCRIBE channel2</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) "subscribe"</span><br><span class="line"><span class="number">2</span>) "channel2"</span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建客户端<code>client3</code>，并模式订阅渠道<code>channel*</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -p <span class="number">6379</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; PSUBSCRIBE channel*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) "psubscribe"</span><br><span class="line"><span class="number">2</span>) "channel*"</span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>向渠道<code>channel2</code>发布一条消息</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -p <span class="number">6379</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; PUBLISH channel2 "msg from channel2"</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>client2</code> 、<code>client3</code> 接收到消息</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># ----------client2---------</span><br><span class="line"><span class="number">1</span>) "message"</span><br><span class="line"><span class="number">2</span>) "channel2"</span><br><span class="line"><span class="number">3</span>) "msg from channel2"</span><br><span class="line"></span><br><span class="line"># ----------client3---------</span><br><span class="line"><span class="number">1</span>) "pmessage"</span><br><span class="line"><span class="number">2</span>) "channel*"</span><br><span class="line"><span class="number">3</span>) "channel2"</span><br><span class="line"><span class="number">4</span>) "msg from channel2"</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>因此，我们可以猜测，消息发布者与消息订阅者之间是通过渠道连接的，包括精准匹配（普通订阅）和模糊匹配（模式订阅）。经过分析其结构设计，可表示为用例：</p>
<p><img src="http://www.plantuml.com/plantuml/png/SoWkIImgAStDuU8gIaqkISnBpqbLA4fDoIoEBoXDYYykJLAevk9I08ASrBGIXP9yXQBCz8mIXPHCaFBC_3omN69oINwHmjF-YKztDBzeQ4KIUx5kqSiPhK0nGso2HjW4ZI7sbHQd9YSMfog4EXig91OhA3tRiU1bu-IOlEICnBoyr9oOl8B4afBKeZmbi7A4vGgwkdOWJLPG8R0qI00iWN2F5PIDNTe8lxGnNBgMoo4rBmKOW000" alt=""></p>
<h4 id="三、原理分析"><a href="#三、原理分析" class="headerlink" title="三、原理分析"></a>三、原理分析</h4><p><code>Redis</code>发布订阅的核心实现在<code>pubsub.c</code>文件。从头文件<code>server.h</code>中可以读取相关函数声明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void subscribeCommand(client *c);      &#x2F;* 普通订阅 *&#x2F;</span><br><span class="line">void unsubscribeCommand(client *c);    &#x2F;* 普通订阅取消 *&#x2F;</span><br><span class="line">void psubscribeCommand(client *c);     &#x2F;* 模式订阅 *&#x2F;</span><br><span class="line">void punsubscribeCommand(client *c);   &#x2F;* 模式订阅取消 *&#x2F;</span><br><span class="line">void publishCommand(client *c);</span><br><span class="line">void pubsubCommand(client *c);</span><br></pre></td></tr></table></figure>

<ul>
<li>普通订阅模式：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_PUBSUB (1&lt;&lt;18)      <span class="comment">/* Client is in Pub/Sub mode. */</span></span></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Pubsub commands implementation</span></span><br><span class="line"><span class="comment"> *----------------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subscribeCommand</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">	<span class="comment">/* 分析client结构，c-&gt;argv[0]为命令本身，第2位开始为渠道参数 */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; c-&gt;argc; j++)</span><br><span class="line">        <span class="comment">/* 订阅一个渠道 */</span></span><br><span class="line">        pubsubSubscribeChannel(c,c-&gt;argv[j]);</span><br><span class="line">    <span class="comment">/* 设置客户端为发布订阅模式，此模式在processCommand中为校验值 */</span></span><br><span class="line">    c-&gt;flags |= CLIENT_PUBSUB;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 一个客户端订阅一个渠道。若返回 1，则订阅成功；若返回 0，则该客户端已订阅该渠道 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pubsubSubscribeChannel</span><span class="params">(client *c, robj *channel)</span> </span>&#123;</span><br><span class="line">    dictEntry *de;</span><br><span class="line">    <span class="built_in">list</span> *clients = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> retval = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将该渠道添加到该客户端的pubsub_channels哈希表中； key: channel，value: NULL*/</span></span><br><span class="line">    <span class="keyword">if</span> (dictAdd(c-&gt;pubsub_channels,channel,<span class="literal">NULL</span>) == DICT_OK) &#123;</span><br><span class="line">        retval = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/* 引用自增 1 */</span></span><br><span class="line">        incrRefCount(channel);</span><br><span class="line">        <span class="comment">/* 在服务端pubsub_channels中查找该channel */</span></span><br><span class="line">        de = dictFind(server.pubsub_channels,channel);</span><br><span class="line">        <span class="comment">/* 若该channel不存在，则新建 */</span></span><br><span class="line">        <span class="keyword">if</span> (de == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            clients = listCreate();</span><br><span class="line">            <span class="comment">/* 将该客户端添加到该服务端的pubsub_channels哈希表中; key: channel，value: client*/</span></span><br><span class="line">            dictAdd(server.pubsub_channels,channel,clients);</span><br><span class="line">             <span class="comment">/* 引用自增 1 */</span></span><br><span class="line">            incrRefCount(channel);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            clients = dictGetVal(de);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">/* 将客户端c记录在订阅客户端列表 */</span></span><br><span class="line">        listAddNodeTail(clients,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 通知客户端订阅结果 */</span></span><br><span class="line">    addReplyPubsubSubscribed(c,channel);</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>普通订阅模式主要做了两件事：将订阅渠道添加至客户端<code>pubsub_channels</code>哈希表中；将订阅客户端添加至服务端的<code>pubsub_channels</code>哈希表中。可如下表示：</p>
<p><img src="http://www.plantuml.com/plantuml/png/VP5FJyCW6CRFurEGdcjJ_kpYjcRHws8yw6anXXOwYCWMIgE9-jrz1Tk5Is_yVW_mFeJz48GFuxj524bpykAYSMUDSW5_ePKNxaqQZtVuwMw3qCgTfJeEMbmKAA-wivSb_Z0oQE2Ab5WhSz8Xmijqe3vQqIeBijZsTTDfuPoov7lRamae09s00R09E01lggegIlmPxzaLzwdVuzWEO_lwlt4eve4a7_ZmV3X0c3AwaB65Z2zawooBPQ-Fl-thcoQsWjLcbYH9cacQ9CiaIv9daYUvZl87eRroykyJVm40" alt=""></p>
<p><img src="http://www.plantuml.com/plantuml/png/RL9TJuCm57tlhsXuHa8_W4mtikZhOapKfyMOifQLYDrIG4tK_-uT26ipUBhduvnxcx1kMc7Rxhr6I5PxAuuQDyf-A8k_4ORF2lCcAujN-Eds1lMKEKYrRRGuAc2jsXsi3F5d9LiDE28XrghQwxO7BquctjQYK3NmmRACyvqMngYQ_2nBCW8AW8w00M0Zu01u7aLHuEpYtguGV_KBLi7Zy8A7hcYwulM_eGdSOuX_p5rTATCIi4mEwZlkdpSRLsPp1THry3a7Tns9xu3NUJUcSmNCBSZc78bNifYpf9ublYxZg_mq4PZExMJYKvZy01a4UY7GGM1U4vkQiei06mG-1aQU3tpY1xAfQT4BlmYjbP6d7_WF" alt=""></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT 主题集成搜索功能</title>
    <url>/2020/05/03/next_search_service/</url>
    <content><![CDATA[<hr>
<h4 id="一、-NexT-集成第三方搜索服务"><a href="#一、-NexT-集成第三方搜索服务" class="headerlink" title="一、 NexT 集成第三方搜索服务"></a>一、 NexT 集成第三方搜索服务</h4><p>根据<a href="http://theme-next.iissnan.com/third-party-services.html#search-system" target="_blank" rel="noopener">官方文档</a>， NexT 主题框架集成的搜索方式有四种：</p>
<ul>
<li>SwiftType</li>
<li>微搜索</li>
<li>Local Search</li>
<li>Algolia</li>
</ul>
<p>其中，Local Search 最为简单方便，本文将进一步介绍其配置与使用。</p>
<h4 id="二、配置-Local-Search"><a href="#二、配置-Local-Search" class="headerlink" title="二、配置 Local Search"></a>二、配置 Local Search</h4><ul>
<li><p>安装插件 <code>hexo-generator-searchdb</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑站点配置文件，新增以下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑主题配置文件，启用本地搜索功能：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Local Search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="三、使用-Local-Search"><a href="#三、使用-Local-Search" class="headerlink" title="三、使用 Local Search"></a>三、使用 Local Search</h4><p>部署博客，访问首页，可以看到新增一个搜索控件：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/06/18_20_56_47_NexT-Search-Button.png" alt=""></p>
<p>使用搜索功能，查看所有跟 Spring 相关的博客：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/06/18_20_58_23_NexT-Search-Demo.png" alt=""></p>
<p>可以看到，Local Search 不仅支持标题检索，还支持内容检索，十分好用。</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>葱油饼</title>
    <url>/2020/06/20/scallionPancake/</url>
    <content><![CDATA[<hr>
<hr>
<p>今天特别想吃我妈做的油馍，也就是大家常说的葱油饼。虽然出租屋的条件有限，但我打算尝试一次。</p>
<hr>
<h4 id="一、原料"><a href="#一、原料" class="headerlink" title="一、原料"></a>一、原料</h4><p>小麦粉，小香葱，香油，花生油，食盐，佐料（看个人喜好选择添加）。</p>
<h4 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h4><h6 id="1-和面"><a href="#1-和面" class="headerlink" title="1. 和面"></a>1. 和面</h6><p>加入适量面粉（尽量选高筋粉），边用筷子搅拌边兑温水，待面结成絮状，手动和成面团。建议面团和软一点，保证很好的延展性。和好后，套上保鲜膜，醒面20分钟。</p>
<p><img src="https://s1.ax1x.com/2020/06/20/N1pDh9.jpg" alt="N1pDh9.jpg"></p>
<h6 id="2-擀面"><a href="#2-擀面" class="headerlink" title="2. 擀面"></a>2. 擀面</h6><p>面醒好后，揉捏成条状。</p>
<p><img src="https://s1.ax1x.com/2020/06/20/N19cCj.jpg" alt="N19cCj.jpg"></p>
<p>葱油饼是多层叠加起来的，所以需要尽可能地将面擀薄。</p>
<p><img src="https://s1.ax1x.com/2020/06/20/N1C3Mq.jpg" alt="N1C3Mq.jpg"></p>
<h5 id="3-加料"><a href="#3-加料" class="headerlink" title="3. 加料"></a>3. 加料</h5><p>将适量香油滴在面皮上，然后不断对折面皮，直至香油全部铺开。</p>
<p><img src="https://s1.ax1x.com/2020/06/20/N1PkY4.jpg" alt="N1PkY4.jpg"></p>
<p>然后，均匀撒上葱花，食盐少量。</p>
<p><img src="https://s1.ax1x.com/2020/06/20/N1P4NF.jpg" alt="N1P4NF.jpg"></p>
<h5 id="4-成型"><a href="#4-成型" class="headerlink" title="4. 成型"></a>4. 成型</h5><p>将铺满葱花的面从一边角叠起。</p>
<p><img src="https://s1.ax1x.com/2020/06/20/N1ZtPK.jpg" alt="N1ZtPK.jpg"></p>
<p>将面擀平实。</p>
<p><img src="https://s1.ax1x.com/2020/06/20/N1VM7t.jpg" alt="N1VM7t.jpg"></p>
<h5 id="5-煎饼"><a href="#5-煎饼" class="headerlink" title="5. 煎饼"></a>5. 煎饼</h5><p>注意控制油温。家用燃气灶，小火慢热即可。</p>
<p><img src="https://s1.ax1x.com/2020/06/20/N1VaBn.jpg" alt="N1VaBn.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/06/20/N1VUns.jpg" alt="N1VUns.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/06/20/N1VtXj.jpg" alt="N1VtXj.jpg"></p>
]]></content>
      <categories>
        <category>吃货</category>
      </categories>
      <tags>
        <tag>小吃</tag>
      </tags>
  </entry>
  <entry>
    <title>response.setHeader 与 response.addHeader 分析</title>
    <url>/2020/03/22/reponse_setHeader/</url>
    <content><![CDATA[<h4 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h4><p>HTTP 为请求-响应式协议，指客户端先向服务器发送请求，然后服务器接收请求后，再向客户端发送响应信息。服务器向客户端发送的响应信息，包含三个部分: 状态行、消息报头和消息正文。状态行包括 HTTP 版本和<a href="https://datatracker.ietf.org/doc/rfc2616/?include_text=1" target="_blank" rel="noopener">状态码</a>。消息报头包括浏览器、服务器或消息正文的相关信息。消息正文为返回的实体数据。</p>
<p>在以 Java 语言为服务的响应中，消息报头是存储在 Header 属性中的。主要实现方法有两种：<code>HttpServletResponse.setHeader(name, MIME)</code> 和 <code>HttpServletResponse.addHeader(name, MIME)</code>。下面详细介绍两种方法的底层实现原理及其区别。参考 Tomcat 源码版本8.5.31。</p>
<hr>
<h4 id="二、底层实现"><a href="#二、底层实现" class="headerlink" title="二、底层实现"></a>二、底层实现</h4><p><img src="http://www.plantuml.com/plantuml/png/tLBDgjD06DtFKym3U2-ekokHWb1Sw4PyWP0CRI2TX6Iww2uBnQ2D1eLQVxGjY9LIM-l2HbDzcdn9ynPECy4oIOJgyXOAoVUTS-PCpccvJ7LOlsSYPFC7GpDibJ9yZxYsHLtILZLL9z9AioWb6hES4bFT3Yn66bTtZHwvJRYSqpQ8gRi8AGfs2HCp33iFva-meg2pcvNpBuum96ymnrODIN3LPFYMHHcXx8mDR89XypxrvgX6uagoUI5JSkzpAYAcI_w8cOHsMFS_vUuKP2483xybyQZKaIbSe_hHBd0wdUMBeS2dupM47s7x5JwFuUqdXFdlS6DvGhaaTenEjvv1iRzwZk7PA5ikayXBeWM4GmY3xFK3SGQil-ytioiuVnHaFrVbpDlTAAZNEDMVvgy-Y5iqKWMIKBqm8buE5q-Yu1zD-cyW_Y5CrW_WLlQhNqUBOG3FXnMxryznketXyHJyBsALZoVWlsooI7N4_t97i_X5-cx2AteOgxekLRUvkHnrUdC5_98szw_vdPf_9TuaUbfhOtEySheYLP5V9TOMt_Lxvcy0" alt=""></p>
<h4 id="三、setHeader-与-addHeader-的区别"><a href="#三、setHeader-与-addHeader-的区别" class="headerlink" title="三、setHeader 与 addHeader 的区别"></a>三、<code>setHeader</code> 与 <code>addHeader</code> 的区别</h4><p>根据上面的分析可以看出，响应头的属性可以分为两种: 特殊属性与普通属性。其中，<code>Content-type</code> 与 <code>Content-length</code> 为特殊属性，<code>MimeHeaderFields</code>  中为普通属性。响应头的属性都在 <code>coyote/Response</code> 类中。</p>
<p>从底层实现原理看，<code>setHeader</code> 是通过新建或覆盖来实现属性配置的，而 <code>addHeader</code> 只会新增属性到队列中。此处需要说明，属性若已存在，<code>setHeader</code> 的进行覆盖后，还会将其他同名属性移除队列。源码实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属性组</span></span><br><span class="line"><span class="keyword">private</span> MimeHeaderField[] headers = <span class="keyword">new</span> MimeHeaderField[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allow "set" operations, which removes all current values</span></span><br><span class="line"><span class="comment"> * for this header.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name The header name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the message bytes container for the value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageBytes <span class="title">setValue</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.headers[i].getName().equalsIgnoreCase(name)) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">this</span>.count; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.headers[j].getName().equalsIgnoreCase(name)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.removeHeader(j--);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.headers[i].getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MimeHeaderField mh = <span class="keyword">this</span>.createHeader();</span><br><span class="line">    mh.getName().setString(name);</span><br><span class="line">    <span class="keyword">return</span> mh.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续分析，<code>addHeader</code> 为属性设置多个值，那么我们可以获取哪个值呢？通过属性名查询属性的方法有 <code>getHeader(name)</code>，<code>getHeaders(name)</code>。实现方法如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* getHeader(name)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name 属性名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>     属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageBytes <span class="title">getValue</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (headers[i].getName().equalsIgnoreCase(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> headers[i].getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* getHeaders(name)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name 属性名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>     该属性名对应的所有属性值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">getHeaders</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    Enumeration&lt;String&gt; enumeration =</span><br><span class="line">            getCoyoteResponse().getMimeHeaders().values(name);</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (enumeration.hasMoreElements()) &#123;</span><br><span class="line">        result.add(enumeration.nextElement());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从方法实现可以看出，<code>getHeader</code> 会返回匹配到的第一个属性值，而 <code>getHeaders</code> 则返回相同属性名的所有属性值。我们可以通过程序示例证实：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">"set"</span>, <span class="string">"one"</span>);</span><br><span class="line">response.setHeader(<span class="string">"set"</span>, <span class="string">"two"</span>);</span><br><span class="line">response.addHeader(<span class="string">"add"</span>, <span class="string">"a"</span>);</span><br><span class="line">response.addHeader(<span class="string">"add"</span>, <span class="string">"b"</span>);</span><br><span class="line">response.addHeader(<span class="string">"add"</span>, <span class="string">"c"</span>);</span><br><span class="line">response.addHeader(<span class="string">"add"</span>, <span class="string">"d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    String setName = <span class="string">"set"</span>;</span><br><span class="line">    String addName = <span class="string">"add"</span>;</span><br><span class="line">    </span><br><span class="line">    log.info(<span class="string">"setHeader -&gt; getHeader 方式查询到: &#123;&#125;"</span>, response.getHeader(setName));</span><br><span class="line">    log.info(<span class="string">"setHeader -&gt; getHeaders 方式查询到: &#123;&#125;"</span>, response.getHeaders(setName));</span><br><span class="line">    </span><br><span class="line">    log.info(<span class="string">"addHeader -&gt; getHeader 方式查询到: &#123;&#125;"</span>, response.getHeader(addName));</span><br><span class="line">    log.info(<span class="string">"addHeader -&gt; getHeaders 方式查询到: &#123;&#125;"</span>, response.getHeaders(addName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----- 输出</span><br><span class="line">setHeader -&gt; getHeader 方式查询到: two</span><br><span class="line">setHeader -&gt; getHeaders 方式查询到: two</span><br><span class="line"></span><br><span class="line">addHeader -&gt; getHeader 方式查询到: a</span><br><span class="line">addHeader -&gt; getHeaders 方式查询到: [a, b, c, d]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>ServletResponse</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Batch 基础应用</title>
    <url>/2022/02/02/spring_batch_demo/</url>
    <content><![CDATA[<hr>
<h4 id="一、项目简介"><a href="#一、项目简介" class="headerlink" title="一、项目简介"></a>一、项目简介</h4><p>上一节介绍了 Spring Batch 的基础架构和设计原理，本节将通过一个简单的批处理任务来学习如何使用 Spring Batch。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/30_22_33_0_batch_demo_process_person_2.png" alt=""></p>
<p>现在需要将逗号分隔值文件 <code>sample-data.cvs</code> 中的数据，按照姓氏、名称拆分，导入数据表 <code>person</code> 中。看图可知，<code>BatchProcessJob</code> 只有一个 <code>Step</code>，分为三个部分：解析 <code>cvs</code> 文件；将文件数据转化为 <code>Person</code> 对象；将 <code>Person</code> 对象信息导入数据表 <code>batch-demo.person</code>。</p>
<h4 id="二、项目搭建与配置"><a href="#二、项目搭建与配置" class="headerlink" title="二、项目搭建与配置"></a>二、项目搭建与配置</h4><p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/30_22_52_11_build_spring_batch_demo.png" alt=""></p>
<p>使用<a href="https://start.spring.io/" target="_blank" rel="noopener">Spring 应用构建工具</a>，即可创建项目。我的应用部署地址：<a href="https://github.com/donehub/spring-batch-demo" target="_blank" rel="noopener">spring-batch-demo</a></p>
<h4 id="三、创建数据表"><a href="#三、创建数据表" class="headerlink" title="三、创建数据表"></a>三、创建数据表</h4><p>Spring Batch 的组件<code>JobRepository</code>， 专门负责与数据库打交道，记录整个批处理中的增加、检索、更新、删除动作。也就是说，Spring Batch 是依赖数据库进行管理的。数据表<a href="https://docs.spring.io/spring-batch/docs/current/reference/html/schema-appendix.html#exampleDDLScripts" target="_blank" rel="noopener">创建脚本</a>可在<a href="https://github.com/donehub/spring-batch/tree/master/spring-batch-core/src/main/resources/org/springframework/batch/core" target="_blank" rel="noopener">仓库</a>中找到。<code>MySQL</code> 数据库的脚本文件为：<code>schema-mysql.sql</code>。框架依赖表建好后，不要忘了创建表 <code>batch-demo.person</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> batch-demo;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`person`</span> (</span><br><span class="line">  <span class="string">`person_id`</span> <span class="built_in">bigint</span>(<span class="number">30</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`person_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">142</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_general_ci <span class="keyword">COMMENT</span>=<span class="string">'人员信息表'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="四、批处理任务配置"><a href="#四、批处理任务配置" class="headerlink" title="四、批处理任务配置"></a>四、批处理任务配置</h4><p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/27_21_7_30_spring-batch-flow.png" alt=""></p>
<p>根据批处理框架的运作流程，我们做出如下配置：</p>
<p><strong>4.1 <code>cvs</code>文件内容读取器：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.FlatFileItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomItemReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"personItemReader"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;Person&gt; <span class="title">personItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemReaderBuilder&lt;Person&gt;()</span><br><span class="line">                .name(<span class="string">"personItemReader"</span>)</span><br><span class="line">                .resource(<span class="keyword">new</span> ClassPathResource(<span class="string">"sample-data.csv"</span>))</span><br><span class="line">                .delimited()</span><br><span class="line">                .names(<span class="keyword">new</span> String[]&#123;<span class="string">"firstName"</span>, <span class="string">"lastName"</span>&#125;)</span><br><span class="line">                .fieldSetMapper(<span class="keyword">new</span> BeanWrapperFieldSetMapper&lt;Person&gt;() &#123;&#123;</span><br><span class="line">                    setTargetType(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                &#125;&#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.2 解析数据处理器：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonItemProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">Person</span>, <span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(PersonItemProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">process</span><span class="params">(<span class="keyword">final</span> Person person)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String firstName = person.getFirstName();</span><br><span class="line">        <span class="keyword">final</span> String lastName = person.getLastName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Person transformedPerson = <span class="keyword">new</span> Person();</span><br><span class="line">        transformedPerson.setFirstName(firstName);</span><br><span class="line">        transformedPerson.setLastName(lastName);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"Converting (&#123;&#125;) into (&#123;&#125;)"</span>, person, transformedPerson);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> transformedPerson;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.3 <code>Person</code> 对象写入器：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomItemWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchDemoDB"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource batchDemoDB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"personItemWriter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcBatchItemWriter&lt;Person&gt; <span class="title">personItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcBatchItemWriterBuilder&lt;Person&gt;()</span><br><span class="line">                .itemSqlParameterSourceProvider(<span class="keyword">new</span> BeanPropertyItemSqlParameterSourceProvider&lt;&gt;())</span><br><span class="line">                .sql(<span class="string">"INSERT INTO person (first_name, last_name) VALUES (:firstName, :lastName)"</span>)</span><br><span class="line">                .dataSource(batchDemoDB)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.4 <code>MySQL</code> 数据源配置：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"batchDemoDB"</span>)</span><br><span class="line">    <span class="comment">// 数据源配置参数识别前缀, 根据具体配置来设定</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.batch-demo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用 SpringBoot 默认的数据源 HikariDataSource</span></span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().type(HikariDataSource<span class="class">.<span class="keyword">class</span>).<span class="title">build</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.5 Step 配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.processor.PersonItemProcessor;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.FlatFileItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchProcessPersonStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"personItemReader"</span>)</span><br><span class="line">    <span class="keyword">private</span> FlatFileItemReader&lt;Person&gt; personItemReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"personItemWriter"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcBatchItemWriter&lt;Person&gt; personItemWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonItemProcessor personItemProcessor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"batchProcessPersonStep1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step1"</span>)</span><br><span class="line">                .&lt;Person, Person&gt;chunk(<span class="number">10</span>)</span><br><span class="line">                .reader(personItemReader)</span><br><span class="line">                .processor(personItemProcessor)</span><br><span class="line">                .writer(personItemWriter)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.6 <code>Job</code> 配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.listener.BatchProcessPersonCompletionListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.launch.support.RunIdIncrementer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchProcessPersonJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchProcessPersonStep1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Step batchProcessPersonStep1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BatchProcessPersonCompletionListener batchProcessPersonCompletionListener;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">importUserJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"importUserJob"</span>)</span><br><span class="line">                .preventRestart()</span><br><span class="line">                .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">                .listener(batchProcessPersonCompletionListener)</span><br><span class="line">                .flow(batchProcessPersonStep1)</span><br><span class="line">                .end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.7 任务状态监听器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.mapper.PersonMapper;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.BatchStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.JobExecution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.listener.JobExecutionListenerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchProcessPersonCompletionListener</span> <span class="keyword">extends</span> <span class="title">JobExecutionListenerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(BatchProcessPersonCompletionListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonMapper personMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterJob</span><span class="params">(JobExecution jobExecution)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (BatchStatus.COMPLETED.equals(jobExecution.getStatus())) &#123;</span><br><span class="line">            log.info(<span class="string">"Job finished! Time to verify the results"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// spring-mybatis 查询所有的人员信息</span></span><br><span class="line">            List&lt;Person&gt; personList = personMapper.queryAll();</span><br><span class="line">            personList.forEach(person -&gt; log.info(<span class="string">"Found &lt;&#123;&#125;&gt; in the database."</span>, person));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.8 <code>cvs</code> 测试数据文件配置</strong></p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/30_23_30_14_sample-data.png" alt=""></p>
<h4 id="五、执行批处理任务"><a href="#五、执行批处理任务" class="headerlink" title="五、执行批处理任务"></a>五、执行批处理任务</h4><p>运行 <code>SpringBoot</code> 项目，<code>JobLauncher</code> 自动发起任务 <code>importUserJob</code>。任务执行结果如下：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/30_23_40_7_batch_demo_log.png" alt=""></p>
<p>查看表 <code>batch-demo.person</code>，<code>cvs</code> 文件内的测试数据已成功导入数据表！</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/30_23_41_47_batch_task_db.png" alt=""></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Batch 基础介绍</title>
    <url>/2022/01/30/spring_batch_introduction/</url>
    <content><![CDATA[<hr>
<h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>Spring Batch 是一款轻量级批处理框架，主要用于构建高容量、高性能的批处理应用。作为 Spring 的子项目，Spring Batch 基于 Spring 框架，已进化出一套完备的企业级解决方案。借助良好的 Spring 生态，被广泛应用于批处理领域。</p>
<p>Spring Batch 拥有强大的组件库，包括任务重启、任务跳过、任务统计、日志追踪、事务管理、资源管理等。此外，对于大批量数据处理任务，通过分区和优化技术，实现高性能作业。总之，Spring Batch 有着良好的可扩展性，既可以处理简单的任务，也可以处理复杂的、高容量的任务。</p>
<h4 id="二、基础架构"><a href="#二、基础架构" class="headerlink" title="二、基础架构"></a>二、基础架构</h4><p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/27_21_7_30_spring-batch-flow.png" alt=""></p>
<p>看图可知：</p>
<ul>
<li>一个  <code>Job</code> 可以有一个或多个 <code>Step</code>；</li>
<li>每个 <code>Step</code> 都有一个 <code>ItemReader</code>、一个 <code>ItemProcessor</code> 和一个 <code>ItemWriter</code>；</li>
<li><code>Job</code> 需要 <code>JobLauncher</code> 发起；</li>
<li>批处理过程中的元数据存在 <code>JobRepository</code> 中；</li>
</ul>
<hr>
<h5 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h5><p> <code>Job</code> 封装了整个批处理所需要的数据，可以通过 <code>xml</code> 或 <code>Java Bean</code> 注解配置。<code>Job</code> 的继承链：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/27_21_38_32_job_detail.png" alt=""></p>
<p><code>JobInstance</code> 是 <code>Job</code> 的运行实例，就像同一个 <code>Java</code> 类可以实例化出不同的对象， <code>Job</code> 也可以有不同的 <code>JobInstance</code>。因此可以说，<code>JobInstance</code> = <code>Job</code> + <code>JobParameters</code>。<code>JobExecution</code>是 <code>JobInstance</code> 的一次执行，包括要做什么、怎么做、执行结果等。</p>
<hr>
<h5 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h5><p>看图可知，一个 <code>Step</code> 包含输入、处理、输出这样一种模型，说明在批处理框架中， <code>Step</code> 是最小的执行单元。<code>Step</code> 的继承链：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/27_22_7_8_step_detail.png" alt=""></p>
<p><code>StepExecution</code> 是 <code>Step</code> 的一次执行，包含 <code>Step</code> 、<code>JobExecution</code> 以及事务相关数据的引用，比如提交和回滚次数、开始和结束时间等。</p>
<p><code>ItemReader</code>、<code>ItemProcessor</code> 和 <code>ItemWriter</code>，是顶级接口。基于此，Spring Batch 已实现常用组件，如文件数据存取器、数据库数据存取器等，功能完备，开箱即用。</p>
<hr>
<h5 id="JobLauncher"><a href="#JobLauncher" class="headerlink" title="JobLauncher"></a>JobLauncher</h5><p><code>JobLauncher</code> 负责在指定的 <code>JobParameters</code> 下，启动 <code>Job</code>。</p>
<hr>
<h5 id="JobRepository"><a href="#JobRepository" class="headerlink" title="JobRepository"></a>JobRepository</h5><p><code>JobRepository</code> 专门负责与数据库打交道，记录整个批处理中的增加、检索、更新、删除动作。在 Java 应用中，使用注解 <code>@EnableBatchProcessing</code> 即可完成配置。此外，Spring Batch 是依赖数据库进行管理的。相关表的<a href="https://docs.spring.io/spring-batch/docs/current/reference/html/schema-appendix.html#metaDataSchema" target="_blank" rel="noopener">功能简介</a>如下：</p>
<ul>
<li><code>BATCH_JOB_INSTANCE</code>：储存 <code>JobInstance</code> 相关的所有信息；</li>
<li><code>BATCH_JOB_EXECUTION_PARAMS</code>： 储存 <code>JobParameters</code> 相关的所有信息；</li>
<li><code>BATCH_JOB_EXECUTION</code>：储存 <code>JobExecution</code> 相关的所有信息；</li>
<li><code>BATCH_STEP_EXECUTION</code>：存储 <code>StepExecution</code> 相关的所有信息；</li>
<li><code>BATCH_JOB_EXECUTION_CONTEXT</code>：存储 <code>Job</code> - <code>ExecutionContext</code> 相关的所有信息；</li>
<li><code>BATCH_STEP_EXECUTION_CONTEXT</code>：存储 <code>Step</code> - <code>ExecutionContext</code> 相关的所有信息；</li>
</ul>
<h4 id="三、设计原则"><a href="#三、设计原则" class="headerlink" title="三、设计原则"></a>三、设计原则</h4><p>只需简单配置，Spring Batch 即可内嵌 Spring 应用中，小巧而强大。其<a href="https://docs.spring.io/spring-batch/docs/current/reference/html/spring-batch-intro.html#springBatchUsageScenarios" target="_blank" rel="noopener">设计原则</a>如下：</p>
<ul>
<li><p>继承 Spring 编程模型，开发者只需专注于业务逻辑，将基础实现交由框架负责；</p>
</li>
<li><p>解耦基础架构、执行环境和批处理应用之间的关注点；</p>
</li>
<li><p>抽取核心服务，设计顶层接口；</p>
</li>
<li><p>实现热门组件，开箱即用；</p>
</li>
<li><p>增强核心服务的可拓展性；</p>
</li>
<li><p>通过 <code>Maven</code> 构建简单的部署模型，独立于应用程序；</p>
</li>
</ul>
<h4 id="四、使用原则"><a href="#四、使用原则" class="headerlink" title="四、使用原则"></a>四、使用原则</h4><p>开发者在构建批处理方案时，应考虑以下<a href="https://docs.spring.io/spring-batch/docs/current/reference/html/spring-batch-intro.html#springBatchArchitecture" target="_blank" rel="noopener">原则</a>：</p>
<ul>
<li><p>搭建架构和环境，尽量使用通用的构建块，因为批处理架构与在线框架之间会相互影响；</p>
</li>
<li><p>避免在单机应用中构建复杂的逻辑结构；</p>
</li>
<li><p>尽可能多地在内存中处理任务，尽可能少地使用系统资源，尤其是物理 <code>IO</code>：</p>
<ul>
<li>缓存常用数据，避免在同一事务或不同事务中重复读取数据；</li>
<li>全表扫描或索引扫描；</li>
</ul>
</li>
<li><p>不做重复的任务（记录已处理的任务，对于相同的后续任务，直接跳过）；</p>
</li>
<li><p>合理分配初始内存，防止处理任务中多次分配内存，耗费时间；</p>
</li>
<li><p>设定足够的校验和记录，保证数据的完整性；</p>
</li>
<li><p>模拟生产环境和数据量，尽早压测；</p>
</li>
<li><p>注重数据备份；</p>
</li>
</ul>
<h4 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h4><p>Spring Batch 是一款优秀的批处理框架，其良好的可扩展性和性能天花板，让批处理工作不再头疼。</p>
<p>一方面，Spring Batch 可以完全解耦批处理任务。原本复杂且庞大的一条龙任务，现在可以拆解为若干个 <code>Step</code>，各司其职。同时，每个 <code>Step</code> 都有自己的输入、处理、输出模型，高度规范，高度内聚，超级简单。</p>
<p>另一方面，Spring Batch 可以让项目设计更加科学合理。首先，任务拆解更加细致，工作量预估更加准确。其次，各个环节清晰明了，降低沟通成本。最后，也是最重要的，开发者不用在一个任务中从头磕到尾，头晕眼花，bug 爆炸。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Batch 数据读取器</title>
    <url>/2022/02/03/spring_batch_item_readers/</url>
    <content><![CDATA[<hr>
<h4 id="一、Spring-Batch-数据读取器"><a href="#一、Spring-Batch-数据读取器" class="headerlink" title="一、Spring Batch 数据读取器"></a>一、Spring Batch 数据读取器</h4><p>Spring Batch 的数据读取器，是通过接口 <code>ItemReader</code> 来实现的。针对常用的数据读取场景，Spring Batch 提供了丰富的组件支持（<a href="https://docs.spring.io/spring-batch/docs/current/reference/html/appendix.html#itemReadersAppendix" target="_blank" rel="noopener">查看所有组件</a>），本文介绍最常用的五个组件：</p>
<ul>
<li><code>FlatFileItemReader</code>：读取文本数据；</li>
<li><code>JdbcPagingItemReader</code>：分页读取数据库的数据；</li>
<li><code>StaxEventItemReader</code>：读取 <code>XML</code> 文件数据；</li>
<li><code>JsonItemReader</code>：读取 <code>JSON</code> 文件数据；</li>
<li><code>MultiResourceItemReader</code>：读取多文本数据；</li>
</ul>
<h4 id="二、简单使用"><a href="#二、简单使用" class="headerlink" title="二、简单使用"></a>二、简单使用</h4><p>实体类 <code>Ticket.class</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 始发站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String departureStation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 到达站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String arrivalStation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 票价</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"始发站: %s; 到达站: %s; 票价: %s"</span>, departureStation, arrivalStation, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-FlatFileItemReader-文本数据读取"><a href="#2-1-FlatFileItemReader-文本数据读取" class="headerlink" title="2.1 FlatFileItemReader-文本数据读取"></a>2.1 FlatFileItemReader-文本数据读取</h5><p>文件 <code>ticket.csv</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">合肥,蚌埠,60.00</span><br><span class="line">南京,蚌埠,70.00</span><br><span class="line">上海,蚌埠,220.00</span><br><span class="line">上海,杭州,75.20</span><br><span class="line">上海,昆山,19.00</span><br></pre></td></tr></table></figure>

<p>可以看到，文本数据的每一行代表一个 <code>Ticket</code> 实体，对象属性之间以英文逗号分隔。通过 <code>FlatFileItemReader</code>，可以按照行将文本数据转换为 <code>POJO</code> 存储。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">testFlatItemFileReaderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testFlatItemFileReaderJob"</span>)</span><br><span class="line">        .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">        .flow(testFlatFileItemReaderStep)</span><br><span class="line">        .end()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"testFlatFileItemReaderStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">testFlatFileItemReaderStep</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"testFlatFileItemReaderStep"</span>)</span><br><span class="line">        .transactionManager(transactionManager)</span><br><span class="line">        .&lt;Ticket, Ticket&gt;chunk(<span class="number">10</span>)</span><br><span class="line">        .reader(ticketFileItemReader)</span><br><span class="line">        .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;Ticket&gt; <span class="title">ticketFileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemReaderBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line">        .resource(<span class="keyword">new</span> ClassPathResource(<span class="string">"ticket.csv"</span>))</span><br><span class="line">        .delimited()</span><br><span class="line">        .names(<span class="keyword">new</span> String[]&#123;<span class="string">"departureStation"</span>, <span class="string">"arrivalStation"</span>, <span class="string">"price"</span>&#125;)</span><br><span class="line">        .fieldSetMapper(<span class="keyword">new</span> BeanWrapperFieldSetMapper&lt;Ticket&gt;() &#123;&#123;</span><br><span class="line">            setTargetType(Ticket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;&#125;)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动应用，控制台打印日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">13</span>:<span class="number">50</span>:<span class="number">23.538</span>  INFO <span class="number">77808</span> --- [restartedMain] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=testFlatItemFileReaderJob]] launched with the following parameters: [&#123;run.id=<span class="number">2</span>&#125;]</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">13</span>:<span class="number">50</span>:<span class="number">23.599</span>  INFO <span class="number">77808</span> --- [restartedMain] o.s.batch.core.job.SimpleStepHandler     : Executing step: [testFlatFileItemReaderStep]</span><br><span class="line">始发站: 合肥; 到达站: 蚌埠; 票价: <span class="number">60.00</span></span><br><span class="line">始发站: 南京; 到达站: 蚌埠; 票价: <span class="number">70.00</span></span><br><span class="line">始发站: 上海; 到达站: 蚌埠; 票价: <span class="number">220.00</span></span><br><span class="line">始发站: 上海; 到达站: 杭州; 票价: <span class="number">75.20</span></span><br><span class="line">始发站: 上海; 到达站: 昆山; 票价: <span class="number">19.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">13</span>:<span class="number">50</span>:<span class="number">23.680</span>  INFO <span class="number">77808</span> --- [restartedMain] o.s.batch.core.step.AbstractStep         : Step: [testFlatFileItemReaderStep] executed in <span class="number">79</span>ms</span><br></pre></td></tr></table></figure>

<h5 id="2-2-JdbcPagingItemReader-数据库数据读取"><a href="#2-2-JdbcPagingItemReader-数据库数据读取" class="headerlink" title="2.2 JdbcPagingItemReader-数据库数据读取"></a>2.2 JdbcPagingItemReader-数据库数据读取</h5><p>从 <code>MySQL</code> 数据库，分页读取表 <code>student</code> 的数据，并打印数据内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">testDatabaseItemReaderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testDatabaseItemReaderJob"</span>)</span><br><span class="line">        .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">        .flow(testDatabaseItemReaderStep)</span><br><span class="line">        .end()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"testDatabaseItemReaderStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">testDatabaseItemReaderStep</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"testDatabaseItemReaderStep"</span>)</span><br><span class="line">        .transactionManager(transactionManager)</span><br><span class="line">        .&lt;Student, Student&gt;chunk(<span class="number">10</span>)</span><br><span class="line">        .reader(studentItemReader)</span><br><span class="line">        .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"studentItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> JdbcPagingItemReader&lt;Student&gt; <span class="title">studentItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MySqlPagingQueryProvider queryProvider = <span class="keyword">new</span> MySqlPagingQueryProvider();</span><br><span class="line">    queryProvider.setSelectClause(<span class="string">"student_id, name, address"</span>);</span><br><span class="line">    queryProvider.setFromClause(<span class="string">"from student_source"</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Order&gt; sortKeys = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">    sortKeys.put(<span class="string">"student_id"</span>, Order.ASCENDING);</span><br><span class="line">    queryProvider.setSortKeys(sortKeys);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JdbcPagingItemReaderBuilder&lt;Student&gt;()</span><br><span class="line">        .name(<span class="string">"studentItemReader"</span>)</span><br><span class="line">        .dataSource(batchDemoDB)</span><br><span class="line">        .fetchSize(<span class="number">1000</span>)</span><br><span class="line">        .rowMapper(<span class="keyword">new</span> StudentRowMapper())</span><br><span class="line">        .queryProvider(queryProvider)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Student 字段映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setStudentId(rs.getLong(<span class="string">"student_id"</span>));</span><br><span class="line">        student.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">        student.setAddress(rs.getString(<span class="string">"address"</span>));</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MySQL 数据源配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"batchDemoDB"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.batch-demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DataSourceBuilder.create().type(HikariDataSource<span class="class">.<span class="keyword">class</span>).<span class="title">build</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动应用，控制台打印日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">19.010</span>  INFO <span class="number">67748</span> --- [restartedMain] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=testDatabaseItemReaderJob]] launched with the following parameters: [&#123;run.id=<span class="number">2</span>&#125;]</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">19.107</span>  INFO <span class="number">67748</span> --- [restartedMain] o.s.batch.core.job.SimpleStepHandler     : Executing step: [testDatabaseItemReaderStep]</span><br><span class="line">name: 张三<span class="number">1</span>, address: 上海市<span class="number">1</span></span><br><span class="line">name: 张三<span class="number">2</span>, address: 上海市<span class="number">2</span></span><br><span class="line">name: 张三<span class="number">3</span>, address: 上海市<span class="number">3</span></span><br><span class="line">name: 张三<span class="number">4</span>, address: 上海市<span class="number">4</span></span><br><span class="line">name: 张三<span class="number">5</span>, address: 上海市<span class="number">5</span></span><br><span class="line">name: 张三<span class="number">6</span>, address: 上海市<span class="number">6</span></span><br><span class="line">name: 张三<span class="number">7</span>, address: 上海市<span class="number">7</span></span><br><span class="line">name: 张三<span class="number">8</span>, address: 上海市<span class="number">8</span></span><br><span class="line">name: 张三<span class="number">9</span>, address: 上海市<span class="number">9</span></span><br><span class="line">name: 张三<span class="number">10</span>, address: 上海市<span class="number">10</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">19.284</span>  INFO <span class="number">67748</span> --- [restartedMain] o.s.batch.core.step.AbstractStep         : Step: [testDatabaseItemReaderStep] executed in <span class="number">176</span>ms</span><br></pre></td></tr></table></figure>

<h5 id="2-3-StaxEventItemReader-XML-数据读取"><a href="#2-3-StaxEventItemReader-XML-数据读取" class="headerlink" title="2.3 StaxEventItemReader-XML 数据读取"></a>2.3 StaxEventItemReader-XML 数据读取</h5><p>文件 <code>ticket.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tickets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ticket</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>合肥<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>蚌埠<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>60.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ticket</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ticket</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>蚌埠<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>70.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ticket</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ticket</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>蚌埠<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>220.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ticket</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ticket</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>75.20<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ticket</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ticket</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>昆山<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>19.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ticket</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tickets</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，文件内容是多组 <code>ticket</code> 标签组成的，每一个标签代表一个 <code>Ticket</code> 实体；每个 <code>ticket</code> 标签，内含 3 个子标签，代表 <code>Ticket</code> 实体的 3 个属性值。</p>
<p>涉及到 <code>XML</code> 与 <code>Object</code> 的映射，因此需要引入 <code>OXM</code> 技术。推荐使用 <code>spring oxm</code>，pom 依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.thoughtworks.xstream&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xstream&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.11.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">testXmlItemReaderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testXmlItemReaderJob"</span>)</span><br><span class="line">        .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">        .flow(testXmlItemReaderStep)</span><br><span class="line">        .end()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"testXmlItemReaderStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">testXmlItemReaderStep</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"testXmlItemReaderStep"</span>)</span><br><span class="line">        .transactionManager(transactionManager)</span><br><span class="line">        .&lt;Ticket, Ticket&gt;chunk(<span class="number">10</span>)</span><br><span class="line">        .reader(ticketXmlItemReader)</span><br><span class="line">        .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketXmlItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> StaxEventItemReader&lt;Ticket&gt; <span class="title">itemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StaxEventItemReaderBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketXmlItemReader"</span>)</span><br><span class="line">        .resource(<span class="keyword">new</span> ClassPathResource(<span class="string">"ticket.xml"</span>))</span><br><span class="line">        .addFragmentRootElements(<span class="string">"ticket"</span>)</span><br><span class="line">        .unmarshaller(ticketMarshaller)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 映射器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketMarshaller"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> XStreamMarshaller <span class="title">ticketMarshaller</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;Ticket&gt;&gt; aliases = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">    aliases.put(<span class="string">"ticket"</span>, Ticket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    XStreamMarshaller marshaller = <span class="keyword">new</span> XStreamMarshaller();</span><br><span class="line">    marshaller.setAliases(aliases);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> marshaller;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动应用，控制台打印日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">15</span>:<span class="number">48.444</span>  INFO <span class="number">87024</span> --- [restartedMain] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=testXmlItemReaderJob]] launched with the following parameters: [&#123;run.id=<span class="number">3</span>&#125;]</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">15</span>:<span class="number">48.503</span>  INFO <span class="number">87024</span> --- [restartedMain] o.s.batch.core.job.SimpleStepHandler     : Executing step: [testXmlItemReaderStep]</span><br><span class="line">始发站: 合肥; 到达站: 蚌埠; 票价: <span class="number">60.00</span></span><br><span class="line">始发站: 南京; 到达站: 蚌埠; 票价: <span class="number">70.00</span></span><br><span class="line">始发站: 上海; 到达站: 蚌埠; 票价: <span class="number">220.00</span></span><br><span class="line">始发站: 上海; 到达站: 杭州; 票价: <span class="number">75.20</span></span><br><span class="line">始发站: 上海; 到达站: 昆山; 票价: <span class="number">19.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">15</span>:<span class="number">48.710</span>  INFO <span class="number">87024</span> --- [restartedMain] o.s.batch.core.step.AbstractStep         : Step: [testXmlItemReaderStep] executed in <span class="number">205</span>ms</span><br></pre></td></tr></table></figure>

<h5 id="2-4-JsonItemReader-JSON-数据读取"><a href="#2-4-JsonItemReader-JSON-数据读取" class="headerlink" title="2.4 JsonItemReader-JSON 数据读取"></a>2.4 JsonItemReader-JSON 数据读取</h5><p>文件 <code>ticket.json</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"departureStation"</span>: <span class="string">"合肥"</span>,</span><br><span class="line">    <span class="attr">"arrivalStation"</span>: <span class="string">"蚌埠"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="string">"60.00"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"departureStation"</span>: <span class="string">"南京"</span>,</span><br><span class="line">    <span class="attr">"arrivalStation"</span>: <span class="string">"蚌埠"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="string">"70.00"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"departureStation"</span>: <span class="string">"上海"</span>,</span><br><span class="line">    <span class="attr">"arrivalStation"</span>: <span class="string">"蚌埠"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="string">"220.00"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"departureStation"</span>: <span class="string">"上海"</span>,</span><br><span class="line">    <span class="attr">"arrivalStation"</span>: <span class="string">"杭州"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="string">"75.20"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"departureStation"</span>: <span class="string">"上海"</span>,</span><br><span class="line">    <span class="attr">"arrivalStation"</span>: <span class="string">"昆山"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="string">"19.00"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">testJsonItemReaderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testJsonItemReaderJob"</span>)</span><br><span class="line">        .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">        .flow(testJsonItemReaderStep)</span><br><span class="line">        .end()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"testJsonItemReaderStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">testJsonItemReaderStep</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"testJsonItemReaderStep"</span>)</span><br><span class="line">        .transactionManager(transactionManager)</span><br><span class="line">        .&lt;Ticket, Ticket&gt;chunk(<span class="number">10</span>)</span><br><span class="line">        .reader(ticketJsonItemReader)</span><br><span class="line">        .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketJsonItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonItemReader&lt;Ticket&gt; <span class="title">ticketJsonItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonItemReaderBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketJsonItemReader"</span>)</span><br><span class="line">        .jsonObjectReader(<span class="keyword">new</span> JacksonJsonObjectReader&lt;&gt;(Ticket<span class="class">.<span class="keyword">class</span>))</span></span><br><span class="line">        .resource(new ClassPathResource("ticket.json"))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动应用，控制台打印日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">25</span>:<span class="number">38.142</span>  INFO <span class="number">76544</span> --- [restartedMain] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=testJsonItemReaderJob]] launched with the following parameters: [&#123;run.id=<span class="number">2</span>&#125;]</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">25</span>:<span class="number">38.211</span>  INFO <span class="number">76544</span> --- [restartedMain] o.s.batch.core.job.SimpleStepHandler     : Executing step: [testJsonItemReaderStep]</span><br><span class="line">始发站: 合肥; 到达站: 蚌埠; 票价: <span class="number">60.00</span></span><br><span class="line">始发站: 南京; 到达站: 蚌埠; 票价: <span class="number">70.00</span></span><br><span class="line">始发站: 上海; 到达站: 蚌埠; 票价: <span class="number">220.00</span></span><br><span class="line">始发站: 上海; 到达站: 杭州; 票价: <span class="number">75.20</span></span><br><span class="line">始发站: 上海; 到达站: 昆山; 票价: <span class="number">19.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">25</span>:<span class="number">38.328</span>  INFO <span class="number">76544</span> --- [restartedMain] o.s.batch.core.step.AbstractStep         : Step: [testJsonItemReaderStep] executed in <span class="number">116</span>ms</span><br></pre></td></tr></table></figure>

<h5 id="2-5-MultiResourceItemReader-多文本数据读取"><a href="#2-5-MultiResourceItemReader-多文本数据读取" class="headerlink" title="2.5 MultiResourceItemReader-多文本数据读取"></a>2.5 MultiResourceItemReader-多文本数据读取</h5><p>多文本数据读取，与文本数据读取的原理一致，只是在其基础上，做了一层代理。多文本数据读取，要求每个文本的数据结构相同，如从 <code>ticket-1.cvs</code> 和 <code>ticket-2.cvs</code> 两个文件中读取数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">合肥,蚌埠,60.00</span><br><span class="line">南京,蚌埠,70.00</span><br><span class="line">上海,蚌埠,220.00</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上海,杭州,75.20</span><br><span class="line">上海,昆山,19.00</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">testMultiFileItemReaderJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testMultiFileItemReaderJob"</span>)</span><br><span class="line">        .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">        .flow(testMultiFileItemReaderStep)</span><br><span class="line">        .end()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"testMultiFileItemReaderStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">testMultiFileItemReaderStep1</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"testMultiFileItemReaderStep"</span>)</span><br><span class="line">        .transactionManager(transactionManager)</span><br><span class="line">        .&lt;Ticket, Ticket&gt;chunk(<span class="number">10</span>)</span><br><span class="line">        .reader(ticketMultiFileItemReader)</span><br><span class="line">        .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Proxy Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketMultiFileItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MultiResourceItemReader&lt;Ticket&gt; <span class="title">ticketMultiFileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 资源文件</span></span><br><span class="line">    Resource[] resources = <span class="keyword">new</span> Resource[]&#123;</span><br><span class="line">        <span class="keyword">new</span> ClassPathResource(<span class="string">"ticket-1.csv"</span>),</span><br><span class="line">        <span class="keyword">new</span> ClassPathResource(<span class="string">"ticket-2.csv"</span>)&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MultiResourceItemReaderBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketMultiFileItemReader"</span>)</span><br><span class="line">        .delegate(commonTicketFileItemReader())</span><br><span class="line">        .resources(resources)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"commonTicketFileItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;Ticket&gt; <span class="title">commonTicketFileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemReaderBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"commonTicketFileItemReader"</span>)</span><br><span class="line">        .delimited()</span><br><span class="line">        .names(<span class="keyword">new</span> String[]&#123;<span class="string">"departureStation"</span>, <span class="string">"arrivalStation"</span>, <span class="string">"price"</span>&#125;)</span><br><span class="line">        .fieldSetMapper(<span class="keyword">new</span> BeanWrapperFieldSetMapper&lt;Ticket&gt;() &#123;&#123;</span><br><span class="line">            setTargetType(Ticket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;&#125;)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动程序，控制台打印日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">37</span>:<span class="number">49.693</span>  INFO <span class="number">86124</span> --- [restartedMain] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=testMultiFileItemReaderJob]] launched with the following parameters: [&#123;run.id=<span class="number">2</span>&#125;]</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">37</span>:<span class="number">49.785</span>  INFO <span class="number">86124</span> --- [restartedMain] o.s.batch.core.job.SimpleStepHandler     : Executing step: [testMultiFileItemReaderStep]</span><br><span class="line">始发站: 合肥; 到达站: 蚌埠; 票价: <span class="number">60.00</span></span><br><span class="line">始发站: 南京; 到达站: 蚌埠; 票价: <span class="number">70.00</span></span><br><span class="line">始发站: 上海; 到达站: 蚌埠; 票价: <span class="number">220.00</span></span><br><span class="line">始发站: 上海; 到达站: 杭州; 票价: <span class="number">75.20</span></span><br><span class="line">始发站: 上海; 到达站: 昆山; 票价: <span class="number">19.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">37</span>:<span class="number">49.944</span>  INFO <span class="number">86124</span> --- [restartedMain] o.s.batch.core.step.AbstractStep         : Step: [testMultiFileItemReaderStep] executed in <span class="number">157</span>ms</span><br></pre></td></tr></table></figure>



<p>示例代码：<a href="https://github.com/donehub/spring-batch-demo" target="_blank" rel="noopener">spring-batch-demo</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Batch 监听器</title>
    <url>/2022/02/02/spring_batch_listeners/</url>
    <content><![CDATA[<hr>
<h4 id="一、Spring-Batch-监听器"><a href="#一、Spring-Batch-监听器" class="headerlink" title="一、Spring Batch 监听器"></a>一、Spring Batch 监听器</h4><p>在批处理过程中，需要对一些关键节点，如启动、结束、抛异常等，添加额外的处理。关注节点，需要借助 Spring Batch 监听器。Spring Batch 提供了两个维度的监听器：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/06/12_20_43_8_objects.png" alt=""></p>
<p><strong>Job 层面：</strong></p>
<ul>
<li><code>JobExecutionListener</code>: 在 Job 执行之前（beforeJob）、之后（afterJob）触发；</li>
</ul>
<p><strong>Step 层面:</strong></p>
<ul>
<li><code>ChunkListener</code>: 在 Chunk 执行之前（beforeChunk）、之后（afterChunk）和异常后（afterChunkError）触发；</li>
<li><code>StepExecutionListener</code>: 在 Step 执行之前（beforeStep）、之后（afterStep）触发；</li>
<li><code>ItemReadListener</code>: 在 Read 执行之前（beforeRead）、之后（afterRead）和异常时（onReadError）触发；</li>
<li><code>ItemProcessListener</code>: 在 Process 执行之前（beforeProcess）、之后（afterProcess）和异常时（onProcessError）触发；</li>
<li><code>ItemWriteListener</code>: 在 Write 执行之前（beforeWrite）、之后（afterWrite）和异常时（onWriteError）触发；</li>
</ul>
<h4 id="二、简单使用"><a href="#二、简单使用" class="headerlink" title="二、简单使用"></a>二、简单使用</h4><p>将文件 <code>ticket.cvs</code> 中的内容，打印出来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">合肥,蚌埠,60.00</span><br><span class="line">南京,蚌埠,70.00</span><br><span class="line">上海,蚌埠,220.00</span><br><span class="line">上海,杭州,75.20</span><br><span class="line">上海,昆山,19.00</span><br></pre></td></tr></table></figure>

<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 始发站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String departureStation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 到达站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String arrivalStation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 票价</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"始发站: %s; 到达站: %s; 票价: %s"</span>, departureStation, arrivalStation, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">testListenerJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testListenerJob"</span>)</span><br><span class="line">        .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">        <span class="comment">// job 监听器</span></span><br><span class="line">        .listener(testJobListener)</span><br><span class="line">        .flow(testListenerStep)</span><br><span class="line">        .end()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"testListenerStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">testListenerStep</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"testListenerStep"</span>)</span><br><span class="line">        <span class="comment">// step 监听器</span></span><br><span class="line">        .listener(testStepListener)</span><br><span class="line">        .transactionManager(transactionManager)</span><br><span class="line">        .&lt;Ticket, Ticket&gt;chunk(<span class="number">2</span>)</span><br><span class="line">        .faultTolerant()</span><br><span class="line">        <span class="comment">// chunk 监听器</span></span><br><span class="line">        .listener(testChunkListener)</span><br><span class="line">        .reader(ticketFileItemReader)</span><br><span class="line">        <span class="comment">// read 监听器</span></span><br><span class="line">        .listener(testReadListener)</span><br><span class="line">        .processor(ticketItemProcessor)</span><br><span class="line">        <span class="comment">// process 监听器</span></span><br><span class="line">        .listener(testProcessListener)</span><br><span class="line">        .writer(list -&gt; list.forEach(System.out::println))</span><br><span class="line">        <span class="comment">// write 监听器</span></span><br><span class="line">        .listener(testWriteListener)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;Ticket&gt; <span class="title">ticketFileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemReaderBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line">        .resource(<span class="keyword">new</span> ClassPathResource(<span class="string">"ticket.csv"</span>))</span><br><span class="line">        .delimited()</span><br><span class="line">        .names(<span class="keyword">new</span> String[]&#123;<span class="string">"departureStation"</span>, <span class="string">"arrivalStation"</span>, <span class="string">"price"</span>&#125;)</span><br><span class="line">        .fieldSetMapper(<span class="keyword">new</span> BeanWrapperFieldSetMapper&lt;Ticket&gt;() &#123;&#123;</span><br><span class="line">            setTargetType(Ticket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;&#125;)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Processor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketItemProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">Ticket</span>, <span class="title">Ticket</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(TicketItemProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Ticket <span class="title">process</span><span class="params">(<span class="keyword">final</span> Ticket ticketSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String departureStation = ticketSource.getDepartureStation();</span><br><span class="line">        <span class="keyword">final</span> String arrivalStation = ticketSource.getArrivalStation();</span><br><span class="line">        <span class="keyword">final</span> BigDecimal price = ticketSource.getPrice();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Ticket ticketTarget = <span class="keyword">new</span> Ticket();</span><br><span class="line">        ticketTarget.setDepartureStation(departureStation);</span><br><span class="line">        ticketTarget.setArrivalStation(arrivalStation);</span><br><span class="line">        ticketTarget.setPrice(price);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ticketTarget;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job Listener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJobListener</span> <span class="keyword">extends</span> <span class="title">JobExecutionListenerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(TestJobListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeJob</span><span class="params">(JobExecution jobExecution)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"before job: &#123;&#125;"</span>, jobExecution.getJobInstance().getJobName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterJob</span><span class="params">(JobExecution jobExecution)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"after job: &#123;&#125;"</span>, jobExecution.getJobInstance().getJobName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Chunk Listener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChunkListener</span> <span class="keyword">extends</span> <span class="title">ChunkListenerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(TestChunkListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeChunk</span><span class="params">(ChunkContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"before chunk: &#123;&#125;"</span>, context.getStepContext().getStepName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterChunk</span><span class="params">(ChunkContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"after chunk: &#123;&#125;"</span>, context.getStepContext().getStepName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterChunkError</span><span class="params">(ChunkContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"after chunk error: &#123;&#125;"</span>, context.getStepContext().getStepName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Read Listener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReadListener</span> <span class="keyword">implements</span> <span class="title">ItemReadListener</span>&lt;<span class="title">Ticket</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(TestReadListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"before read"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRead</span><span class="params">(Ticket item)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"after read: &#123;&#125;"</span>, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReadError</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"read item error: &#123;&#125;"</span>, ex.getMessage(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process Listener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProcessListener</span> <span class="keyword">implements</span> <span class="title">ItemProcessListener</span>&lt;<span class="title">Ticket</span>, <span class="title">Ticket</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(TestProcessListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeProcess</span><span class="params">(Ticket item)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"before process: &#123;&#125;"</span>, item);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterProcess</span><span class="params">(Ticket item, Ticket result)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"after process: &#123;&#125;"</span>, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProcessError</span><span class="params">(Ticket item, Exception e)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"process: &#123;&#125; error: &#123;&#125;"</span>, item, e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Write Listener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWriteListener</span> <span class="keyword">implements</span> <span class="title">ItemWriteListener</span>&lt;<span class="title">Ticket</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(TestWriteListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeWrite</span><span class="params">(List&lt;? extends Ticket&gt; items)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"before write: &#123;&#125;"</span>, items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterWrite</span><span class="params">(List&lt;? extends Ticket&gt; items)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"after write: &#123;&#125;"</span>, items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWriteError</span><span class="params">(Exception exception, List&lt;? extends Ticket&gt; items)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"write item error: &#123;&#125;"</span>, exception.getMessage(), exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动应用，打印日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.774</span>  INFO <span class="number">33680</span> --- [restartedMain] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=testListenerJob]] launched with the following parameters: [&#123;run.id=<span class="number">4</span>&#125;]</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.820</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.listener.job.TestJobListener     : before job: testListenerJob</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.858</span>  INFO <span class="number">33680</span> --- [restartedMain] o.s.batch.core.job.SimpleStepHandler     : Executing step: [testListenerStep]</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.867</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.listener.step.TestStepListener   : before step: testListenerStep</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.889</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.chunk.TestChunkListener        : before chunk: testListenerStep</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.891</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.reader.TestReadListener        : before read</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.905</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.reader.TestReadListener        : after read: 始发站: 合肥; 到达站: 蚌埠; 票价: <span class="number">60.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.906</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.reader.TestReadListener        : before read</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.907</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.reader.TestReadListener        : after read: 始发站: 南京; 到达站: 蚌埠; 票价: <span class="number">70.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.911</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.processor.TestProcessListener  : before process: 始发站: 合肥; 到达站: 蚌埠; 票价: <span class="number">60.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.912</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.processor.TestProcessListener  : after process: 始发站: 合肥; 到达站: 蚌埠; 票价: <span class="number">60.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.912</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.processor.TestProcessListener  : before process: 始发站: 南京; 到达站: 蚌埠; 票价: <span class="number">70.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.912</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.processor.TestProcessListener  : after process: 始发站: 南京; 到达站: 蚌埠; 票价: <span class="number">70.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.913</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.writer.TestWriteListener       : before write: [始发站: 合肥; 到达站: 蚌埠; 票价: <span class="number">60.00</span>, 始发站: 南京; 到达站: 蚌埠; 票价: <span class="number">70.00</span>]</span><br><span class="line">始发站: 合肥; 到达站: 蚌埠; 票价: <span class="number">60.00</span></span><br><span class="line">始发站: 南京; 到达站: 蚌埠; 票价: <span class="number">70.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.914</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.writer.TestWriteListener       : after write: [始发站: 合肥; 到达站: 蚌埠; 票价: <span class="number">60.00</span>, 始发站: 南京; 到达站: 蚌埠; 票价: <span class="number">70.00</span>]</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.928</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.chunk.TestChunkListener        : after chunk: testListenerStep</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.929</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.chunk.TestChunkListener        : before chunk: testListenerStep</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.929</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.reader.TestReadListener        : before read</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.930</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.reader.TestReadListener        : after read: 始发站: 上海; 到达站: 蚌埠; 票价: <span class="number">220.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.930</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.reader.TestReadListener        : before read</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.931</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.reader.TestReadListener        : after read: 始发站: 上海; 到达站: 杭州; 票价: <span class="number">75.20</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.931</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.processor.TestProcessListener  : before process: 始发站: 上海; 到达站: 蚌埠; 票价: <span class="number">220.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.931</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.processor.TestProcessListener  : after process: 始发站: 上海; 到达站: 蚌埠; 票价: <span class="number">220.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.931</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.processor.TestProcessListener  : before process: 始发站: 上海; 到达站: 杭州; 票价: <span class="number">75.20</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.932</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.processor.TestProcessListener  : after process: 始发站: 上海; 到达站: 杭州; 票价: <span class="number">75.20</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.932</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.writer.TestWriteListener       : before write: [始发站: 上海; 到达站: 蚌埠; 票价: <span class="number">220.00</span>, 始发站: 上海; 到达站: 杭州; 票价: <span class="number">75.20</span>]</span><br><span class="line">始发站: 上海; 到达站: 蚌埠; 票价: <span class="number">220.00</span></span><br><span class="line">始发站: 上海; 到达站: 杭州; 票价: <span class="number">75.20</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.932</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.writer.TestWriteListener       : after write: [始发站: 上海; 到达站: 蚌埠; 票价: <span class="number">220.00</span>, 始发站: 上海; 到达站: 杭州; 票价: <span class="number">75.20</span>]</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.943</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.chunk.TestChunkListener        : after chunk: testListenerStep</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.944</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.chunk.TestChunkListener        : before chunk: testListenerStep</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.944</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.reader.TestReadListener        : before read</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.945</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.reader.TestReadListener        : after read: 始发站: 上海; 到达站: 昆山; 票价: <span class="number">19.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.945</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.reader.TestReadListener        : before read</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.945</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.processor.TestProcessListener  : before process: 始发站: 上海; 到达站: 昆山; 票价: <span class="number">19.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.945</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.processor.TestProcessListener  : after process: 始发站: 上海; 到达站: 昆山; 票价: <span class="number">19.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.946</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.writer.TestWriteListener       : before write: [始发站: 上海; 到达站: 昆山; 票价: <span class="number">19.00</span>]</span><br><span class="line">始发站: 上海; 到达站: 昆山; 票价: <span class="number">19.00</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.946</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.writer.TestWriteListener       : after write: [始发站: 上海; 到达站: 昆山; 票价: <span class="number">19.00</span>]</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.959</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.l.chunk.TestChunkListener        : after chunk: testListenerStep</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.959</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.listener.step.TestStepListener   : after step: testListenerStep</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.962</span>  INFO <span class="number">33680</span> --- [restartedMain] o.s.batch.core.step.AbstractStep         : Step: [testListenerStep] executed in <span class="number">104</span>ms</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.978</span>  INFO <span class="number">33680</span> --- [restartedMain] c.e.s.c.listener.job.TestJobListener     : after job: testListenerJob</span><br><span class="line"><span class="number">2022</span>-<span class="number">06</span>-<span class="number">12</span> <span class="number">19</span>:<span class="number">31</span>:<span class="number">13.997</span>  INFO <span class="number">33680</span> --- [restartedMain] o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=testListenerJob]] completed with the following parameters: [&#123;run.id=<span class="number">4</span>&#125;] and the following status: [COMPLETED] in <span class="number">178</span>ms</span><br></pre></td></tr></table></figure>

<p>从日志可以看出：</p>
<ul>
<li><p>Job 、Step 监听器贯穿任务的始终；</p>
</li>
<li><p>每一个 chunk 中，执行 2 次读、2 次处理、1 次写；</p>
</li>
<li><p>每一次 read 过程，触发 beforeRead()、afterRead()；</p>
</li>
<li><p>每一次 process 过程，触发  beforeProcess()、afterProcess()；</p>
</li>
<li><p>每一次 write 过程，触发 beforeWrite()、afterWrite()；</p>
</li>
</ul>
<p>示例代码：<a href="https://github.com/donehub/spring-batch-demo" target="_blank" rel="noopener">spring-batch-demo</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Batch 数据输出器</title>
    <url>/2022/02/03/spring_batch_item_writers/</url>
    <content><![CDATA[<hr>
<h4 id="一、Spring-Batch-数据输出器"><a href="#一、Spring-Batch-数据输出器" class="headerlink" title="一、Spring Batch 数据输出器"></a>一、Spring Batch 数据输出器</h4><p>Spring Batch 的数据输出器，是通过接口 <code>ItemWriter</code> 来实现的。针对常用的数据输出场景，Spring Batch 提供了丰富的组件支持（<a href="https://docs.spring.io/spring-batch/docs/current/reference/html/appendix.html#itemWritersAppendix" target="_blank" rel="noopener">查看所有组件</a>），本文介绍最常用的五个组件：</p>
<ul>
<li><code>FlatFileItemWriter</code>：输出文本数据；</li>
<li><code>JdbcBatchItemWriter</code>：输出数据到数据库；</li>
<li><code>StaxEventItemWriter</code>：输出 <code>XML</code> 文件数据；</li>
<li><code>JsonFileItemWriter</code>：输出 <code>JSON</code> 文件数据；</li>
<li><code>ClassifierCompositeItemWriter</code>：输出多文本数据；</li>
</ul>
<h4 id="二、简单使用"><a href="#二、简单使用" class="headerlink" title="二、简单使用"></a>二、简单使用</h4><p>实体类 <code>Ticket.class</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 始发站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String departureStation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 到达站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String arrivalStation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 票价</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"始发站: %s; 到达站: %s; 票价: %s"</span>, departureStation, arrivalStation, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文件 <code>ticket.csv</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">合肥,蚌埠,60.00</span><br><span class="line">南京,蚌埠,70.00</span><br><span class="line">上海,蚌埠,220.00</span><br><span class="line">上海,杭州,75.20</span><br><span class="line">上海,昆山,19.00</span><br></pre></td></tr></table></figure>

<h5 id="2-1-FlatFileItemWriter-文本数据输出"><a href="#2-1-FlatFileItemWriter-文本数据输出" class="headerlink" title="2.1 FlatFileItemWriter-文本数据输出"></a>2.1 FlatFileItemWriter-文本数据输出</h5><p>将 <code>ticket.csv</code> 中的信息，转换为 JSON 字符串，输出到文件 <code>ticket_output.txt</code> 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">testFlatFileItemWriterJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testFlatFileItemWriterJob"</span>)</span><br><span class="line">        .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">        .flow(testFlatFileItemWriterStep)</span><br><span class="line">        .end()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"testFlatFileItemWriterStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">testFlatFileItemWriterStep</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"testFlatFileItemWriterStep"</span>)</span><br><span class="line">        .transactionManager(transactionManager)</span><br><span class="line">        .reader(ticketFileItemReader)</span><br><span class="line">        .writer(ticketFileItemWriter)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;Ticket&gt; <span class="title">ticketFileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemReaderBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line">        .resource(<span class="keyword">new</span> ClassPathResource(<span class="string">"ticket.csv"</span>))</span><br><span class="line">        .delimited()</span><br><span class="line">        .names(<span class="keyword">new</span> String[]&#123;<span class="string">"departureStation"</span>, <span class="string">"arrivalStation"</span>, <span class="string">"price"</span>&#125;)</span><br><span class="line">        .fieldSetMapper(<span class="keyword">new</span> BeanWrapperFieldSetMapper&lt;Ticket&gt;() &#123;&#123;</span><br><span class="line">            setTargetType(Ticket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;&#125;)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Writer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketFileItemWriter"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemWriter&lt;Ticket&gt; <span class="title">ticketFileItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 聚合器; JSON 序列化</span></span><br><span class="line">    LineAggregator&lt;Ticket&gt; aggregator = item -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(item);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"parse object to json error: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemWriterBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketFileItemWriter"</span>)</span><br><span class="line">        .resource(<span class="keyword">new</span> FileSystemResource(<span class="string">"ticket_output.txt"</span>))</span><br><span class="line">        .lineAggregator(aggregator)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出文本数据，要求目标数据的格式为字符串，因此需要将 <code>POJO</code> 按照一定规则聚合成字符串。Spring Batch 已实现聚合器 <code>LineAggregator</code> ：<code>PassThroughLineAggregator</code>（打印 <code>POJO</code>）、<code>RecursiveCollectionLineAggregator</code>（打印 <code>POJO</code> 列表）、<code>DelimitedLineAggregator</code>（分隔符拼接 <code>POJO</code> 字段值）、<code>FormatterLineAggregator</code>（格式化 <code>POJO</code> 字段值）。当然，我们也可以手动实现聚合器，例如示例代码中，将 <code>POJO</code> 转换为 JSON 格式。</p>
<p>启动应用，生成文件 <code>ticket_output.txt</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;departureStation&quot;:&quot;合肥&quot;,&quot;arrivalStation&quot;:&quot;蚌埠&quot;,&quot;price&quot;:60.00&#125;</span><br><span class="line">&#123;&quot;departureStation&quot;:&quot;南京&quot;,&quot;arrivalStation&quot;:&quot;蚌埠&quot;,&quot;price&quot;:70.00&#125;</span><br><span class="line">&#123;&quot;departureStation&quot;:&quot;上海&quot;,&quot;arrivalStation&quot;:&quot;蚌埠&quot;,&quot;price&quot;:220.00&#125;</span><br><span class="line">&#123;&quot;departureStation&quot;:&quot;上海&quot;,&quot;arrivalStation&quot;:&quot;杭州&quot;,&quot;price&quot;:75.20&#125;</span><br><span class="line">&#123;&quot;departureStation&quot;:&quot;上海&quot;,&quot;arrivalStation&quot;:&quot;昆山&quot;,&quot;price&quot;:19.00&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-JdbcBatchItemWriter-数据库数据输出"><a href="#2-2-JdbcBatchItemWriter-数据库数据输出" class="headerlink" title="2.2 JdbcBatchItemWriter-数据库数据输出"></a>2.2 JdbcBatchItemWriter-数据库数据输出</h5><p>将文件 <code>student.cvs</code> 中的信息（内容如下），导入到 MySQL 数据表 <code>student</code> 中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,张三,合肥</span><br><span class="line">2,李四,蚌埠</span><br><span class="line">3,王二,南京</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">testDatabaseItemWriterJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testDatabaseItemWriterJob"</span>)</span><br><span class="line">        .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">        .flow(testDatabaseItemWriterStep)</span><br><span class="line">        .end()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"testDatabaseItemWriterStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">testDatabaseItemWriterStep</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"testDatabaseItemWriterStep"</span>)</span><br><span class="line">        .transactionManager(transactionManager)</span><br><span class="line">        .&lt;Student, Student&gt;chunk(<span class="number">10</span>)</span><br><span class="line">        .reader(studentFileItemReader)</span><br><span class="line">        .writer(studentItemWriter)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"studentFileItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;Student&gt; <span class="title">studentFileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemReaderBuilder&lt;Student&gt;()</span><br><span class="line">        .name(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line">        .resource(<span class="keyword">new</span> ClassPathResource(<span class="string">"student.csv"</span>))</span><br><span class="line">        .delimited()</span><br><span class="line">        .names(<span class="keyword">new</span> String[]&#123;<span class="string">"studentId"</span>, <span class="string">"name"</span>, <span class="string">"address"</span>&#125;)</span><br><span class="line">        .fieldSetMapper(<span class="keyword">new</span> BeanWrapperFieldSetMapper&lt;Student&gt;() &#123;&#123;</span><br><span class="line">            setTargetType(Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;&#125;)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Writer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"studentItemWriter"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> JdbcBatchItemWriter&lt;Student&gt; <span class="title">studentItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JdbcBatchItemWriterBuilder&lt;Student&gt;()</span><br><span class="line">        .itemSqlParameterSourceProvider(<span class="keyword">new</span> BeanPropertyItemSqlParameterSourceProvider&lt;&gt;())</span><br><span class="line">        .sql(<span class="string">"INSERT INTO student_target (student_id, name, address) VALUES (:studentId, :name, :address)"</span>)</span><br><span class="line">        .dataSource(batchDemoDB)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MySQL 数据源配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"batchDemoDB"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.batch-demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DataSourceBuilder.create().type(HikariDataSource<span class="class">.<span class="keyword">class</span>).<span class="title">build</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动应用，文件中的数据已导入表 <code>student</code>：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/06/3_18_46_44_database_writer_result.png" alt=""></p>
<h5 id="2-3-StaxEventItemWriter-XML-文件数据输出"><a href="#2-3-StaxEventItemWriter-XML-文件数据输出" class="headerlink" title="2.3 StaxEventItemWriter-XML 文件数据输出"></a>2.3 StaxEventItemWriter-XML 文件数据输出</h5><p>将 <code>ticket.csv</code> 中的信息，输出到文件 <code>ticket_output.xml</code> 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">testXmlItemWriterJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testXmlItemWriterJob"</span>)</span><br><span class="line">        .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">        .flow(testXmlItemWriterStep)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"testXmlItemWriterStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">testXmlItemWriterStep</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"testXmlItemWriterStep"</span>)</span><br><span class="line">        .transactionManager(transactionManager)</span><br><span class="line">        .&lt;Ticket, Ticket&gt;chunk(<span class="number">10</span>)</span><br><span class="line">        .reader(ticketFileItemReader)</span><br><span class="line">        .writer(ticketXmlItemWriter)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;Ticket&gt; <span class="title">ticketFileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemReaderBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line">        .resource(<span class="keyword">new</span> ClassPathResource(<span class="string">"ticket.csv"</span>))</span><br><span class="line">        .delimited()</span><br><span class="line">        .names(<span class="keyword">new</span> String[]&#123;<span class="string">"departureStation"</span>, <span class="string">"arrivalStation"</span>, <span class="string">"price"</span>&#125;)</span><br><span class="line">        .fieldSetMapper(<span class="keyword">new</span> BeanWrapperFieldSetMapper&lt;Ticket&gt;() &#123;&#123;</span><br><span class="line">            setTargetType(Ticket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;&#125;)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Writer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketXmlItemWriter"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> StaxEventItemWriter&lt;Ticket&gt; <span class="title">ticketXmlItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StaxEventItemWriterBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketXmlItemWriter"</span>)</span><br><span class="line">        .marshaller(ticketMarshaller)</span><br><span class="line">        .resource(<span class="keyword">new</span> FileSystemResource(<span class="string">"ticket_output.xml"</span>))</span><br><span class="line">        .rootTagName(<span class="string">"tickets"</span>)</span><br><span class="line">        .overwriteOutput(<span class="keyword">true</span>)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 映射器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketMarshaller"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> XStreamMarshaller <span class="title">ticketMarshaller</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, Class&lt;Ticket&gt;&gt; aliases = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">    aliases.put(<span class="string">"ticket"</span>, Ticket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    XStreamMarshaller marshaller = <span class="keyword">new</span> XStreamMarshaller();</span><br><span class="line">    marshaller.setAliases(aliases);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> marshaller;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动应用，生成文件 <code>ticket_output.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="tag">&lt;<span class="name">tickets</span>&gt;</span><span class="tag">&lt;<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>合肥<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span><span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>蚌埠<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span><span class="tag">&lt;<span class="name">price</span>&gt;</span>60.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span><span class="tag">&lt;/<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span><span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>蚌埠<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span><span class="tag">&lt;<span class="name">price</span>&gt;</span>70.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span><span class="tag">&lt;/<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span><span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>蚌埠<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span><span class="tag">&lt;<span class="name">price</span>&gt;</span>220.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span><span class="tag">&lt;/<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span><span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span><span class="tag">&lt;<span class="name">price</span>&gt;</span>75.20<span class="tag">&lt;/<span class="name">price</span>&gt;</span><span class="tag">&lt;/<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span><span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>昆山<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span><span class="tag">&lt;<span class="name">price</span>&gt;</span>19.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span><span class="tag">&lt;/<span class="name">ticket</span>&gt;</span><span class="tag">&lt;/<span class="name">tickets</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-4-JsonFileItemWriter-JSON文件数据输出"><a href="#2-4-JsonFileItemWriter-JSON文件数据输出" class="headerlink" title="2.4 JsonFileItemWriter-JSON文件数据输出"></a>2.4 JsonFileItemWriter-JSON文件数据输出</h5><p>将 <code>ticket.csv</code> 中的信息，输出到文件 <code>ticket_output.json</code> 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">testJsonItemWriterJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testJsonItemWriterJob"</span>)</span><br><span class="line">        .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">        .flow(testJsonItemWriterStep)</span><br><span class="line">        .end()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"testJsonItemWriterStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">testJsonItemWriterStep</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"testJsonItemWriterStep"</span>)</span><br><span class="line">        .transactionManager(transactionManager)</span><br><span class="line">        .&lt;Ticket, Ticket&gt;chunk(<span class="number">10</span>)</span><br><span class="line">        .reader(ticketFileItemReader)</span><br><span class="line">        .writer(ticketJsonItemWriter)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;Ticket&gt; <span class="title">ticketFileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemReaderBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line">        .resource(<span class="keyword">new</span> ClassPathResource(<span class="string">"ticket.csv"</span>))</span><br><span class="line">        .delimited()</span><br><span class="line">        .names(<span class="keyword">new</span> String[]&#123;<span class="string">"departureStation"</span>, <span class="string">"arrivalStation"</span>, <span class="string">"price"</span>&#125;)</span><br><span class="line">        .fieldSetMapper(<span class="keyword">new</span> BeanWrapperFieldSetMapper&lt;Ticket&gt;() &#123;&#123;</span><br><span class="line">            setTargetType(Ticket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;&#125;)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Writer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketJsonItemWriter"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonFileItemWriter&lt;Ticket&gt; <span class="title">ticketJsonItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonFileItemWriterBuilder&lt;Ticket&gt;()</span><br><span class="line">        .jsonObjectMarshaller(<span class="keyword">new</span> JacksonJsonObjectMarshaller&lt;&gt;())</span><br><span class="line">        .resource(<span class="keyword">new</span> FileSystemResource(<span class="string">"ticket_output.json"</span>))</span><br><span class="line">        .name(<span class="string">"ticketJsonItemWriter"</span>)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动应用，生成文件 <code>ticket_output.json</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line"> &#123;<span class="attr">"departureStation"</span>:<span class="string">"合肥"</span>,<span class="attr">"arrivalStation"</span>:<span class="string">"蚌埠"</span>,<span class="attr">"price"</span>:<span class="number">60.00</span>&#125;,</span><br><span class="line"> &#123;<span class="attr">"departureStation"</span>:<span class="string">"南京"</span>,<span class="attr">"arrivalStation"</span>:<span class="string">"蚌埠"</span>,<span class="attr">"price"</span>:<span class="number">70.00</span>&#125;,</span><br><span class="line"> &#123;<span class="attr">"departureStation"</span>:<span class="string">"上海"</span>,<span class="attr">"arrivalStation"</span>:<span class="string">"蚌埠"</span>,<span class="attr">"price"</span>:<span class="number">220.00</span>&#125;,</span><br><span class="line"> &#123;<span class="attr">"departureStation"</span>:<span class="string">"上海"</span>,<span class="attr">"arrivalStation"</span>:<span class="string">"杭州"</span>,<span class="attr">"price"</span>:<span class="number">75.20</span>&#125;,</span><br><span class="line"> &#123;<span class="attr">"departureStation"</span>:<span class="string">"上海"</span>,<span class="attr">"arrivalStation"</span>:<span class="string">"昆山"</span>,<span class="attr">"price"</span>:<span class="number">19.00</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h5 id="2-5-ClassifierCompositeItemWriter-输出多文本数据"><a href="#2-5-ClassifierCompositeItemWriter-输出多文本数据" class="headerlink" title="2.5 ClassifierCompositeItemWriter-输出多文本数据"></a>2.5 ClassifierCompositeItemWriter-输出多文本数据</h5><p>将文件 <code>ticket.csv</code> 中始发站为<strong>上海</strong>的车票信息输出到文本中，其余的输出到 XML 文件中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">testMultiFileItemWriterJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"testMultiFileItemWriterJob"</span>)</span><br><span class="line">        .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">        .flow(testMultiFileItemWriterStep)</span><br><span class="line">        .end()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"testMultiFileItemWriterStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">testMultiFileItemWriterStep</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"testMultiFileItemWriterStep"</span>)</span><br><span class="line">        .transactionManager(transactionManager)</span><br><span class="line">        .&lt;Ticket, Ticket&gt;chunk(<span class="number">10</span>)</span><br><span class="line">        .reader(ticketFileItemReader)</span><br><span class="line">        .writer(ticketClassifierMultiFileItemWriter)</span><br><span class="line">        .stream(ticketFileItemWriter)</span><br><span class="line">        .stream(ticketXmlItemWriter)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;Ticket&gt; <span class="title">ticketFileItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemReaderBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketFileItemReader"</span>)</span><br><span class="line">        .resource(<span class="keyword">new</span> ClassPathResource(<span class="string">"ticket.csv"</span>))</span><br><span class="line">        .delimited()</span><br><span class="line">        .names(<span class="keyword">new</span> String[]&#123;<span class="string">"departureStation"</span>, <span class="string">"arrivalStation"</span>, <span class="string">"price"</span>&#125;)</span><br><span class="line">        .fieldSetMapper(<span class="keyword">new</span> BeanWrapperFieldSetMapper&lt;Ticket&gt;() &#123;&#123;</span><br><span class="line">            setTargetType(Ticket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;&#125;)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Classifier Writer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketClassifierMultiFileItemWriter"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ClassifierCompositeItemWriter&lt;Ticket&gt; <span class="title">ticketClassifierMultiFileItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ClassifierCompositeItemWriter&lt;Ticket&gt; writer = <span class="keyword">new</span> ClassifierCompositeItemWriter&lt;&gt;();</span><br><span class="line">    writer.setClassifier((Classifier&lt;Ticket, ItemWriter&lt;? <span class="keyword">super</span> Ticket&gt;&gt;) ticket -&gt; &#123;</span><br><span class="line">        <span class="comment">// 始发站是上海的, 输出到文本中, 否则输出到 XML 文件中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"上海"</span>.equals(ticket.getDepartureStation()) ? ticketFileItemWriter() : ticketXmlItemWriter();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> writer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文本-Writer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketFileItemWriter"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemWriter&lt;Ticket&gt; <span class="title">ticketFileItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 聚合器; JSON 序列化</span></span><br><span class="line">    LineAggregator&lt;Ticket&gt; aggregator = item -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(item);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"parse object to json error: &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemWriterBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketFileItemWriter"</span>)</span><br><span class="line">        .resource(<span class="keyword">new</span> FileSystemResource(<span class="string">"ticket_output.txt"</span>))</span><br><span class="line">        .lineAggregator(aggregator)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * XML-Writer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketXmlItemWriter"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> StaxEventItemWriter&lt;Ticket&gt; <span class="title">ticketXmlItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StaxEventItemWriterBuilder&lt;Ticket&gt;()</span><br><span class="line">        .name(<span class="string">"ticketXmlItemWriter"</span>)</span><br><span class="line">        .marshaller(ticketMarshaller)</span><br><span class="line">        .resource(<span class="keyword">new</span> FileSystemResource(<span class="string">"ticket_output.xml"</span>))</span><br><span class="line">        .rootTagName(<span class="string">"tickets"</span>)</span><br><span class="line">        .overwriteOutput(<span class="keyword">true</span>)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 映射器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"ticketMarshaller"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> XStreamMarshaller <span class="title">ticketMarshaller</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, Class&lt;Ticket&gt;&gt; aliases = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">    aliases.put(<span class="string">"ticket"</span>, Ticket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    XStreamMarshaller marshaller = <span class="keyword">new</span> XStreamMarshaller();</span><br><span class="line">    marshaller.setAliases(aliases);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> marshaller;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动应用，生成文件如下：</p>
<p><code>ticket_output.txt</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;departureStation&quot;:&quot;上海&quot;,&quot;arrivalStation&quot;:&quot;蚌埠&quot;,&quot;price&quot;:220.00&#125;</span><br><span class="line">&#123;&quot;departureStation&quot;:&quot;上海&quot;,&quot;arrivalStation&quot;:&quot;杭州&quot;,&quot;price&quot;:75.20&#125;</span><br><span class="line">&#123;&quot;departureStation&quot;:&quot;上海&quot;,&quot;arrivalStation&quot;:&quot;昆山&quot;,&quot;price&quot;:19.00&#125;</span><br></pre></td></tr></table></figure>

<p><code>ticket_output.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="tag">&lt;<span class="name">tickets</span>&gt;</span><span class="tag">&lt;<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>合肥<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span><span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>蚌埠<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span><span class="tag">&lt;<span class="name">price</span>&gt;</span>60.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span><span class="tag">&lt;/<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">ticket</span>&gt;</span><span class="tag">&lt;<span class="name">departureStation</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">departureStation</span>&gt;</span><span class="tag">&lt;<span class="name">arrivalStation</span>&gt;</span>蚌埠<span class="tag">&lt;/<span class="name">arrivalStation</span>&gt;</span><span class="tag">&lt;<span class="name">price</span>&gt;</span>70.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span><span class="tag">&lt;/<span class="name">ticket</span>&gt;</span><span class="tag">&lt;/<span class="name">tickets</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>示例代码：<a href="https://github.com/donehub/spring-batch-demo" target="_blank" rel="noopener">spring-batch-demo</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Batch 性能调优-多线程Step</title>
    <url>/2022/02/04/spring_batch_optimization_multi_thread_step/</url>
    <content><![CDATA[<hr>
<h4 id="一、Spring-Batch-性能优化指标"><a href="#一、Spring-Batch-性能优化指标" class="headerlink" title="一、Spring Batch 性能优化指标"></a>一、Spring Batch 性能优化指标</h4><p>Spring Batch 是一款伸缩性非常好的批处理工具，既可以处理简单的任务，也可以处理复杂的、高容量的任务。在性能调优方面，Spring Batch 提供了丰富的接口支持，各项优化指标可归纳如下：</p>
<ul>
<li>多线程 <code>Step</code>：由独立线程执行提交块（a chunk of items）的输入、处理和输出过程；</li>
<li><a href="https://takeshell.com/2022/02/08/spring_batch_optimization_parallel_step/" target="_blank" rel="noopener">并行化 <code>Step</code></a>：对于可并行处理的 <code>Step</code>，交由不同的线程去处理；</li>
<li><a href="https://takeshell.com/2022/02/15/spring_batch_optimization_partition_step/" target="_blank" rel="noopener">分片化 <code>Step</code></a>：通过 <code>SPI(Serial Peripheral Interface)</code>，对 <code>Step</code> 分片执行；</li>
<li>远程组块：对于输入无性能瓶颈，但处理和输出有性能瓶颈的任务，交由远程组块执行；</li>
</ul>
<p>详见<a href="https://docs.spring.io/spring-batch/docs/current/reference/html/scalability.html#scalability" target="_blank" rel="noopener">Spring文档</a>。</p>
<h4 id="二、多线程-Step-配置"><a href="#二、多线程-Step-配置" class="headerlink" title="二、多线程 Step 配置"></a>二、多线程 <code>Step</code> 配置</h4><p>Spring Batch 执行一个 <code>Step</code>，会按照 <code>chunk</code> 配置的数量分批次提交。对于多线程 <code>Step</code>，由线程池去处理任务批次。因此，每个 <code>chunk</code> 都不用串行等待，这大大地提高了批处理性能。</p>
<p>配置多线程 <code>Step</code> 非常简单，可以通过 <code>xml</code> 或接口来配置。以接口配置为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">sampleStep</span><span class="params">(TaskExecutor taskExecutor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.stepBuilderFactory.get(<span class="string">"sampleStep"</span>)</span><br><span class="line">        .&lt;String, String&gt;chunk(<span class="number">10</span>)</span><br><span class="line">        .reader(itemReader())</span><br><span class="line">        .writer(itemWriter())</span><br><span class="line">        .taskExecutor(taskExecutor)</span><br><span class="line">        <span class="comment">// 节流配置, 不要超过线程池的最大线程数量</span></span><br><span class="line">        .throttleLimit(<span class="number">20</span>)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此外，在配置多线程 <code>Step</code> 时，我们需要考虑得更多：</p>
<ul>
<li>线程池：推荐使用 <code>Spring</code> 线程池 <code>ThreadPoolTaskExecutor</code>，兼容性好；</li>
<li>线程安全：输入器和输出器必须是线程安全的，否则可能会导致重复任务、脏数据等问题；</li>
<li>框架节流：Spring Batch 自带节流器，默认最多可处理 4 个小任务，因此需要重新配置；</li>
</ul>
<h4 id="三、批处理配置"><a href="#三、批处理配置" class="headerlink" title="三、批处理配置"></a>三、批处理配置</h4><p>通过 Spring Batch 应用，迁移 100 万条数据。相关配置如下：</p>
<h5 id="3-1-数据读取器"><a href="#3-1-数据读取器" class="headerlink" title="3.1 数据读取器"></a>3.1 数据读取器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.reader.rowmapper.StudentRowMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcPagingItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.builder.JdbcPagingItemReaderBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.support.MySqlPagingQueryProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomItemReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchDemoDB"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource batchDemoDB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"studentItemReader"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcPagingItemReader&lt;Student&gt; <span class="title">studentItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MySqlPagingQueryProvider queryProvider = <span class="keyword">new</span> MySqlPagingQueryProvider();</span><br><span class="line">        queryProvider.setSelectClause(<span class="string">"student_id, name, address"</span>);</span><br><span class="line">        queryProvider.setFromClause(<span class="string">"from student_source"</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Order&gt; sortKeys = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        sortKeys.put(<span class="string">"student_id"</span>, Order.ASCENDING);</span><br><span class="line">        queryProvider.setSortKeys(sortKeys);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcPagingItemReaderBuilder&lt;Student&gt;()</span><br><span class="line">                .name(<span class="string">"studentItemReader"</span>)</span><br><span class="line">                .dataSource(batchDemoDB)</span><br><span class="line">                .fetchSize(<span class="number">1000</span>)</span><br><span class="line">                .rowMapper(<span class="keyword">new</span> StudentRowMapper())</span><br><span class="line">                .queryProvider(queryProvider)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-数据映射器"><a href="#3-2-数据映射器" class="headerlink" title="3.2 数据映射器"></a>3.2 数据映射器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setStudentId(rs.getLong(<span class="string">"student_id"</span>));</span><br><span class="line">        student.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">        student.setAddress(rs.getString(<span class="string">"address"</span>));</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-数据处理器"><a href="#3-3-数据处理器" class="headerlink" title="3.3 数据处理器"></a>3.3 数据处理器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentItemProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">Student</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(StudentItemProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">process</span><span class="params">(<span class="keyword">final</span> Student studentSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Long studentId = studentSource.getStudentId();</span><br><span class="line">        <span class="keyword">final</span> String name = studentSource.getName();</span><br><span class="line">        <span class="keyword">final</span> String address = studentSource.getAddress();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Student studentTarget = <span class="keyword">new</span> Student();</span><br><span class="line">        studentTarget.setStudentId(studentId);</span><br><span class="line">        studentTarget.setName(name);</span><br><span class="line">        studentTarget.setAddress(address);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"Converting (&#123;&#125;) into (&#123;&#125;)"</span>, studentSource, studentTarget);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentTarget;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-4-数据写入器"><a href="#3-4-数据写入器" class="headerlink" title="3.4 数据写入器"></a>3.4 数据写入器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomItemWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchDemoDB"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource batchDemoDB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"studentItemWriter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcBatchItemWriter&lt;Student&gt; <span class="title">studentItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcBatchItemWriterBuilder&lt;Student&gt;()</span><br><span class="line">                .itemSqlParameterSourceProvider(<span class="keyword">new</span> BeanPropertyItemSqlParameterSourceProvider&lt;&gt;())</span><br><span class="line">                .sql(<span class="string">"INSERT INTO student_target (student_id, name, address) VALUES (:studentId, :name, :address)"</span>)</span><br><span class="line">                .dataSource(batchDemoDB)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-5-Step-配置-单线程"><a href="#3-5-Step-配置-单线程" class="headerlink" title="3.5 Step 配置-单线程"></a>3.5 Step 配置-单线程</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.processor.StudentItemProcessor;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcPagingItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchProcessStudentStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"studentItemReader"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcPagingItemReader&lt;Student&gt; studentItemReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"studentItemWriter"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcBatchItemWriter&lt;Student&gt; studentItemWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentItemProcessor studentItemProcessor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"batchProcessStudentStep1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step1"</span>)</span><br><span class="line">                .&lt;Student, Student&gt;chunk(<span class="number">2000</span>)</span><br><span class="line">                .reader(studentItemReader)</span><br><span class="line">                .processor(studentItemProcessor)</span><br><span class="line">                .writer(studentItemWriter)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-6-Step-配置-多线程"><a href="#3-6-Step-配置-多线程" class="headerlink" title="3.6 Step 配置-多线程"></a>3.6 Step 配置-多线程</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.processor.StudentItemProcessor;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcPagingItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.springbatchdemo.config.ExecutorConfig.TASK_EXECUTOR;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchProcessStudentStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"studentItemReader"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcPagingItemReader&lt;Student&gt; studentItemReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"studentItemWriter"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcBatchItemWriter&lt;Student&gt; studentItemWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentItemProcessor studentItemProcessor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = TASK_EXECUTOR)</span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskExecutor taskExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"batchProcessStudentStep1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step1"</span>)</span><br><span class="line">                .&lt;Student, Student&gt;chunk(<span class="number">2000</span>)</span><br><span class="line">                .reader(studentItemReader)</span><br><span class="line">                .processor(studentItemProcessor)</span><br><span class="line">                .writer(studentItemWriter)</span><br><span class="line">                .taskExecutor(taskExecutor)</span><br><span class="line">                .throttleLimit(<span class="number">30</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-7-Job-配置"><a href="#3-7-Job-配置" class="headerlink" title="3.7 Job 配置"></a>3.7 Job 配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.listener.BatchProcessStudentCompletionListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.launch.support.RunIdIncrementer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchProcessStudentJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchProcessStudentStep1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Step batchProcessStudentStep1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BatchProcessStudentCompletionListener batchProcessStudentCompletionListener;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">transferStudentJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"transferStudentJob"</span>)</span><br><span class="line">                .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">                .listener(batchProcessStudentCompletionListener)</span><br><span class="line">                .flow(batchProcessStudentStep1)</span><br><span class="line">                .end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-8-MySQL-数据源配置"><a href="#3-8-MySQL-数据源配置" class="headerlink" title="3.8 MySQL 数据源配置"></a>3.8 <code>MySQL</code> 数据源配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"batchDemoDB"</span>)</span><br><span class="line">    <span class="comment">// 数据源配置参数识别前缀, 根据具体配置来设定</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.batch-demo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用 SpringBoot 默认的数据源 HikariDataSource</span></span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().type(HikariDataSource<span class="class">.<span class="keyword">class</span>).<span class="title">build</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-9-线程池配置"><a href="#3-9-线程池配置" class="headerlink" title="3.9 线程池配置"></a>3.9 线程池配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_EXECUTOR = <span class="string">"taskExecutor"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(TASK_EXECUTOR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">taskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">20</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">10</span>);</span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"common-async-executor-"</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">        executor.setAwaitTerminationSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="四、批处理性能测试"><a href="#四、批处理性能测试" class="headerlink" title="四、批处理性能测试"></a>四、批处理性能测试</h4><h5 id="4-1-单线程-Step"><a href="#4-1-单线程-Step" class="headerlink" title="4.1 单线程 Step"></a>4.1 单线程 Step</h5><p>启动批处理任务，同步 100 万条数据。执行结果如下：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/2_15_30_43_single_thred_step_performance.png" alt=""></p>
<p>总耗时：313 秒</p>
<h5 id="4-2-多线程-Step"><a href="#4-2-多线程-Step" class="headerlink" title="4.2 多线程 Step"></a>4.2 多线程 Step</h5><p>启动批处理任务，同步 100 万条数据。执行结果如下：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/2_15_42_8_multi_thred_step_performance.png" alt=""></p>
<p>总耗时：81 秒</p>
<hr>
<p>性能提升超<strong>300%</strong></p>
<h4 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h4><p>多线程 <code>Step</code> 将 <code>chunk</code> 任务交给线程池异步执行，可以显著地提升批处理的性能。但在多线程场景下，我们要了解 Spring Batch 的基础架构，避免并发导致的重复任务、脏数据等问题。</p>
<p>示例代码：<a href="https://github.com/donehub/spring-batch-demo" target="_blank" rel="noopener">spring-batch-demo</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 对象拷贝机制</title>
    <url>/2021/11/11/spring_bean_util_copy/</url>
    <content><![CDATA[<hr>
<h4 id="一、-Spring-对象拷贝的具体实现"><a href="#一、-Spring-对象拷贝的具体实现" class="headerlink" title="一、 Spring 对象拷贝的具体实现"></a>一、 <code>Spring</code> 对象拷贝的具体实现</h4><p><code>Spring</code> 对象拷贝，基于反射和内省，将源对象字段值装填到目标对象字段上。主要分以下两步：</p>
<ul>
<li>通过内省，获取源对象和目标对象的属性描述器；</li>
<li>通过反射，解析源属性值，赋值到目标属性中；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring 对象拷贝基础方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> source           源对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target           目标对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> editable         限制目标 Class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ignoreProperties 需要忽略的拷贝字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyProperties</span><span class="params">(Object source, Object target, Class&lt;?&gt; editable,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   String... ignoreProperties)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Assert.notNull(source, <span class="string">"Source must not be null"</span>);</span><br><span class="line">    Assert.notNull(target, <span class="string">"Target must not be null"</span>);</span><br><span class="line">    </span><br><span class="line">    Class&lt;?&gt; actualEditable = target.getClass();</span><br><span class="line">    <span class="keyword">if</span> (editable != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 target 不是 editable 的实例, 则中断拷贝</span></span><br><span class="line">        <span class="keyword">if</span> (!editable.isInstance(target)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Target class ["</span> + target.getClass().getName() +<span class="string">"] not assignable to Editable class ["</span> + editable.getName() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        actualEditable = editable;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 内省目标对象, 获取其属性描述器列表</span></span><br><span class="line">    PropertyDescriptor[] targetPds = getPropertyDescriptors(actualEditable);</span><br><span class="line">    <span class="comment">// 解析需要忽略拷贝的字段</span></span><br><span class="line">    List&lt;String&gt; ignoreList = (ignoreProperties != <span class="keyword">null</span> ? Arrays.asList(ignoreProperties) : <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 遍历目标对象的属性描述器, 依次进行属性值的拷贝</span></span><br><span class="line">    <span class="keyword">for</span> (PropertyDescriptor targetPd : targetPds) &#123;</span><br><span class="line">        <span class="comment">// 解析目标属性描述器的写入方法</span></span><br><span class="line">        Method writeMethod = targetPd.getWriteMethod();</span><br><span class="line">        <span class="comment">// 如果目标属性可以写入且需要拷贝, 则内省源对象, 获取对应的属性描述器, 读取属性值并拷贝到目标属性中</span></span><br><span class="line">        <span class="keyword">if</span> (writeMethod != <span class="keyword">null</span> &amp;&amp; (ignoreList == <span class="keyword">null</span> || !ignoreList.contains(targetPd.getName()))) &#123;</span><br><span class="line">            <span class="comment">// 内省源对象, 缓存属性描述器, 并根据目标属性名称取出对应的源属性的描述器</span></span><br><span class="line">            PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName());</span><br><span class="line">            <span class="keyword">if</span> (sourcePd != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 解析源属性值的读取方法</span></span><br><span class="line">                Method readMethod = sourcePd.getReadMethod();</span><br><span class="line">                <span class="keyword">if</span> (readMethod != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; ClassUtils.isAssignable(writeMethod.getParameterTypes()[<span class="number">0</span>],</span><br><span class="line">                                              readMethod.getReturnType())) &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) &#123;</span><br><span class="line">                            readMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 读取源属性值</span></span><br><span class="line">                        Object value = readMethod.invoke(source);</span><br><span class="line">                        <span class="keyword">if</span> (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) &#123;</span><br><span class="line">                            writeMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 写入目标属性</span></span><br><span class="line">                        writeMethod.invoke(target, value);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(<span class="string">"Could not copy property '"</span> + targetPd.getName() + <span class="string">"' from source to target"</span>, ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="二、-BeanUtils-copyProperties实现原理"><a href="#二、-BeanUtils-copyProperties实现原理" class="headerlink" title="二、 BeanUtils.copyProperties实现原理"></a>二、 <code>BeanUtils.copyProperties</code>实现原理</h4><p>根据以上分析，整合出 <code>Spring</code> 对象拷贝的实现原理：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_39_5_introspector.jpg" alt=""></p>
<p>通过内省机制，对 <code>Bean</code> 进行拆分，得到每个属性的描述器，缓存在 <code>Map</code> 中，<code>Key</code>为变量名，<code>Value</code>为属性描述器。属性描述器主要包括：属性名称、读取属性值的方法、设置属性值的方法。拷贝过程中，先获取目标属性的写入方法，再获取对应源属性的读取方法，最后通过反射拷贝属性值。</p>
<h4 id="三、JavaBean内省机制"><a href="#三、JavaBean内省机制" class="headerlink" title="三、JavaBean内省机制"></a>三、<code>JavaBean</code>内省机制</h4><p><code>JavaBean</code> 内省，是建立在反射基础上的，通过解析 <code>Bean</code>各个属性的描述器，以便通过属性描述器来操作 <code>Bean</code> 的一种机制。反射是将 <code>Java</code> 类中的各种成分映射成相应的 <code>Java</code> 类，可以获取所有属性以及调用任何方法。与反射不同的是，内省是通过属性描述器来暴露一个 <code>Bean</code> 的属性、方法和时间的，而且只有符合 <code>JavaBean</code> 规则的类的成员才可以调用内生 <code>API</code> 进行操作。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_37_1_refect_instropection.png" alt=""></p>
<p>内省在 <code>java.beans.Introspector</code>中的具体实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有的 public 方法</span></span><br><span class="line">Method methodList[] = getPublicDeclaredMethods(beanClass);</span><br><span class="line"><span class="comment">// 循环遍历处理每一个 public 方法, 为方便讲解, 此处我们以第一个方法为例...</span></span><br><span class="line"></span><br><span class="line">Method method = methodList[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 跳过 static 方法</span></span><br><span class="line"><span class="keyword">int</span> mods = method.getModifiers();</span><br><span class="line"><span class="keyword">if</span> (Modifier.isStatic(mods)) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取该方法的名称, 如setAge、getAge</span></span><br><span class="line">String name = method.getName();</span><br><span class="line"><span class="comment">// 获取该方法的入参和返参</span></span><br><span class="line">Class&lt;?&gt;[] argTypes = method.getParameterTypes();</span><br><span class="line">Class&lt;?&gt; resultType = method.getReturnType();</span><br><span class="line"><span class="comment">// 获取该方法的入参个数</span></span><br><span class="line"><span class="keyword">int</span> argCount = argTypes.length;</span><br><span class="line">PropertyDescriptor pd = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argCount == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 没有入参: 说明是获取属性值的方法</span></span><br><span class="line">    <span class="keyword">if</span> (name.startsWith(GET_PREFIX)) &#123;</span><br><span class="line">        <span class="comment">// 1.1 该方法名称以 get 开头, 如 getAge</span></span><br><span class="line">        pd = <span class="keyword">new</span> PropertyDescriptor(<span class="keyword">this</span>.beanClass, name.substring(<span class="number">3</span>), method, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resultType == <span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span> &amp;&amp; <span class="title">name</span>.<span class="title">startsWith</span>(<span class="title">IS_PREFIX</span>)) </span>&#123;</span><br><span class="line">        <span class="comment">// 1.2 该方法名称以 is 开头, 如 isMale, 只处理基本类型的布尔值</span></span><br><span class="line">        pd = <span class="keyword">new</span> PropertyDescriptor(<span class="keyword">this</span>.beanClass, name.substring(<span class="number">2</span>), method, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (argCount == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 2. 有一个入参</span></span><br><span class="line">    if (int.class.equals(argTypes[0]) &amp;&amp; name.startsWith(GET_PREFIX)) &#123;</span><br><span class="line">        <span class="comment">// 2.1 获取属性值的方法, 如 getChild(Integer index), 则封装成索引属性器</span></span><br><span class="line">        pd = <span class="keyword">new</span> IndexedPropertyDescriptor(<span class="keyword">this</span>.beanClass, name.substring(<span class="number">3</span>), <span class="keyword">null</span>, <span class="keyword">null</span>, method, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">void</span><span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">resultType</span>) &amp;&amp; <span class="title">name</span>.<span class="title">startsWith</span>(<span class="title">SET_PREFIX</span>)) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.2 设置属性值的方法</span></span><br><span class="line">        pd = <span class="keyword">new</span> PropertyDescriptor(<span class="keyword">this</span>.beanClass, name.substring(<span class="number">3</span>), <span class="keyword">null</span>, method);</span><br><span class="line">        <span class="keyword">if</span> (throwsException(method, PropertyVetoException<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            pd.setConstrained(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (argCount == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 3. 有两个入参</span></span><br><span class="line">    if (void.class.equals(resultType) &amp;&amp; int.class.equals(argTypes[0]) &amp;&amp; name.startsWith(SET_PREFIX)) &#123;</span><br><span class="line">        <span class="comment">// 3.1 只处理设置属性值的方法, 如 setChild(Integer index, Child child), 则封装成索引属性器</span></span><br><span class="line">        pd = <span class="keyword">new</span> IndexedPropertyDescriptor(<span class="keyword">this</span>.beanClass, name.substring(<span class="number">3</span>), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, method);</span><br><span class="line">        <span class="keyword">if</span> (throwsException(method, PropertyVetoException<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            pd.setConstrained(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PropertyDescriptor;</span><br></pre></td></tr></table></figure>

<p>由此可以看出，一个类的方法名称、入参个数、反参类型是<code>JavaBean</code> 内省的主要要素，可以总结为：</p>
<ul>
<li>只能内省一个类暴露的 <code>public</code> 非静态方法；</li>
<li>可以内省标准化的 <code>set</code> 方法，如  <code>void setAge(Integer age)</code>；</li>
<li>可以内省标准化的 <code>get</code> 方法，如  <code>ResultType getAge()</code>；</li>
<li>可以内省设置索引属性的方法，如 <code>setChild(Integer index, Child child)</code>；</li>
<li>可以内省获取索引属性的方法，如 <code>getChild(Integer index)</code>；</li>
<li>可以内省获取基本类型布尔值的且以 <code>is</code> 开头的方法，如 <code>boolean isMale()</code>；</li>
</ul>
<h4 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h4><p><code>Spring</code> 对象拷贝，基于反射和内省机制，通过属性描述器，将源属性值写入目标属性。如今 <code>Spring</code> 架构已被广泛使用，旗下各种好用的工具也是顺手拈来，但无端的滥用也潜藏着一些问题。比如 <code>Spring</code> 对象拷贝，要求操作的对象必须符合 <code>JavaBean</code> 规范，否则将无法拷贝。如拷贝包装类型的布尔值，其读取方法为 <code>Boolean isMale</code> ，不符合 <code>JavaBean</code> 规范，对应的目标属性值一定是 <code>null</code>。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Batch 性能调优-并行化Step</title>
    <url>/2022/02/08/spring_batch_optimization_parallel_step/</url>
    <content><![CDATA[<hr>
<h4 id="一、Spring-Batch-性能优化指标"><a href="#一、Spring-Batch-性能优化指标" class="headerlink" title="一、Spring Batch 性能优化指标"></a>一、Spring Batch 性能优化指标</h4><p>Spring Batch 是一款伸缩性非常好的批处理工具，既可以处理简单的任务，也可以处理复杂的、高容量的任务。在性能调优方面，Spring Batch 提供了丰富的接口支持，各项优化指标可归纳如下：</p>
<ul>
<li><a href="https://takeshell.com/2022/02/04/spring_batch_optimization_multi_thread_step/" target="_blank" rel="noopener">多线程 <code>Step</code></a>：由独立线程执行提交块（a chunk of items）的输入、处理和输出过程；</li>
<li>并行化 <code>Step</code>：对于可并行处理的 <code>Step</code>，交由不同的线程去处理；</li>
<li><a href="https://takeshell.com/2022/02/15/spring_batch_optimization_partition_step/" target="_blank" rel="noopener">分片化 <code>Step</code></a>：通过 <code>SPI(Serial Peripheral Interface)</code>，对 <code>Step</code> 分片执行；</li>
<li>远程组块：对于输入无性能瓶颈，但处理和输出有性能瓶颈的任务，交由远程组块执行；</li>
</ul>
<p>详见<a href="https://docs.spring.io/spring-batch/docs/current/reference/html/scalability.html#scalability" target="_blank" rel="noopener">Spring文档</a>。</p>
<h4 id="二、并行化-Step"><a href="#二、并行化-Step" class="headerlink" title="二、并行化 Step"></a>二、并行化 <code>Step</code></h4><p>一个 <code>Job</code> 可配置多个 <code>Step</code>，<code>Step</code> 之间可能存在关联，需要有先有后；也可能没有关联，先执行哪一个都可以。那么，若将这些互不关联的 <code>Step</code> 进行并行化处理，将会有效提升批处理性能。</p>
<p>比如，现有一个批处理任务，包含 4 个 <code>Step</code>：</p>
<ul>
<li><code>step1</code>：在学生姓名后面追加字符串 “1”；</li>
<li><code>step2</code>：在学生姓名后面追加字符串 “2”；</li>
<li><code>step3</code>：在学生住址后面追加字符串 “8”；</li>
<li><code>step4</code>：迁移所有学生信息；</li>
</ul>
<p>我们发现，修改学生姓名的任务与修改学生住址的任务，互不干扰，并不需要有先后之分。因此，我们可以将 <code>step1</code>、<code>step2</code> 与 <code>step3</code> 并行执行。串行 <code>Step</code> 与并行 <code>Step</code> 流程如下：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/5_21_33_37_parallel_step_2.png" alt=""></p>
<h4 id="三、批处理配置"><a href="#三、批处理配置" class="headerlink" title="三、批处理配置"></a>三、批处理配置</h4><h5 id="3-1-Job-配置"><a href="#3-1-Job-配置" class="headerlink" title="3.1 Job 配置"></a>3.1 Job 配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.flow.Flow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.launch.support.RunIdIncrementer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchManageStudentJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchProcessStudentSplitFlow1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Flow batchProcessStudentSplitFlow;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchTransferStudentStep1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Step batchTransferStudentStep;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">manageStudentJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"manageStudentJob1"</span>)</span><br><span class="line">                .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">            	<span class="comment">// 姓名追加1、姓名追加2、地址追加8</span></span><br><span class="line">                .start(batchProcessStudentSplitFlow)</span><br><span class="line">            	<span class="comment">// 迁移学生信息; student_source -&gt; student_target</span></span><br><span class="line">                .next(batchTransferStudentStep)</span><br><span class="line">                .end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-Fow-配置"><a href="#3-2-Fow-配置" class="headerlink" title="3.2 Fow 配置"></a>3.2 Fow 配置</h5><p><code>batchProcessStudentSplitFlow</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.builder.FlowBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.flow.Flow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.flow.support.SimpleFlow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.springbatchdemo.config.ExecutorConfig.TASK_EXECUTOR;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchProcessStudentSplitFlow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = TASK_EXECUTOR)</span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskExecutor taskExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchUpdateStudentNameOneAndTwoFlow"</span>)</span><br><span class="line">    <span class="keyword">private</span> Flow batchUpdateStudentNameOneAndTwoFlow;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchUpdateStudentAddressFlow1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Flow batchUpdateStudentAddressFlow;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"batchProcessStudentSplitFlow1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flow <span class="title">batchProcessStudentSplitFlow1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FlowBuilder&lt;SimpleFlow&gt;(<span class="string">"batchProcessStudentSplitFlow1"</span>)</span><br><span class="line">                .split(taskExecutor)</span><br><span class="line">                .add(batchUpdateStudentNameOneAndTwoFlow, batchUpdateStudentAddressFlow)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>batchUpdateStudentNameOneAndTwoFlow</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.builder.FlowBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.flow.Flow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.flow.support.SimpleFlow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchUpdateStudentNameFlow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchUpdateStudentNameStep1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Step batchUpdateStudentNameStep1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchUpdateStudentNameStep2"</span>)</span><br><span class="line">    <span class="keyword">private</span> Step batchUpdateStudentNameStep2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"batchUpdateStudentNameOneAndTwoFlow"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flow <span class="title">updateStudentNameOneAndTwoFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FlowBuilder&lt;SimpleFlow&gt;(<span class="string">"batchUpdateStudentNameOneAndTwoFlow"</span>)</span><br><span class="line">                .start(batchUpdateStudentNameStep1)</span><br><span class="line">                .next(batchUpdateStudentNameStep2)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>batchUpdateStudentNameOneAndTwoFlow</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.builder.FlowBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.flow.Flow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.flow.support.SimpleFlow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchUpdateStudentAddressFlow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchUpdateStudentAddressStep1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Step batchUpdateStudentAddressStep;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"batchUpdateStudentAddressFlow1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flow <span class="title">batchUpdateStudentAddressFlow1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FlowBuilder&lt;SimpleFlow&gt;(<span class="string">"batchUpdateStudentAddressFlow1"</span>)</span><br><span class="line">                .start(batchUpdateStudentAddressStep)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-Step-配置"><a href="#3-3-Step-配置" class="headerlink" title="3.3 Step 配置"></a>3.3 Step 配置</h5><p><code>BatchUpdateStudentNameStep</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.processor.AppendStudentNameOneProcessor;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.processor.AppendStudentNameTwoProcessor;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcPagingItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchUpdateStudentNameStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"studentItemReader"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcPagingItemReader&lt;Student&gt; studentItemReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"studentItemUpdateName"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcBatchItemWriter&lt;Student&gt; studentItemUpdateName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AppendStudentNameOneProcessor appendStudentNameOneProcessor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AppendStudentNameTwoProcessor appendStudentNameTwoProcessor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"batchUpdateStudentNameStep1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">batchUpdateStudentNameStep1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"batchUpdateStudentNameStep1"</span>)</span><br><span class="line">                .&lt;Student, Student&gt;chunk(<span class="number">1000</span>)</span><br><span class="line">                .reader(studentItemReader)</span><br><span class="line">            	<span class="comment">// 姓名追加 1</span></span><br><span class="line">                .processor(appendStudentNameOneProcessor)</span><br><span class="line">                .writer(studentItemUpdateName)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"batchUpdateStudentNameStep2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">batchUpdateStudentNameStep2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"batchUpdateStudentNameStep2"</span>)</span><br><span class="line">                .&lt;Student, Student&gt;chunk(<span class="number">1000</span>)</span><br><span class="line">                .reader(studentItemReader)</span><br><span class="line">            	<span class="comment">// 姓名追加 2</span></span><br><span class="line">                .processor(appendStudentNameTwoProcessor)</span><br><span class="line">                .writer(studentItemUpdateName)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BatchUpdateStudentAddressStep</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.processor.AppendStudentAddressProcessor;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcPagingItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchUpdateStudentAddressStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"studentItemReader"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcPagingItemReader&lt;Student&gt; studentItemReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"studentItemUpdateAddress"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcBatchItemWriter&lt;Student&gt; studentItemUpdateAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AppendStudentAddressProcessor appendStudentAddressProcessor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"batchUpdateStudentAddressStep1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">batchUpdateStudentAddressStep1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"batchUpdateStudentAddressStep1"</span>)</span><br><span class="line">                .&lt;Student, Student&gt;chunk(<span class="number">1000</span>)</span><br><span class="line">                .reader(studentItemReader)</span><br><span class="line">            	<span class="comment">// 住址追加 8</span></span><br><span class="line">                .processor(appendStudentAddressProcessor)</span><br><span class="line">                .writer(studentItemUpdateAddress)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BatchProcessStudentStep</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.processor.StudentItemProcessor;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcPagingItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchProcessStudentStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"studentItemReader"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcPagingItemReader&lt;Student&gt; studentItemReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"studentItemWriter"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcBatchItemWriter&lt;Student&gt; studentItemWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentItemProcessor studentItemProcessor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"batchTransferStudentStep1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">batchTransferStudentStep1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"batchTransferStudentStep1"</span>)</span><br><span class="line">                .&lt;Student, Student&gt;chunk(<span class="number">1000</span>)</span><br><span class="line">                .reader(studentItemReader)</span><br><span class="line">            	<span class="comment">// 迁移数据; student_source -&gt; student_target</span></span><br><span class="line">                .processor(studentItemProcessor)</span><br><span class="line">                .writer(studentItemWriter)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-4-数据输入器"><a href="#3-4-数据输入器" class="headerlink" title="3.4 数据输入器"></a>3.4 数据输入器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.reader.rowmapper.StudentRowMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcPagingItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.builder.JdbcPagingItemReaderBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.support.MySqlPagingQueryProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.FlatFileItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomItemReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchDemoDB"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource batchDemoDB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"studentItemReader"</span>)</span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcPagingItemReader&lt;Student&gt; <span class="title">studentItemReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MySqlPagingQueryProvider queryProvider = <span class="keyword">new</span> MySqlPagingQueryProvider();</span><br><span class="line">        queryProvider.setSelectClause(<span class="string">"student_id, name, address"</span>);</span><br><span class="line">        queryProvider.setFromClause(<span class="string">"from student_source"</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Order&gt; sortKeys = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        sortKeys.put(<span class="string">"student_id"</span>, Order.ASCENDING);</span><br><span class="line">        queryProvider.setSortKeys(sortKeys);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcPagingItemReaderBuilder&lt;Student&gt;()</span><br><span class="line">                .name(<span class="string">"studentItemReader"</span>)</span><br><span class="line">                .dataSource(batchDemoDB)</span><br><span class="line">                .fetchSize(<span class="number">1000</span>)</span><br><span class="line">                .rowMapper(<span class="keyword">new</span> StudentRowMapper())</span><br><span class="line">                .queryProvider(queryProvider)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-5-数据处理器"><a href="#3-5-数据处理器" class="headerlink" title="3.5 数据处理器"></a>3.5 数据处理器</h5><p><code>AppendStudentNameOneProcessor</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppendStudentNameOneProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">Student</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(AppendStudentNameOneProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">process</span><span class="params">(<span class="keyword">final</span> Student studentSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Long studentId = studentSource.getStudentId();</span><br><span class="line">        <span class="keyword">final</span> String name = studentSource.getName();</span><br><span class="line">        <span class="keyword">final</span> String address = studentSource.getAddress();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Student studentTarget = <span class="keyword">new</span> Student();</span><br><span class="line">        studentTarget.setStudentId(studentId);</span><br><span class="line">        studentTarget.setName(name.concat(<span class="string">"_1"</span>));</span><br><span class="line">        studentTarget.setAddress(address);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"Converting (&#123;&#125;) into (&#123;&#125;)"</span>, studentSource, studentTarget);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentTarget;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AppendStudentNameTwoProcessor</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppendStudentNameTwoProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">Student</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(AppendStudentNameTwoProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">process</span><span class="params">(<span class="keyword">final</span> Student studentSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Long studentId = studentSource.getStudentId();</span><br><span class="line">        <span class="keyword">final</span> String name = studentSource.getName();</span><br><span class="line">        <span class="keyword">final</span> String address = studentSource.getAddress();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Student studentTarget = <span class="keyword">new</span> Student();</span><br><span class="line">        studentTarget.setStudentId(studentId);</span><br><span class="line">        studentTarget.setName(name.concat(<span class="string">"_2"</span>));</span><br><span class="line">        studentTarget.setAddress(address);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"Converting (&#123;&#125;) into (&#123;&#125;)"</span>, studentSource, studentTarget);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentTarget;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AppendStudentAddressProcessor</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppendStudentAddressProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">Student</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(AppendStudentAddressProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">process</span><span class="params">(<span class="keyword">final</span> Student studentSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Long studentId = studentSource.getStudentId();</span><br><span class="line">        <span class="keyword">final</span> String name = studentSource.getName();</span><br><span class="line">        <span class="keyword">final</span> String address = studentSource.getAddress();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Student studentTarget = <span class="keyword">new</span> Student();</span><br><span class="line">        studentTarget.setStudentId(studentId);</span><br><span class="line">        studentTarget.setName(name);</span><br><span class="line">        studentTarget.setAddress(address.concat(<span class="string">"_8"</span>));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"Converting (&#123;&#125;) into (&#123;&#125;)"</span>, studentSource, studentTarget);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentTarget;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>StudentItemProcessor</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentItemProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">Student</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(StudentItemProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">process</span><span class="params">(<span class="keyword">final</span> Student studentSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Long studentId = studentSource.getStudentId();</span><br><span class="line">        <span class="keyword">final</span> String name = studentSource.getName();</span><br><span class="line">        <span class="keyword">final</span> String address = studentSource.getAddress();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Student studentTarget = <span class="keyword">new</span> Student();</span><br><span class="line">        studentTarget.setStudentId(studentId);</span><br><span class="line">        studentTarget.setName(name);</span><br><span class="line">        studentTarget.setAddress(address);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"Converting (&#123;&#125;) into (&#123;&#125;)"</span>, studentSource, studentTarget);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentTarget;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-6-数据输出器"><a href="#3-6-数据输出器" class="headerlink" title="3.6 数据输出器"></a>3.6 数据输出器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomItemWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchDemoDB"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource batchDemoDB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"studentItemWriter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcBatchItemWriter&lt;Student&gt; <span class="title">studentItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcBatchItemWriterBuilder&lt;Student&gt;()</span><br><span class="line">                .itemSqlParameterSourceProvider(<span class="keyword">new</span> BeanPropertyItemSqlParameterSourceProvider&lt;&gt;())</span><br><span class="line">                .sql(<span class="string">"INSERT INTO student_target (student_id, name, address) VALUES (:studentId, :name, :address)"</span>)</span><br><span class="line">                .dataSource(batchDemoDB)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"studentItemUpdateName"</span>)</span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcBatchItemWriter&lt;Student&gt; <span class="title">studentItemUpdateName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcBatchItemWriterBuilder&lt;Student&gt;()</span><br><span class="line">                .itemSqlParameterSourceProvider(<span class="keyword">new</span> BeanPropertyItemSqlParameterSourceProvider&lt;&gt;())</span><br><span class="line">                .sql(<span class="string">"UPDATE student_source SET name = :name WHERE student_id = :studentId"</span>)</span><br><span class="line">                .dataSource(batchDemoDB)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"studentItemUpdateAddress"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcBatchItemWriter&lt;Student&gt; <span class="title">studentItemUpdateAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcBatchItemWriterBuilder&lt;Student&gt;()</span><br><span class="line">                .itemSqlParameterSourceProvider(<span class="keyword">new</span> BeanPropertyItemSqlParameterSourceProvider&lt;&gt;())</span><br><span class="line">                .sql(<span class="string">"UPDATE student_source SET address = :address WHERE student_id = :studentId"</span>)</span><br><span class="line">                .dataSource(batchDemoDB)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@StepScope：</p>
<p>从上面的 <code>Step</code> 配置可知，<code>studentItemReader</code> 被多个 <code>Step</code> 引用。默认情况下 <code>studentItemReader</code> 的生命周期是与 <code>Job</code> 保持一致，那么在多 <code>Step</code> 引用的情况下，就会抛出类似下面这种异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;Caused by: java.lang.IllegalStateException: Cannot open an already opened ItemReader, call close first</span><br></pre></td></tr></table></figure>

<p>使用注解 <code>StepScope</code>，让 <code>studentItemReader</code> 的生命周期与 <code>Step</code> 保持同步，保证每个 <code>Step</code> 拿到的 <code>ItemReader</code> 都是新的实例。同样，<code>ItemWriter</code>、<code>ItemProcessor</code> 存在多 <code>Step</code> 引用的，都要使用该注解。</p>
</blockquote>
<h4 id="四、性能测试"><a href="#四、性能测试" class="headerlink" title="四、性能测试"></a>四、性能测试</h4><p>测试数据量：100000</p>
<p>测试环境：Windows 10，i7-8核，MySQL-8.0.28</p>
<h5 id="4-1-串行-Step"><a href="#4-1-串行-Step" class="headerlink" title="4.1 串行 Step"></a>4.1 串行 Step</h5><p>串行 <code>Step</code> 批处理，只需要按照顺序配置 <code>Step</code>（省略代码示例）。测试结果：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/8_12_36_15_serial_step_performance.png" alt=""></p>
<p>耗时：<strong>91s</strong></p>
<h5 id="4-2-并行-Step"><a href="#4-2-并行-Step" class="headerlink" title="4.2 并行 Step"></a>4.2 并行 Step</h5><p>测试结果：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/8_12_41_53_parallel_step_performance.png" alt=""></p>
<p>耗时：<strong>68s</strong></p>
<p>示例代码：<a href="https://github.com/donehub/spring-batch-demo" target="_blank" rel="noopener">spring-batch-demo</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>狮子头</title>
    <url>/2020/09/13/tiger-head/</url>
    <content><![CDATA[<hr>
<p>自从国内猪肉紧俏以来，市面上就经常买到进口猪肉。外国人养猪比较人性化，不给小猪做阉割，所以猪肉又腥又骚。今天抱着踩雷的心态，买了一份肉，并在叮咚上特意备注道：“只要中国猪肉！”。</p>
<p>今天来做个狮子头。</p>
<h5 id="一、食材准备"><a href="#一、食材准备" class="headerlink" title="一、食材准备"></a>一、食材准备</h5><p>五花肉（肥瘦比: 6:4），山药（马蹄/萝卜）、老豆腐、红薯淀粉、辣椒、葱姜蒜、生抽、老抽、蚝油、料酒、八角、鸡蛋。</p>
<p><img src="https://s1.ax1x.com/2020/09/15/wyDNmd.jpg" alt="wyDNmd.jpg"></p>
<p>辅料我用的是山药，大家可以根据自己的口味调整。辅料添加要适量，否则可能团不成肉丸子。</p>
<h5 id="二、制作流程"><a href="#二、制作流程" class="headerlink" title="二、制作流程"></a>二、制作流程</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[拌料] --&gt; B(成型)</span><br><span class="line">B --&gt; C(煎炸)</span><br><span class="line">C --&gt; D(红烧)</span><br><span class="line">D --&gt; E(勾芡)</span><br></pre></td></tr></table></figure>

<h5 id="三、操作步骤"><a href="#三、操作步骤" class="headerlink" title="三、操作步骤"></a>三、操作步骤</h5><ol>
<li><p>将五花肉，山药、老豆腐、葱姜蒜、生抽、老抽、蚝油、料酒、鸡蛋依次放入碗中，用手沿着一个方向搅拌上劲，待拌料可以黏在手上，加入少量淀粉后继续搅拌摔打；</p>
<p><img src="https://s1.ax1x.com/2020/09/15/wyD8SO.jpg" alt="wyD8SO.jpg"></p>
</li>
<li><p>将拌料团成你喜欢的大小；</p>
<p><img src="https://s1.ax1x.com/2020/09/15/wyDJ6e.jpg" alt="wyDJ6e.jpg"></p>
</li>
<li><p>热锅冷油，煎炸二十分钟；油热6分可入锅，全程小火；这一步的主要目的是定型，口味清淡的朋友也可以用沸水来操作；</p>
<p><img src="https://s1.ax1x.com/2020/09/15/wyDGlD.jpg" alt="wyDGlD.jpg"></p>
</li>
<li><p>将辣椒、葱姜蒜、八角炒香，再加入生抽、老抽、蚝油、料酒，添2/3锅水，加入肉丸子小火慢煮30分钟；</p>
<p><img src="https://s1.ax1x.com/2020/09/15/wyDYOH.jpg" alt="wyDYOH.jpg"></p>
</li>
<li><p>勾芡 ；待锅内汤汁不多时，盛出肉丸子，然后加入水淀粉熬制挂锅，然后将红烧汁浇在狮子头上；</p>
<p><img src="https://s1.ax1x.com/2020/09/15/wygNnS.jpg" alt="wygNnS.jpg"></p>
<p><img src="https://s1.ax1x.com/2020/09/15/wygwkj.jpg" alt="wygwkj.jpg"></p>
</li>
</ol>
<h5 id="四、多说一句"><a href="#四、多说一句" class="headerlink" title="四、多说一句"></a>四、多说一句</h5><p>做狮子头比较耗时耗力，只能在周末享用。相比来说，我更喜欢老家的肉丸子。材料比较简单，猪肉、馒头渣、黑胡椒。团成丸子，再兑上半锅水，炖煮一个小时。味浓又不油腻！</p>
]]></content>
      <categories>
        <category>吃货</category>
      </categories>
      <tags>
        <tag>小吃</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Batch 性能调优-分片化Step</title>
    <url>/2022/02/15/spring_batch_optimization_partition_step/</url>
    <content><![CDATA[<hr>
<h4 id="一、Spring-Batch-性能优化指标"><a href="#一、Spring-Batch-性能优化指标" class="headerlink" title="一、Spring Batch 性能优化指标"></a>一、Spring Batch 性能优化指标</h4><p>Spring Batch 是一款伸缩性非常好的批处理工具，既可以处理简单的任务，也可以处理复杂的、高容量的任务。在性能调优方面，Spring Batch 提供了丰富的接口支持，各项优化指标可归纳如下：</p>
<ul>
<li><a href="https://takeshell.com/2022/02/04/spring_batch_optimization_multi_thread_step/" target="_blank" rel="noopener">多线程 <code>Step</code></a>：由独立线程执行提交块（a chunk of items）的输入、处理和输出过程；</li>
<li><a href="https://takeshell.com/2022/02/08/spring_batch_optimization_parallel_step/" target="_blank" rel="noopener">并行化 <code>Step</code></a>：对于可并行处理的 <code>Step</code>，交由不同的线程去处理；</li>
<li>分片化 <code>Step</code>：通过 <code>SPI(Serial Peripheral Interface)</code>，对 <code>Step</code> 分片执行；</li>
<li>远程组块：对于输入无性能瓶颈，但处理和输出有性能瓶颈的任务，交由远程组块执行；</li>
</ul>
<p>详见<a href="https://docs.spring.io/spring-batch/docs/current/reference/html/scalability.html#scalability" target="_blank" rel="noopener">Spring文档</a>。</p>
<h4 id="二、分片化-Step"><a href="#二、分片化-Step" class="headerlink" title="二、分片化 Step"></a>二、分片化 <code>Step</code></h4><p>如果一个 <code>Step</code> 的任务量比较大，可以尝试将其拆分成多个子任务。子任务之间可并行处理且互不干扰，这将大大提升批处理效率。例如：Master 这个 <code>Step</code> 迁移 100000 条数据需要 100 s，如果将其拆分为 100 个 Slave 任务，那么时间可缩短至 1 s。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/19_20_41_39_partition_step_2.png" alt=""></p>
<p><code>Step</code> 分片原理，是一个 Master 处理器对应多个 Salve 处理器。Slave 处理器可以是远程服务，也可以是本地执行线程。主从服务间的消息不需要持久化，也不需要严格保证传递，因为 <code>JobRepository</code> 的元数据管理，是将每个 Salve 独立保存在 <code>batch_step_execution</code> 中的，这样便可以保证每个 Slave 任务只执行一次。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/19_21_53_13_partition_step_structure.png" alt=""></p>
<p><code>Step</code> 分片化，需要了解两个组件：分片器（Partitioner）和分片处理（PartitionHandler）。</p>
<ul>
<li><p>分片器（Partitioner）：为每个 Slave 服务配置上下文（StepExecutionContext）；</p>
</li>
<li><p>分片处理（PartitionHandler）：定义 Slave 服务的数量以及 Slave 任务内容；</p>
</li>
</ul>
<p>比如在一个数据迁移 <code>Step</code> 中，分片处理就是将 1 个主任务拆分成 100 个从任务，并定义从任务的执行内容；分片器就是依次为这 100 个从任务划定数据迁移的范围（<code>select * from table where id between ? and ?</code>）。</p>
<h4 id="三、批处理配置"><a href="#三、批处理配置" class="headerlink" title="三、批处理配置"></a>三、批处理配置</h4><h5 id="3-1-Job-配置"><a href="#3-1-Job-配置" class="headerlink" title="3.1 Job 配置"></a>3.1 Job 配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.launch.support.RunIdIncrementer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PartitionTransferStudentJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"masterTransferStudentStep1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Step masterTransferStudentStep;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">transferStudentJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"partitionTransferStudentJob"</span>)</span><br><span class="line">                .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">                .flow(masterTransferStudentStep)</span><br><span class="line">                .end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-Step-配置"><a href="#3-2-Step-配置" class="headerlink" title="3.2 Step 配置"></a>3.2 Step 配置</h5><p><code>MasterTransferStudentStep</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.partitioner.TransferStudentPartitioner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.partition.PartitionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterTransferStudentStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"transferStudentPartitionHandler1"</span>)</span><br><span class="line">    <span class="keyword">private</span> PartitionHandler transferStudentPartitionHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransferStudentPartitioner transferStudentPartitioner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"masterTransferStudentStep1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">masterTransferStudentStep1</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"masterTransferStudentStep1.manager"</span>)</span><br><span class="line">                .partitioner(<span class="string">"masterTransferStudentStep1"</span>, transferStudentPartitioner)</span><br><span class="line">                .partitionHandler(transferStudentPartitionHandler)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SlaveTransferStudentStep</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.processor.SlaveStudentItemProcessor;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcPagingItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlaveTransferStudentStep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"slaveTransferStudentItemReader"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcPagingItemReader&lt;Student&gt; slaveTransferStudentItemReader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"slaveTransferStudentItemWriter"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcBatchItemWriter&lt;Student&gt; slaveTransferStudentItemWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SlaveStudentItemProcessor slaveStudentItemProcessor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"slaveTransferStudentStep1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">slaveTransferStudentStep1</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"slaveTransferStudentStep1"</span>)</span><br><span class="line">                .transactionManager(transactionManager)</span><br><span class="line">                .&lt;Student, Student&gt;chunk(<span class="number">1000</span>)</span><br><span class="line">                .reader(slaveTransferStudentItemReader)</span><br><span class="line">                .processor(slaveStudentItemProcessor)</span><br><span class="line">                .writer(slaveTransferStudentItemWriter)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-Partitioner-配置"><a href="#3-3-Partitioner-配置" class="headerlink" title="3.3 Partitioner 配置"></a>3.3 Partitioner 配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.partition.support.Partitioner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferStudentPartitioner</span> <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TransferStudentPartitioner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, ExecutionContext&gt; <span class="title">partition</span><span class="params">(<span class="keyword">int</span> gridSize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, ExecutionContext&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;(gridSize);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> range = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span> fromId = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> toId = range;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= gridSize; i++) &#123;</span><br><span class="line"></span><br><span class="line">            ExecutionContext value = <span class="keyword">new</span> ExecutionContext();</span><br><span class="line"></span><br><span class="line">            value.putInt(<span class="string">"fromId"</span>, fromId);</span><br><span class="line">            value.putInt(<span class="string">"toId"</span>, toId);</span><br><span class="line"></span><br><span class="line">            result.put(<span class="string">"partition"</span> + i, value);</span><br><span class="line"></span><br><span class="line">            fromId = toId;</span><br><span class="line">            toId += range;</span><br><span class="line"></span><br><span class="line">            LOGGER.info(<span class="string">"partition&#123;&#125;; fromId: &#123;&#125;; toId: &#123;&#125;"</span>, i, fromId, toId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-4-Partition-Handler-配置"><a href="#3-4-Partition-Handler-配置" class="headerlink" title="3.4 Partition-Handler 配置"></a>3.4 Partition-Handler 配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.partition.PartitionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.springbatchdemo.config.ExecutorConfig.TASK_EXECUTOR;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferStudentPartitionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = TASK_EXECUTOR)</span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskExecutor taskExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"slaveTransferStudentStep1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Step slaveTransferStudentStep;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"transferStudentPartitionHandler1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PartitionHandler <span class="title">transferStudentPartitionHandler1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TaskExecutorPartitionHandler retVal = <span class="keyword">new</span> TaskExecutorPartitionHandler();</span><br><span class="line">        retVal.setTaskExecutor(taskExecutor);</span><br><span class="line">        retVal.setStep(slaveTransferStudentStep);</span><br><span class="line">        retVal.setGridSize(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-5-数据输入器"><a href="#3-5-数据输入器" class="headerlink" title="3.5 数据输入器"></a>3.5 数据输入器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.component.reader.rowmapper.StudentRowMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcPagingItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.builder.JdbcPagingItemReaderBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.support.MySqlPagingQueryProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.FlatFileItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomItemReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchDemoDB"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource batchDemoDB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"slaveTransferStudentItemReader"</span>)</span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcPagingItemReader&lt;Student&gt; <span class="title">slaveTransferStudentItemReader</span><span class="params">(@Value(<span class="string">"#&#123;stepExecutionContext[fromId]&#125;"</span>)</span> <span class="keyword">final</span> Long fromId,</span></span><br><span class="line"><span class="function">                                                                        @<span class="title">Value</span><span class="params">(<span class="string">"#&#123;stepExecutionContext[toId]&#125;"</span>)</span> <span class="keyword">final</span> Long toId) </span>&#123;</span><br><span class="line"></span><br><span class="line">        MySqlPagingQueryProvider queryProvider = <span class="keyword">new</span> MySqlPagingQueryProvider();</span><br><span class="line">        queryProvider.setSelectClause(<span class="string">"student_id, name, address"</span>);</span><br><span class="line">        queryProvider.setFromClause(<span class="string">"from student_source"</span>);</span><br><span class="line">        queryProvider.setWhereClause(String.format(<span class="string">"where student_id &gt; %s and student_id &lt;= %s"</span>, fromId, toId));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Order&gt; sortKeys = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        sortKeys.put(<span class="string">"student_id"</span>, Order.ASCENDING);</span><br><span class="line">        queryProvider.setSortKeys(sortKeys);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcPagingItemReaderBuilder&lt;Student&gt;()</span><br><span class="line">                .name(<span class="string">"studentItemReader"</span>)</span><br><span class="line">                .dataSource(batchDemoDB)</span><br><span class="line">                .fetchSize(<span class="number">1000</span>)</span><br><span class="line">                .rowMapper(<span class="keyword">new</span> StudentRowMapper())</span><br><span class="line">                .queryProvider(queryProvider)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-6-数据处理器"><a href="#3-6-数据处理器" class="headerlink" title="3.6 数据处理器"></a>3.6 数据处理器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@StepScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlaveStudentItemProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">Student</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(StudentItemProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">process</span><span class="params">(<span class="keyword">final</span> Student studentSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Long studentId = studentSource.getStudentId();</span><br><span class="line">        <span class="keyword">final</span> String name = studentSource.getName();</span><br><span class="line">        <span class="keyword">final</span> String address = studentSource.getAddress();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Student studentTarget = <span class="keyword">new</span> Student();</span><br><span class="line">        studentTarget.setStudentId(studentId);</span><br><span class="line">        studentTarget.setName(name);</span><br><span class="line">        studentTarget.setAddress(address);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"Converting (&#123;&#125;) into (&#123;&#125;)"</span>, studentSource, studentTarget);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentTarget;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-7-数据输出器"><a href="#3-7-数据输出器" class="headerlink" title="3.7 数据输出器"></a>3.7 数据输出器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> com.example.springbatchdemo.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcBatchItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomItemWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"batchDemoDB"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource batchDemoDB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"slaveTransferStudentItemWriter"</span>)</span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcBatchItemWriter&lt;Student&gt; <span class="title">slaveTransferStudentItemWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcBatchItemWriterBuilder&lt;Student&gt;()</span><br><span class="line">                .itemSqlParameterSourceProvider(<span class="keyword">new</span> BeanPropertyItemSqlParameterSourceProvider&lt;&gt;())</span><br><span class="line">                .sql(<span class="string">"INSERT INTO student_target (student_id, name, address) VALUES (:studentId, :name, :address)"</span>)</span><br><span class="line">                .dataSource(batchDemoDB)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="四、性能测试"><a href="#四、性能测试" class="headerlink" title="四、性能测试"></a>四、性能测试</h4><p>测试数据量：100000</p>
<p>测试环境：Windows 10，i7-8核，MySQL-8.0.28</p>
<h5 id="4-1-常规-Step"><a href="#4-1-常规-Step" class="headerlink" title="4.1 常规 Step"></a>4.1 常规 Step</h5><p>省略测试代码，具体请查看 <code>demo</code>。测试结果：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/19_21_20_57_normal_step_transfer.png" alt=""></p>
<p>耗时：<strong>13s</strong></p>
<h5 id="4-2-分片化-Step"><a href="#4-2-分片化-Step" class="headerlink" title="4.2 分片化 Step"></a>4.2 分片化 Step</h5><p>测试结果：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/19_21_28_21_partition_step_performance.png" alt=""></p>
<p>从 <code>batch_step_execution</code> 可以看出，共有 100 个子任务并行处理，每个子任务迁移 1000 条数据。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/05/19_21_31_26_partition_step_performance_detail.png" alt=""></p>
<p>耗时：<strong>7s</strong></p>
<p>示例代码：<a href="https://github.com/donehub/spring-batch-demo" target="_blank" rel="noopener">spring-batch-demo</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring ApplicationContext 容器的初始化 (上)</title>
    <url>/2020/04/04/spring_container/</url>
    <content><![CDATA[<hr>
<h4 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h4><p><code>Spring</code> 容器是 <code>Spring</code> 框架的核心。容器负责配置对象，注入对象，管理对象，并完成整个生命周期。<code>Spring</code> 容器依赖控制反转（<code>Inversion of Control</code>），也即依赖注入（<code>Dependency Injection</code>）来配置并注入对象。这样的对象被成为 <code>Bean</code>。具体过程可抽象为：<code>Spring</code> 读取程序中的 <code>Bean</code> 配置信息，并据此在容器中生成一份 <code>Bean</code> 配置注册表，然后再根据注册表实例化 <code>Bean</code> ，装配好待用。</p>
<p><img src="http://www.plantuml.com/plantuml/png/SoWkIImgAStDuIf8JCvEJ4zL22ueoinBVxfkvzEPAvvsp7swlFjfppI5QYu5803AvvKel6pjVRvtdK8qK0W2d58Jyo22J_OlVDQu7YvXgAVmTFwk9xlw529yVHIUBTZpT4__yraj4BNMS6L6C6NFDgzuiNmn5XN6S8Ey4iiI5T1Kn28v3k9mDCSf00r-sjRpOk4A3FK1_bx-nGZb43uMK-SzsGSA28HAX1ZO2Wmjp_TCVhfsnhED2z3SWf30j6NNbETJLZnVqVrqLpz861RIkdPGRrafl5Y_-sd_D90arEMwG4cOIy3Yi1105hT2LOBW0LKXt0DKjQGTw02G4eGeK0cAmwmKdkpT3r9Lo-MGcfS2J3e0" alt=""></p>
<p><code>Spring</code> 提供了两种容器：<code>BeanFactory</code> 与 <code>ApplicationContext</code>。<code>BeanFactory</code> 为  <code>Spring Ioc</code> 功能提供了底层的实现基础，但为了实现框架化，<code>Spring</code> 新增了<code>ApplicationContext</code> 接口。 <code>ApplicationContext</code> 继承于 <code>BeanFactory</code>，并涵盖其所有功能。<a href="https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#context-introduction-ctx-vs-beanfactory" target="_blank" rel="noopener">官方</a>对两个容器做出比较：</p>
<table>
<thead>
<tr>
<th align="left">特征</th>
<th align="center">BeanFactory</th>
<th align="center">ApplicationContext</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Bean 实例化 / 连接</td>
<td align="center">是</td>
<td align="center">是</td>
</tr>
<tr>
<td align="left">集成生命周期管理</td>
<td align="center">否</td>
<td align="center">是</td>
</tr>
<tr>
<td align="left"><code>BeanPostProcessor</code> 自动注册</td>
<td align="center">否</td>
<td align="center">是</td>
</tr>
<tr>
<td align="left"><code>BeanFactoryPostProcessor</code> 自动注册</td>
<td align="center">否</td>
<td align="center">是</td>
</tr>
<tr>
<td align="left">利用 <code>MessageSource</code> 进行国际化</td>
<td align="center">否</td>
<td align="center">是</td>
</tr>
<tr>
<td align="left">嵌入式 <code>ApplicationEvent</code> 发布机制</td>
<td align="center">否</td>
<td align="center">是</td>
</tr>
</tbody></table>
<p>本文分析 <code>ApplicationContext</code> 容器。Spring 源码参考版本 <a href="https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/index.html" target="_blank" rel="noopener">5.2.5.RELEASE</a>。</p>
<h4 id="二、ApplicationContext-容器涉及的类关系图"><a href="#二、ApplicationContext-容器涉及的类关系图" class="headerlink" title="二、ApplicationContext 容器涉及的类关系图"></a>二、<code>ApplicationContext</code> 容器涉及的类关系图</h4><p><code>ApplicationContext</code> 有很多实现类，这里我们以 <code>Java EE web</code> （采用 <code>Spring</code> 框架）应用的启动过程为例。为了更直观地描述初始化过程，我们有必要认识  <code>XmlWebApplicationContext</code> 的关联类图:</p>
<p><img src="http://www.plantuml.com/plantuml/png/hLNHhjCm37tlL_G7jY_WOMCCWJJGD93WrStSDLAQJ8ax6EBZMTHLiZgtIT7DMzjpJe_jsDu40azTQmfb88JoPsj-OBMzNerMGDhPdRE4lwc0Af07HMMFspuVJrXx30rK1cLU1l41hVL5u6fBw6jGMFQGpel_6M6_DzZYDzTvXJb_dzLwZs2_GelRN-2HlVziDMam-e-sbuXXdvYzP2WByZMhEROt2pxe6jLT6UIcZ0iO7HNFU_01Q-WCdJ34HEB1mHbzTXGCkBStxPrjqT8EhX7EhUX0yLLCuKTGvFoTVVsaqODNZLPWPCGN304kGx75-FStj7JiAgD3Wpo28RGZ4A6tyT7Sq7ELZXnBp8WgPOMxB79Rf7oSTtzNg-dUMz0plL9sToRxgXnEzBXUvokpBYmJPw6ob8vq8jBJXlSwfhpcouv7nHl99ghLdpu9wU4vtyrfCRa-2ueYo0Xbu4P6erbopT6YrHGhDUM6IIhOpA4Fi-K_wOKueva6p_NYehCRATDV1_jh109D6Favj8bTaABn1S7yfMYJ-sEUDh5Iad_ZUqOsoHSq2t_uFBagHtSZrbHUxQ8ghvMisEEcLka6xRbhpJy0" alt=""></p>
<h4 id="三、ApplicationContext-容器初始化"><a href="#三、ApplicationContext-容器初始化" class="headerlink" title="三、ApplicationContext 容器初始化"></a>三、<code>ApplicationContext</code> 容器初始化</h4><p><code>Java EE Web</code> 项目启动，会触发 <code>ContextLoaderListener</code> 监听器，完成 <code>WebApplicationContext</code> -根容器的初始化。具体实现方法如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* web.xml 中 &lt;context&gt;contextLoaderListener&lt;/context&gt; 触发根容器初始化</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> servletContext 整个应用的上下文; 一个应用只有一个 ServletContext</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 根容器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根容器挂载在 ServletContext 下，有且仅有一个根容器</span></span><br><span class="line">    <span class="keyword">if</span> (servletContext</span><br><span class="line">            .getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)</span><br><span class="line">        != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    servletContext.log(<span class="string">"Initializing Spring root WebApplicationContext"</span>);</span><br><span class="line">    Log logger = LogFactory.getLog(ContextLoader<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">"Root WebApplicationContext: initialization started"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.context == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 默认生成的根容器为 XmlWebApplicationContext</span></span><br><span class="line">            <span class="keyword">this</span>.context = createWebApplicationContext(servletContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            ConfigurableWebApplicationContext cwac</span><br><span class="line">                = (ConfigurableWebApplicationContext) <span class="keyword">this</span>.context;</span><br><span class="line">            <span class="comment">// 根容器还没有被刷新</span></span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// 添加父容器</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 对于 web 应用， 父容器默认为空</span></span><br><span class="line">                    ApplicationContext parent = loadParentContext(servletContext);</span><br><span class="line">                    cwac.setParent(parent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 配置并刷新容器</span></span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将根容器挂载在 ServletContext 下，指定属性 name 值，方便在应用内部随时使用</span></span><br><span class="line">        servletContext</span><br><span class="line">            .setAttribute(WebApplicationContext</span><br><span class="line">                          .ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">this</span>.context);</span><br><span class="line">        <span class="comment">// 获取当前线程的上下文加载器</span></span><br><span class="line">        ClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">if</span> (ccl == ContextLoader<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()) </span>&#123;</span><br><span class="line">            currentContext = <span class="keyword">this</span>.context;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 若上下文加载器不是 ContextLoader 加载器，则存至 currentContextPerThread 静态域</span></span><br><span class="line">            currentContextPerThread.put(ccl, <span class="keyword">this</span>.context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            <span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line">            logger.info(<span class="string">"Root WebApplicationContext initialized in "</span></span><br><span class="line">                        + elapsedTime + <span class="string">" ms"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.context;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line">        logger.error(<span class="string">"Context initialization failed"</span>, ex);</span><br><span class="line">        <span class="comment">// 若发生异常，则将异常挂载到 ServletContext 上下文中，此后不再初始化</span></span><br><span class="line">        servletContext</span><br><span class="line">            .setAttribute(WebApplicationContext</span><br><span class="line">                          .ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建根容器 WebApplicationContext</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> sc ServletContext 应用上下文; 一个应用只有一个应用上下文</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> WebApplicationContext 根容器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">WebApplicationContext <span class="title">createWebApplicationContext</span><span class="params">(ServletContext sc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断根容器的实现类</span></span><br><span class="line">    Class&lt;?&gt; contextClass = determineContextClass(sc);</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">contextClass</span>)) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例化根容器</span></span><br><span class="line">    <span class="keyword">return</span> (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 判断根容器的实现类</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> servletContext 应用上下文; 一个应用只有一个应用上下文</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 根容器的实现类; 默认为 XmlWebApplicationContext</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Class&lt;?&gt; determineContextClass(ServletContext servletContext) &#123;</span><br><span class="line">    <span class="comment">// 读取web.xml中的配置 &lt;context-param&gt;contextClass&lt;/context-param&gt;</span></span><br><span class="line">    String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM);</span><br><span class="line">    <span class="keyword">if</span> (contextClassName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ClassUtils.forName(contextClassName,</span><br><span class="line">                                      ClassUtils.getDefaultClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</span><br><span class="line">                <span class="string">"Failed to load custom context class ["</span> + contextClassName + <span class="string">"]"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 若未配置, 则创建默认的根容器 XmlWebApplicationContext</span></span><br><span class="line">        contextClassName =</span><br><span class="line">            defaultStrategies.getProperty(WebApplicationContext<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ClassUtils.forName(contextClassName,</span><br><span class="line">                                      ContextLoader<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</span><br><span class="line">                <span class="string">"Failed to load default context class ["</span> + contextClassName + <span class="string">"]"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码实现可以得出：</p>
<ul>
<li><p>一个 <code>Web</code> 应用，根容器只能创建一次；</p>
</li>
<li><p>根容器的实现类可配置，默认为 <code>XmlWebApplicationContext</code>；</p>
</li>
<li><p>需要为根容器指定父容器，旨在实现父容器-子容器的继承架构。目前持保留实现，默认为 <code>null</code>；</p>
</li>
<li><p>根容器 <code>WebApplicationContext</code> 是挂载在应用上下文 <code>ServletContext</code> 下的，并指定属性名  <code>WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</code>。</p>
</li>
</ul>
<p>  下面介绍根容器的配置与刷新:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* WebApplicationContext 根容器的配置与刷新</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> wac WebApplicationContext 根容器的可配置继承</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> sc  ServletContext 应用上下文; 一个应用只有一个应用上下文</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">configureAndRefreshWebApplicationContext</span><span class="params">(ConfigurableWebApplicationContext wac,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              ServletContext sc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 为根容器配置 ID，用于后面加载Spring-MVC的配置文件</span></span><br><span class="line">    <span class="keyword">if</span> (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;</span><br><span class="line">        String idParam = sc.getInitParameter(CONTEXT_ID_PARAM);</span><br><span class="line">        <span class="keyword">if</span> (idParam != <span class="keyword">null</span>) &#123;</span><br><span class="line">            wac.setId(idParam);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 生成默认的 ID</span></span><br><span class="line">            wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +</span><br><span class="line">                      ObjectUtils.getDisplayString(sc.getContextPath()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 为根容器配置应用上下文</span></span><br><span class="line">    wac.setServletContext(sc);</span><br><span class="line">    <span class="comment">// 3. 为根容器添加配置参数地址</span></span><br><span class="line">    <span class="comment">// 读取web.xml中的配置 &lt;context-param&gt;configLocation&lt;/context-param&gt;</span></span><br><span class="line">    String configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);</span><br><span class="line">    <span class="keyword">if</span> (configLocationParam != <span class="keyword">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocationParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 初始化环境属性</span></span><br><span class="line">    ConfigurableEnvironment env = wac.getEnvironment();</span><br><span class="line">    <span class="keyword">if</span> (env <span class="keyword">instanceof</span> ConfigurableWebEnvironment) &#123;</span><br><span class="line">        ((ConfigurableWebEnvironment) env).initPropertySources(sc, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 自定义上下文</span></span><br><span class="line">    customizeContext(sc, wac);</span><br><span class="line">    <span class="comment">// 6. 刷新根容器</span></span><br><span class="line">    wac.refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义上下文</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> sc  ServletContext 应用上下文; 一个应用只有一个应用上下文</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> wac WebApplicationContext 根容器的可配置继承</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customizeContext</span><span class="params">(ServletContext sc, ConfigurableWebApplicationContext wac)</span> </span>&#123;</span><br><span class="line">    List&lt;Class&lt;ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt;&gt;&gt;</span><br><span class="line">        initializerClasses =</span><br><span class="line">        determineContextInitializerClasses(sc);</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt;&gt;</span><br><span class="line">         initializerClass : initializerClasses) &#123;</span><br><span class="line">        Class&lt;?&gt; initializerContextClass =</span><br><span class="line">            GenericTypeResolver.resolveTypeArgument(initializerClass,</span><br><span class="line">                                                    ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (initializerContextClass != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; !initializerContextClass.isInstance(wac)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(String.format(<span class="string">"..."</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建 Initializer 实例，并添加到 contextInitializers</span></span><br><span class="line">        <span class="keyword">this</span>.contextInitializers.add(BeanUtils.instantiateClass(initializerClass));</span><br><span class="line">        AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.contextInitializers);</span><br><span class="line">        <span class="keyword">for</span> (ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt;</span><br><span class="line">             initializer : <span class="keyword">this</span>.contextInitializers) &#123;</span><br><span class="line">            <span class="comment">// 依次执行初始化程序</span></span><br><span class="line">            initializer.initialize(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码实现可以得出：</p>
<ul>
<li>通过 <code>&lt;context-parm&gt;configLocation&lt;/context-param&gt;</code> 为根容器添加配置信息；</li>
<li>因为只要刷新上下文，就要调用环境的 <code>initPropertySources</code> 方法，所以需要提前初始化环境属性，以保证根容器刷新之前的一些操作，如后置处理或初始化过程，都可以直接获取到 <code>Servlet</code> 属性；</li>
<li>在根容器添加配置后，刷新前，执行自定义操作。根据 <code>ServletContext</code> 的 <code>contextInitializerClasses</code> 和 <code>globalInitializerClasses</code>  配置加载所有的上下文初始化程序，并依次执行；</li>
<li>自定义根容器后，执行根容器的刷新。放在下一个专栏分解。</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 线程池饥饿死锁</title>
    <url>/2021/12/23/thread_pool_task_executor_dead_lock/</url>
    <content><![CDATA[<hr>
<h4 id="一、-Spring-线程池"><a href="#一、-Spring-线程池" class="headerlink" title="一、 Spring 线程池"></a>一、 <code>Spring</code> 线程池</h4><p><code>Spring</code> 自带的线程池 <code>ThreadPoolTaskExecutor</code> ，本质上是对 <code>ThreadPoolExecutor</code> 的包装。一方面，基于 <code>SpringBoot</code> 的项目可以通过 <code>yaml</code> 或 <code>properties</code> 文件快速配置线程池，并借助 <code>@RefreshScope</code> 实现线程池的热部署；另一方面，通过<code>@EnableAsync</code>、<code>@Async</code>配置，可以方便地执行异步并发任务，无需编写异步调用代码。 凭借 <code>Spring</code> 生态圈，<code>ThreadPoolTaskExecutor</code> 因其良好的设计感和兼容性而被广泛使用。</p>
<h4 id="二、-Spring-线程池死锁"><a href="#二、-Spring-线程池死锁" class="headerlink" title="二、 Spring 线程池死锁"></a>二、 <code>Spring</code> 线程池死锁</h4><p>像 <code>jdk</code> 线程池一样，<code>Spring</code> 线程池同样潜藏着一些坑，比如死锁。不得不说这是一个大坑。</p>
<p>首先，在业务上难以理解。线程池是面向 <code>Task</code> 的工具，无非就做三件事：创建并管理线程、执行任务调度、存放待办任务。对于 <code>Task</code> 来说，抢占到资源的就执行，抢占不到的，就按照拒绝策略处理。不同的 <code>Task</code> 怎么会互相等待呢？</p>
<p>其次，在技术上难以定位故障。线程池处于死锁状态，导致主线程走着走着就“失踪了”。重启系统后可以正常工作，一旦压测大概率又会死掉。没有错误日志，没有 <code>cpu</code> 飙升，没有 <code>FullGC</code>。从表象上看，跟并发有关系，而且属于偶发故障。我们把 <code>dump</code> 拉下来分析一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http-nio-8080-exec-32&quot; daemon prio&#x3D;5 tid&#x3D;1676 WAITING</span><br><span class="line">    at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">    at java.util.concurrent.FutureTask.awaitDone(FutureTask.java:429)</span><br><span class="line">       Local Variable: java.util.concurrent.FutureTask$WaitNode#4</span><br><span class="line">    at java.util.concurrent.FutureTask.get(FutureTask.java:191)</span><br><span class="line">       Local Variable: java.util.concurrent.FutureTask#4</span><br></pre></td></tr></table></figure>

<p>线程(1676) 目前处于 <code>WAITING</code> 状态，原因是 <code>FutureTask</code> 在等待 <code>cpu</code> 的宠幸。但在压测场景下，任务抢占线程资源实属正常，所以此时还没有朝着死锁上面想。</p>
<p>最后，冒出一个念头：如果 <code>Task</code> 嵌套 <code>Task</code>，并且共用同一个线程池，那么在并发争夺资源的场景下，就有可能出现外部  <code>Task</code> 等待内部 <code>Task</code>、内部 <code>Task</code> 等待外部 <code>Task</code> 的情况，从而导致整个线程池死锁。</p>
<h4 id="三、场景模拟"><a href="#三、场景模拟" class="headerlink" title="三、场景模拟"></a>三、场景模拟</h4><p>为了更好地理解，我们用打工人进站乘地铁这件事来模拟 <code>Spring</code> 线程池的工作机制。</p>
<p>假设有 <code>5</code> 个常开闸机（核心线程数），<code>5</code> 个应急闸机（5+5=最大线程数），进站围栏可以排 <code>100</code> 人（阻塞队列大小）。</p>
<p>约定进站规则：</p>
<ul>
<li>必须有票；</li>
<li>必须按照先来后到的顺序进站；</li>
<li>一旦走到闸机口或者进入围栏，就不可再撤退；</li>
<li>先使用 <code>5</code> 个常开闸机进站；</li>
<li><code>5</code> 个常开闸机若都有乘客进入，则安排后来者在进站围栏里排队等待；</li>
<li>若进站围栏已经站满了乘客，则开启另外 <code>5</code> 个应急闸机（一个个开启）；</li>
</ul>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_28_38_thread_pool_change.png" alt=""></p>
<p>为了模拟 <code>Task</code> 任务嵌套的场景，假设所有打工人都有一个同伴，而且都是走到闸机口才发现忘记买票，只能安排同伴去买票。这里：</p>
<ul>
<li>外层 <code>Task</code>：打工人进闸机；</li>
<li>内层 <code>Task</code>：打工人的同伴出去买票；</li>
</ul>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_30_8_thread_pool_dead_lock_2.jpg" alt=""></p>
<p>假设张三、李四等人走到闸机口时才发现忘了买票，于是便可能发生如下对话：</p>
<ul>
<li><p>张三：“怎么出去买个票要这么久？”</p>
</li>
<li><p>张三的同伴：“我在排队呢！闸机门口的人别挡着路！赶紧进去！”</p>
</li>
<li><p>李四：“这边的人都忘了买票啦！伙伴们不把票带过来，我们也进不去啊！”</p>
</li>
<li><p>熊二的同伴：“你们不进去，我们就没法向前走啊！”</p>
</li>
<li><p>郑十：“你们都别吵了，我的同伴还在买票的路上呢！”</p>
</li>
</ul>
<p>大家吵成一团，场面十分焦灼，但违反规定就会被拉去枪毙，于是这波打工人都堵在闸机口，一个能进站的都没有。</p>
<h4 id="四、代码模拟"><a href="#四、代码模拟" class="headerlink" title="四、代码模拟"></a>四、代码模拟</h4><p>定义线程池：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zourongsheng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_EXECUTOR = <span class="string">"taskExecutor"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 任务线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(TASK_EXECUTOR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">taskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">// 核心线程数</span></span><br><span class="line">        executor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 阻塞队列大小</span></span><br><span class="line">        executor.setQueueCapacity(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 线程最大空闲时间</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">// 线程名称前缀</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"common-sync-executor-"</span>);</span><br><span class="line">        <span class="comment">// 拒绝策略</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">        executor.setAwaitTerminationSeconds(<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zourongsheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/23 14:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> ExecutorConfig.TASK_EXECUTOR;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= ServiceInitializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TaskTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(TaskTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span>(name = TASK_EXECUTOR)</span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskExecutor taskExecutor;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化打工人的姓名</span></span><br><span class="line">        <span class="keyword">int</span> workerCount = <span class="number">500</span>;</span><br><span class="line">        List&lt;String&gt; workerNameList = <span class="keyword">new</span> ArrayList&lt;&gt;(workerCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= workerCount; i++) &#123;</span><br><span class="line">            workerNameList.add(String.format(<span class="string">"%s号打工人"</span>, i));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 打工人进站</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;CompletableFuture&lt;Void&gt;&gt; completableFutures = workerNameList</span><br><span class="line">            .stream()</span><br><span class="line">            .map(workerName -&gt; CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 打印线程池的运行信息</span></span><br><span class="line">                <span class="keyword">this</span>.printThreadPoolTaskExecutorInfo(workerName);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 外层Task: 打工人进站</span></span><br><span class="line">                <span class="keyword">int</span> passGateMillSecond = random.nextInt(<span class="number">500</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(passGateMillSecond);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> buyTicketMillSecond = random.nextInt(<span class="number">500</span>);</span><br><span class="line">                LOGGER.info(<span class="string">"&#123;&#125;走到闸机口, 发现未买票, 安排同伴去买票, 需要&#123;&#125;毫秒"</span>, workerName, buyTicketMillSecond);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 内层Task: 打工人的同伴出来买票</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    taskExecutor.submit(() -&gt; &#123;</span><br><span class="line">                        LOGGER.info(<span class="string">"&#123;&#125;的同伴出来买票了"</span>, workerName);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            TimeUnit.MILLISECONDS.sleep(buyTicketMillSecond);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;).get();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">                    LOGGER.error(<span class="string">"&#123;&#125;的同伴出来买票失败：&#123;&#125;"</span>, workerName, e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">                LOGGER.info(<span class="string">"&#123;&#125;与同伴成功进站"</span>, workerName);</span><br><span class="line">            &#125;, taskExecutor).exceptionally(e -&gt; &#123;</span><br><span class="line">                LOGGER.error(<span class="string">"&#123;&#125;进站失败: &#123;&#125;"</span>, workerName, e.getMessage(), e);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 等待所有打工人进站</span></span><br><span class="line">        completableFutures.stream().map(CompletableFuture::join).collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        LOGGER.info(<span class="string">"打工人都进站了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 【打印线程池运行信息】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printThreadPoolTaskExecutorInfo</span><span class="params">(String workName)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"进站人：&#123;&#125;"</span>, workName);</span><br><span class="line">        LOGGER.info(<span class="string">"核心线程数：&#123;&#125;"</span>, taskExecutor.getCorePoolSize());</span><br><span class="line">        LOGGER.info(<span class="string">"线程池大小：&#123;&#125;"</span>, taskExecutor.getPoolSize());</span><br><span class="line">        LOGGER.info(<span class="string">"活跃线程数：&#123;&#125;"</span>, taskExecutor.getActiveCount());</span><br><span class="line">        LOGGER.info(<span class="string">"线程保持时间（秒）：&#123;&#125;"</span>, taskExecutor.getKeepAliveSeconds());</span><br><span class="line">        LOGGER.info(<span class="string">"线程池最大数量：&#123;&#125;"</span>, taskExecutor.getMaxPoolSize());</span><br><span class="line">        LOGGER.info(<span class="string">"线程池等待的任务数量: &#123;&#125;"</span>, taskExecutor.getThreadPoolExecutor().getQueue().size());</span><br><span class="line">        LOGGER.info(<span class="string">"线程池已完成任务数量: &#123;&#125;"</span>, taskExecutor.getThreadPoolExecutor().getCompletedTaskCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行起来，日志打印：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.354</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 进站人：<span class="number">1</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池大小：<span class="number">3</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 活跃线程数：<span class="number">3</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 进站人：<span class="number">2</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 线程池大小：<span class="number">3</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 活跃线程数：<span class="number">3</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - <span class="number">1</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">275</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.355</span> [common-sync-executor-<span class="number">3</span>] INFO TaskTest - 进站人：<span class="number">3</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">3</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">3</span>] INFO TaskTest - 线程池大小：<span class="number">4</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">3</span>] INFO TaskTest - 活跃线程数：<span class="number">4</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">3</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">3</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">3</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">3</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">4</span>] INFO TaskTest - 进站人：<span class="number">4</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">4</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">4</span>] INFO TaskTest - 线程池大小：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">4</span>] INFO TaskTest - 活跃线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">4</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">4</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">4</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">4</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">5</span>] INFO TaskTest - 进站人：<span class="number">5</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.356</span> [common-sync-executor-<span class="number">5</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.357</span> [common-sync-executor-<span class="number">5</span>] INFO TaskTest - 线程池大小：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.357</span> [common-sync-executor-<span class="number">5</span>] INFO TaskTest - 活跃线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.357</span> [common-sync-executor-<span class="number">5</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.357</span> [common-sync-executor-<span class="number">5</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.357</span> [common-sync-executor-<span class="number">5</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">100</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.357</span> [common-sync-executor-<span class="number">5</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 进站人：<span class="number">106</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池大小：<span class="number">8</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 活跃线程数：<span class="number">8</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - <span class="number">1</span>号打工人的同伴出来买票了</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">100</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 进站人：<span class="number">107</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 线程池大小：<span class="number">9</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.358</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 活跃线程数：<span class="number">9</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">100</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 进站人：<span class="number">108</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">100</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [main] INFO TaskTest - 进站人：<span class="number">110</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">10</span>] INFO TaskTest - 进站人：<span class="number">109</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [main] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">10</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">10</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [main] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">10</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [main] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">10</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [main] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">10</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [main] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">10</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">100</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [main] INFO TaskTest - 线程池等待的任务数量: <span class="number">100</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.359</span> [common-sync-executor-<span class="number">10</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.360</span> [main] INFO TaskTest - 线程池已完成任务数量: <span class="number">0</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.368</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - <span class="number">107</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">81</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.368</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - <span class="number">107</span>号打工人的同伴出来买票了</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.417</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - <span class="number">2</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">391</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.417</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - <span class="number">2</span>号打工人的同伴出来买票了</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.449</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - <span class="number">107</span>号打工人与同伴成功进站</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.449</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 进站人：<span class="number">6</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.449</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.449</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.449</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.449</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.449</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.449</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">99</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.449</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">1</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.515</span> [common-sync-executor-<span class="number">4</span>] INFO TaskTest - <span class="number">4</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">34</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.559</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - <span class="number">106</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">116</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.559</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - <span class="number">106</span>号打工人的同伴出来买票了</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.570</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - <span class="number">108</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">149</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.570</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - <span class="number">108</span>号打工人的同伴出来买票了</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 进站人：<span class="number">7</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - <span class="number">1</span>号打工人与同伴成功进站</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 进站人：<span class="number">8</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">98</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">3</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">98</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.633</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">3</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.675</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - <span class="number">106</span>号打工人与同伴成功进站</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.675</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 进站人：<span class="number">9</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.675</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.675</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.675</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.675</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.675</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.675</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">97</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.675</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">4</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.719</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - <span class="number">108</span>号打工人与同伴成功进站</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.719</span> [common-sync-executor-<span class="number">5</span>] INFO TaskTest - <span class="number">5</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">380</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.719</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 进站人：<span class="number">10</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.719</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.719</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.719</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.719</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.719</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.719</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">97</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.719</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.784</span> [main] INFO TaskTest - <span class="number">110</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">291</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.796</span> [common-sync-executor-<span class="number">3</span>] INFO TaskTest - <span class="number">3</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">205</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.808</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - <span class="number">2</span>号打工人与同伴成功进站</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.808</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 进站人：<span class="number">11</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.808</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.808</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.808</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.808</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.808</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.808</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">98</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.808</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">6</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.815</span> [common-sync-executor-<span class="number">2</span>] INFO TaskTest - <span class="number">11</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">192</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.821</span> [common-sync-executor-<span class="number">10</span>] INFO TaskTest - <span class="number">109</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">115</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.837</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - <span class="number">8</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">67</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.837</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - <span class="number">8</span>号打工人的同伴出来买票了</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.904</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - <span class="number">8</span>号打工人与同伴成功进站</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.904</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 进站人：<span class="number">12</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.904</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.904</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.904</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.904</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.904</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.904</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">99</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.904</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">7</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.934</span> [common-sync-executor-<span class="number">8</span>] INFO TaskTest - <span class="number">6</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">198</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.949</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - <span class="number">7</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">470</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.949</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - <span class="number">7</span>号打工人的同伴出来买票了</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.969</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - <span class="number">9</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">142</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">46.969</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - <span class="number">9</span>号打工人的同伴出来买票了</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.102</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - <span class="number">12</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">470</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.102</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - <span class="number">12</span>号打工人的同伴出来买票了</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.111</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - <span class="number">9</span>号打工人与同伴成功进站</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.111</span> [common-sync-executor-<span class="number">9</span>] INFO TaskTest - <span class="number">10</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">109</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.111</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 进站人：<span class="number">13</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.111</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.111</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.111</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.111</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.111</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.111</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">100</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.111</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">8</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.220</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - <span class="number">13</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">245</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.220</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - <span class="number">13</span>号打工人的同伴出来买票了</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.419</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - <span class="number">7</span>号打工人与同伴成功进站</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.419</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 进站人：<span class="number">14</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.419</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.419</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.419</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.419</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.419</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.419</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">99</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.419</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">9</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.465</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - <span class="number">13</span>号打工人与同伴成功进站</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.465</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 进站人：<span class="number">15</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.465</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.465</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.465</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.465</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.465</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.465</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">98</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.465</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.468</span> [common-sync-executor-<span class="number">6</span>] INFO TaskTest - <span class="number">15</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">392</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.572</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - <span class="number">12</span>号打工人与同伴成功进站</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.572</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 进站人：<span class="number">16</span>号打工人</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.572</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 核心线程数：<span class="number">5</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.572</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池大小：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.572</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 活跃线程数：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.572</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程保持时间（秒）：<span class="number">60</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.572</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池最大数量：<span class="number">10</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.572</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池等待的任务数量: <span class="number">98</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.572</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - 线程池已完成任务数量: <span class="number">11</span></span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">47.898</span> [common-sync-executor-<span class="number">7</span>] INFO TaskTest - <span class="number">14</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">249</span>毫秒</span><br><span class="line"><span class="number">13</span>:<span class="number">02</span>:<span class="number">48.064</span> [common-sync-executor-<span class="number">1</span>] INFO TaskTest - <span class="number">16</span>号打工人走到闸机口, 发现未买票, 安排同伴去买票, 需要<span class="number">407</span>毫秒</span><br><span class="line">    ...线程池饥饿死锁</span><br></pre></td></tr></table></figure>

<p>从日志可以看出，<code>TASK_EXECUTOR</code> 线程池一共经历了三个阶段：开启核心线程处理任务；将多余任务放入阻塞队列；开启非核心线程处理任务。一共有 <code>500</code> 个打工人需要进站，最终只有大概 <code>11</code> 人（<code>ThreadPoolExecutor().getCompletedTaskCount()</code>返回模糊数量）成功进站。线程池死锁，主线程全部处于 <code>WAITING</code> 状态。</p>
<h4 id="五、-Spring-线程池饥饿死锁解决方案"><a href="#五、-Spring-线程池饥饿死锁解决方案" class="headerlink" title="五、 Spring 线程池饥饿死锁解决方案"></a>五、 <code>Spring</code> 线程池饥饿死锁解决方案</h4><p>线程池死锁，影响比较严重。在编码过程中容易忽略（需要追溯整条业务代码链）；在测试过程中不易发现（需要压测，且是偶发现象）。我们可以采用以下方案：</p>
<ul>
<li>禁止嵌套任务共用线程池（推荐）；</li>
<li>硬编码 <code>jdk</code> 线程池，执行完任务后手动<code>shutdown</code>（不推荐）；</li>
<li>回归业务，整合嵌套任务（不推荐）。</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>虎皮蛋</title>
    <url>/2020/04/12/tiger_skin_egg/</url>
    <content><![CDATA[<hr>
<hr>
<p>又是个美好的周末，照例要吃点好的。今天做了虎皮蛋和红烧鱼。老是写技术博客也没啥意思，不如放点食谱上来吧，毕竟饮食男女嘛。这里先说虎皮蛋的制法。</p>
<h5 id="制作流程"><a href="#制作流程" class="headerlink" title="制作流程"></a>制作流程</h5><p><img src="http://www.plantuml.com/plantuml/png/SoWkIImgAStDuKfCJyqhKNZUkkx5x6uevsddKWJdUTCE99dU9GZEYzOU48SBebT1rmwc4KX1162QWHH406O0a888m0nnICrB0Re60000" alt=""></p>
<h5 id="食材准备"><a href="#食材准备" class="headerlink" title="食材准备"></a>食材准备</h5><p>新鲜鸡蛋，玉米油，佐料（大葱、小葱、姜、蒜头、生抽、老抽、蚝油、花椒、八角）</p>
<p><a href="https://imgchr.com/i/GOoYnA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/12/GOoYnA.jpg" alt="GOoYnA.jpg"></a></p>
<h5 id="1-煮蛋"><a href="#1-煮蛋" class="headerlink" title="1. 煮蛋"></a>1. 煮蛋</h5><p>将鸡蛋在开水中煮 20 分钟（一定要煮熟，否则做不出沙沙的蛋黄），然后捞出放入流动冷水下冲洗3分钟，方便剥壳。</p>
<p><a href="https://imgchr.com/i/GOoHBR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/12/GOoHBR.jpg" alt="GOoHBR.jpg"></a></p>
<h5 id="2-剥蛋"><a href="#2-剥蛋" class="headerlink" title="2. 剥蛋"></a>2. 剥蛋</h5><p>尽量剥得完整，防止油炸的时候出现裂痕。沥干鸡蛋表皮的水分，防止入油锅时发生爆炸。</p>
<p><a href="https://imgchr.com/i/GOoON6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/12/GOoON6.jpg" alt="GOoON6.jpg"></a></p>
<h5 id="3-炸蛋"><a href="#3-炸蛋" class="headerlink" title="3. 炸蛋"></a>3. 炸蛋</h5><p>玉米油的味道最轻，对鸡蛋原味的影响最小，推荐。油入锅后，大火升温；将木筷子插入热油中，当出现气泡后，可将鸡蛋下入油中。调至文火，慢炸 20 分钟，直至鸡蛋表面布满虎皮。捞出后放入凉水中浸泡，然后沥干水分。</p>
<p><a href="https://imgchr.com/i/GOTZ8S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/12/GOTZ8S.jpg" alt="GOTZ8S.jpg"></a></p>
<p><a href="https://imgchr.com/i/GOT35V" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/12/GOT35V.jpg" alt="GOT35V.jpg"></a></p>
<h5 id="4-卤蛋"><a href="#4-卤蛋" class="headerlink" title="4. 卤蛋"></a>4. 卤蛋</h5><p>将佐料放入油中炸至金黄，再加入生抽老抽蚝油，兑水熬卤汁。卤水翻开后，放入虎皮蛋，调至文火慢炖 30 分钟。大火收汁，捞出放入碗中。留存的卤汁需要没过鸡蛋。</p>
<p><a href="https://imgchr.com/i/GOTar9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/12/GOTar9.jpg" alt="GOTar9.jpg"></a></p>
<h5 id="5-腌蛋"><a href="#5-腌蛋" class="headerlink" title="5.  腌蛋"></a>5.  腌蛋</h5><p><img src="https://s1.ax1x.com/2020/04/12/GOTy8O.jpg" alt="GOTy8O.jpg"></p>
<p>卤制好的蛋，不要着急吃。虎皮蛋的精髓不在外面的虎皮，而在里面的蛋黄。一颗合格的虎皮蛋，除去 Q 弹的虎皮，还有饱满多汁、沙瓤的蛋黄。要达到这种效果，必须将做好的虎皮蛋静置 4 至 6 小时。天气暖和的时候，需放入冰箱，防止变质。</p>
]]></content>
      <categories>
        <category>吃货</category>
      </categories>
      <tags>
        <tag>小吃</tag>
      </tags>
  </entry>
  <entry>
    <title>unsafe.Pointer-指针转换与运算</title>
    <url>/2021/08/13/unsafe_pointer/</url>
    <content><![CDATA[<hr>
<h4 id="一、unsafe-Pointer-定义及使用背景"><a href="#一、unsafe-Pointer-定义及使用背景" class="headerlink" title="一、unsafe.Pointer 定义及使用背景"></a>一、<code>unsafe.Pointer</code> 定义及使用背景</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ArbitraryType is here for the purposes of documentation only and is not actually</span></span><br><span class="line"><span class="comment">// part of the unsafe package. It represents the type of an arbitrary Go expression.</span></span><br><span class="line"><span class="keyword">type</span> ArbitraryType <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Pointer *ArbitraryType</span><br></pre></td></tr></table></figure>

<p>本质上，<code>unsafe.Pointer</code>  是 <code>int</code> 类型的指针，用于各种类型指针转换的桥接。<code>Go</code> 语言有着严格的类型系统，弱化了指针的操作，所允许的操作仅仅操作其指向的对象，不能进行类似 <code>C</code> 语言的指针转换和运算。但在日常开发中，可能就需要打破这种强制限制，对内存执行任意的读写。因此，作为通用的指针类型，<code>unsafe.Pointer</code> 开启了一扇指针操作的“后门”。</p>
<h4 id="二、unsafe-Pointer-特性"><a href="#二、unsafe-Pointer-特性" class="headerlink" title="二、unsafe.Pointer 特性"></a>二、<code>unsafe.Pointer</code> 特性</h4><p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_44_21_unsafe_convert2.png" alt=""></p>
<ul>
<li><p>任意类型的指针都可以转换为 <code>unsafe.Pointer</code>；</p>
</li>
<li><p><code>unsafe.Pointer</code> 可以转换为任意类型的指针；</p>
</li>
<li><p><code>uintptr</code> 可以转换为 <code>unsafe.Pointer</code>；</p>
</li>
<li><p><code>unsafe.Pointer</code> 可以转换为 <code>uintptr</code>；</p>
<p>前面说到，<code>unsafe.Pointer</code> 是通用的指针类型，只能转换不同类型的指针，无法实现类似 <code>C</code> 语言的指针运算。因此 <code>Go</code> 引入内置类型 <code>uintptr</code>，以弥补类型系统带来的短板。<code>uintptr</code> 的官方定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// uintptr is an integer type that is large enough to hold the bit pattern of</span></span><br><span class="line"><span class="comment">// any pointer.</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">uintptr</span> <span class="keyword">uintptr</span></span><br></pre></td></tr></table></figure>

<p>本质上，<code>uintptr</code> 是一个足够大的无符号整型，可以表示任意指针的地址。相当于一个中介，可以完成指针运算或者数值类型到指针类型的转换。</p>
</li>
</ul>
<h4 id="三、unsafe-Pointer-应用"><a href="#三、unsafe-Pointer-应用" class="headerlink" title="三、unsafe.Pointer 应用"></a>三、<code>unsafe.Pointer</code> 应用</h4><h5 id="3-1-指针与指针之间的转换"><a href="#3-1-指针与指针之间的转换" class="headerlink" title="3.1 指针与指针之间的转换"></a>3.1 指针与指针之间的转换</h5><p>作为通用的指针类型，<code>unsafe.Pointer</code> 最基本的功能就是转换不同类型的指针。从  <code>*X</code> 转到 <code>*Y</code> 要求 <code>Y</code> 不大于 <code>X</code> 且两者具有相同的内存布局。</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_47_43_x-y_pointer.png" alt=""></p>
<p>例如 <code>byte</code> 与 <code>string</code> 互转。由于 <code>Go</code> 的类型系统限制，<code>byte</code> 指针是不可以直接转为 <code>string</code> 指针的，在编译阶段就会报错。我们需要借助 <code>unsafe.Pointer</code> 作为中间桥接类型来完成这个转换。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b := []<span class="keyword">byte</span>&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">    fmt.Println(b)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// []byte -&gt; string</span></span><br><span class="line">    s := *(*<span class="keyword">string</span>)(unsafe.Pointer(&amp;b))</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// string -&gt; []byte</span></span><br><span class="line">    bb := *(*[]<span class="keyword">byte</span>)(unsafe.Pointer(&amp;s))</span><br><span class="line">    fmt.Println(bb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[<span class="number">97</span> <span class="number">98</span> <span class="number">99</span>]</span><br><span class="line">abc</span><br><span class="line">[<span class="number">97</span> <span class="number">98</span> <span class="number">99</span>]</span><br></pre></td></tr></table></figure>

<h5 id="3-2-数值与指针之间的转换"><a href="#3-2-数值与指针之间的转换" class="headerlink" title="3.2 数值与指针之间的转换"></a>3.2 数值与指针之间的转换</h5><p>在 <code>C</code> 语言中，经常使用普通数值来表示指针，这也就意味着要完成数值与指针之间的互转。 <code>unsafe.Pointer</code> 是通用指针，已无能为力。因此中间人 <code>uintptr</code> 就派上用场了。我们借助 <code>uintptr</code> 先将数值转换为 <code>unsafe.Pointer</code>，然后再转换为任意类型的指针；或者将任意类型的指针，先转换为 <code>unsafe.Pointer</code>，再转换为 <code>uintptr</code>。实际上，数值与指针的互转也是 <code>CGO</code> 编程的要点之一。</p>
<p>例如 <code>int64</code> 与 <code>*C.char</code> 互转：</p>
<p><img src="https://gitlab.com/donelab/img-bed/-/raw/main/pictures/2022/04/2_19_48_14_num_to_pointer_convert.png" alt=""></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="keyword">int64</span>(<span class="number">12</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// int64 -&gt; C.char</span></span><br><span class="line">    p := (*C.char)(unsafe.Pointer(<span class="keyword">uintptr</span>(num)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// C.char -&gt; int64</span></span><br><span class="line">    num2 := <span class="keyword">int64</span>(<span class="keyword">uintptr</span>(unsafe.Pointer(p)))</span><br><span class="line">    </span><br><span class="line">    fmt.Println(num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-指针运算"><a href="#3-3-指针运算" class="headerlink" title="3.3 指针运算"></a>3.3 指针运算</h5><p><code>Go</code> 指针不仅不支持不同类型的转换，也不支持指针的运算。借助 <code>uintptr</code> 可以实现指针的移动和运算。</p>
<p>例如依次打印一个字节组信息：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := []<span class="keyword">byte</span>(<span class="string">"1234"</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(data); i++ &#123;</span><br><span class="line">        ptr := unsafe.Pointer(<span class="keyword">uintptr</span>(unsafe.Pointer(&amp;data[<span class="number">0</span>])) + <span class="keyword">uintptr</span>(i)*unsafe.Sizeof(data[<span class="number">0</span>]))</span><br><span class="line">        fmt.Printf(<span class="string">"%c\n"</span>, *(*<span class="keyword">byte</span>)(ptr))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><p><code>unsafe.Pointer</code> 的意义在于绕过 <code>Go</code> 的类型系统，直接读写内存，高效操作。正如字面理解那样，这是一种不安全的行为，如 <code>uintptr</code> 并没有指针的语义，所指向的对象存在被 <code>GC</code> 回收的风险。<code>Go</code> 是十分不鼓励这样操作的。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
</search>
